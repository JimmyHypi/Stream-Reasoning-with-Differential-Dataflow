{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0","program":"C:\\Users\\xhimi\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","differential_dataflow","C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=60678f04b51f5d2b","-C","extra-filename=-60678f04b51f5d2b","--out-dir","c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps","--extern","abomonation=c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps\\libabomonation-4994e37535bf254d.rmeta","--extern","abomonation_derive=c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps\\abomonation_derive-d20833f4ff0265da.dll","--extern","fnv=c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps\\libfnv-cea8be84afcf10a0.rmeta","--extern","serde=c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps\\libserde-32c7d6d8c78f7a57.rmeta","--extern","serde_derive=c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps\\serde_derive-43a3a674d35ef987.dll","--extern","timely=c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps\\libtimely-15d5fafb747f9a3f.rmeta","--extern","timely_sort=c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps\\libtimely_sort-8e212907e4b923d5.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\xhimi\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps\\libdifferential_dataflow-60678f04b51f5d2b.rmeta"},"prelude":{"crate_id":{"name":"differential_dataflow","disambiguator":[469715679614346959,9885077448083679832]},"crate_root":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src","external_crates":[{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12578048494495979596,2047601184299498072]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[9458200224090790355,13573932773036415113]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17212932621614837670,6562776948220383497]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[760535750034822653,11118367618612043106]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9863315158332858256,17125058067034963864]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[4687805557387852666,9943473115938981341]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[11895006708321731812,14562333644307237348]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[3795917533932740915,1352930594861700352]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[14246119625412523820,1488400038702589601]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[301469929213911528,4015090225475952437]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[2057170103176572375,2047842178592089941]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5373388065014169986,7291481803049279744]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[11217907578908536000,17992819105755382748]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","num":14,"id":{"name":"fnv","disambiguator":[14891268508836548718,9567084168687944462]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","num":15,"id":{"name":"timely","disambiguator":[1876936098390023678,9490187523360399285]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","num":16,"id":{"name":"abomonation_derive","disambiguator":[3523809365183474922,9018333872222355160]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","num":17,"id":{"name":"abomonation","disambiguator":[5067963308425919729,7869182709402404211]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","num":18,"id":{"name":"serde","disambiguator":[18442179213228461454,5861988084607929491]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","num":19,"id":{"name":"serde_derive","disambiguator":[15755826455441470639,11902243448297350401]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","num":20,"id":{"name":"timely_communication","disambiguator":[17189714604167910384,16708398788651708991]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","num":21,"id":{"name":"getopts","disambiguator":[15466764957536115585,7665105578343663632]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","num":22,"id":{"name":"unicode_width","disambiguator":[616746393377064855,2116196829730866866]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","num":23,"id":{"name":"timely_bytes","disambiguator":[13775071027184502895,4083296700090095132]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","num":24,"id":{"name":"timely_logging","disambiguator":[16998090917265264956,17588111901250771042]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","num":25,"id":{"name":"timely_sort","disambiguator":[4921665382673479112,13330733752373813859]}}],"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":0,"byte_end":4473,"line_start":1,"line_end":113,"column_start":1,"column_end":23}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":4232},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":3375,"byte_end":3385,"line_start":77,"line_end":77,"column_start":22,"column_end":32},"alias_span":null,"name":"Collection","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3598},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":3387,"byte_end":3399,"line_start":77,"line_end":77,"column_start":34,"column_end":46},"alias_span":null,"name":"AsCollection","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":3420,"byte_end":3428,"line_start":78,"line_end":78,"column_start":19,"column_end":27},"alias_span":null,"name":"Hashable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3423},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":3450,"byte_end":3457,"line_start":79,"line_end":79,"column_start":21,"column_end":28},"alias_span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":3461,"byte_end":3465,"line_start":79,"line_end":79,"column_start":32,"column_end":36},"name":"Diff","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":467},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\mod.rs","byte_start":11213,"byte_end":11219,"line_start":7,"line_end":7,"column_start":24,"column_end":30},"alias_span":null,"name":"Reduce","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":500},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\mod.rs","byte_start":11221,"byte_end":11230,"line_start":7,"line_end":7,"column_start":32,"column_end":41},"alias_span":null,"name":"Threshold","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\mod.rs","byte_start":11232,"byte_end":11237,"line_start":7,"line_end":7,"column_start":43,"column_end":48},"alias_span":null,"name":"Count","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":671},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\mod.rs","byte_start":11267,"byte_end":11278,"line_start":8,"line_end":8,"column_start":28,"column_end":39},"alias_span":null,"name":"Consolidate","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":718},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\mod.rs","byte_start":11303,"byte_end":11310,"line_start":9,"line_end":9,"column_start":24,"column_end":31},"alias_span":null,"name":"Iterate","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":817},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\mod.rs","byte_start":11333,"byte_end":11337,"line_start":10,"line_end":10,"column_start":22,"column_end":26},"alias_span":null,"name":"Join","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":866},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\mod.rs","byte_start":11339,"byte_end":11347,"line_start":10,"line_end":10,"column_start":28,"column_end":36},"alias_span":null,"name":"JoinCore","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":982},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\mod.rs","byte_start":11371,"byte_end":11381,"line_start":11,"line_end":11,"column_start":22,"column_end":32},"alias_span":null,"name":"CountTotal","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":1024},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\mod.rs","byte_start":11408,"byte_end":11422,"line_start":12,"line_end":12,"column_start":26,"column_end":40},"alias_span":null,"name":"ThresholdTotal","value":"","parent":{"krate":0,"index":107}},{"kind":"Use","ref_id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\mod.rs","byte_start":21708,"byte_end":21719,"line_start":69,"line_end":69,"column_start":23,"column_end":34},"alias_span":null,"name":"TraceWriter","value":"","parent":{"krate":0,"index":119}},{"kind":"Use","ref_id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\mod.rs","byte_start":21743,"byte_end":21753,"line_start":70,"line_end":70,"column_start":23,"column_end":33},"alias_span":null,"name":"TraceAgent","value":"","parent":{"krate":0,"index":119}},{"kind":"Use","ref_id":{"krate":0,"index":244},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\mod.rs","byte_start":21755,"byte_end":21769,"line_start":70,"line_end":70,"column_start":35,"column_end":49},"alias_span":null,"name":"ShutdownButton","value":"","parent":{"krate":0,"index":119}},{"kind":"Use","ref_id":{"krate":0,"index":311},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\mod.rs","byte_start":21801,"byte_end":21809,"line_start":72,"line_end":72,"column_start":29,"column_end":37},"alias_span":null,"name":"Arranged","value":"","parent":{"krate":0,"index":119}},{"kind":"Use","ref_id":{"krate":0,"index":369},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\mod.rs","byte_start":21811,"byte_end":21818,"line_start":72,"line_end":72,"column_start":39,"column_end":46},"alias_span":null,"name":"Arrange","value":"","parent":{"krate":0,"index":119}},{"kind":"Use","ref_id":{"krate":0,"index":404},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\mod.rs","byte_start":21820,"byte_end":21832,"line_start":72,"line_end":72,"column_start":48,"column_end":60},"alias_span":null,"name":"ArrangeByKey","value":"","parent":{"krate":0,"index":119}},{"kind":"Use","ref_id":{"krate":0,"index":416},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\mod.rs","byte_start":21834,"byte_end":21847,"line_start":72,"line_end":72,"column_start":62,"column_end":75},"alias_span":null,"name":"ArrangeBySelf","value":"","parent":{"krate":0,"index":119}},{"kind":"Use","ref_id":{"krate":0,"index":3783},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\mod.rs","byte_start":253655,"byte_end":253665,"line_start":12,"line_end":12,"column_start":28,"column_end":38},"alias_span":null,"name":"CursorList","value":"","parent":{"krate":0,"index":1416}},{"kind":"Use","ref_id":{"krate":0,"index":1532},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\mod.rs","byte_start":275162,"byte_end":275178,"line_start":43,"line_end":43,"column_start":15,"column_end":31},"alias_span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\mod.rs","byte_start":275182,"byte_end":275194,"line_start":43,"line_end":43,"column_start":35,"column_end":47},"name":"spine_fueled","value":"","parent":{"krate":0,"index":1531}},{"kind":"Use","ref_id":{"krate":0,"index":1686},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\mod.rs","byte_start":275246,"byte_end":275258,"line_start":47,"line_end":47,"column_start":30,"column_end":42},"alias_span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\mod.rs","byte_start":275262,"byte_end":275269,"line_start":47,"line_end":47,"column_start":46,"column_end":53},"name":"Batcher","value":"","parent":{"krate":0,"index":1531}},{"kind":"Use","ref_id":{"krate":0,"index":1485},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":230246,"byte_end":230252,"line_start":20,"line_end":20,"column_start":23,"column_end":29},"alias_span":null,"name":"Cursor","value":"","parent":{"krate":0,"index":1415}},{"kind":"Use","ref_id":{"krate":0,"index":3800},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":230281,"byte_end":230292,"line_start":21,"line_end":21,"column_start":28,"column_end":39},"alias_span":null,"name":"Description","value":"","parent":{"krate":0,"index":1415}},{"kind":"Use","ref_id":{"krate":0,"index":3423},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":436246,"byte_end":436253,"line_start":14,"line_end":14,"column_start":15,"column_end":22},"alias_span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":436257,"byte_end":436261,"line_start":14,"line_end":14,"column_start":26,"column_end":30},"name":"Diff","value":"","parent":{"krate":0,"index":3388}},{"kind":"Use","ref_id":{"krate":0,"index":3988},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":438957,"byte_end":438964,"line_start":104,"line_end":104,"column_start":24,"column_end":31},"alias_span":null,"name":"Present","value":"","parent":{"krate":0,"index":3388}},{"kind":"Use","ref_id":{"krate":0,"index":4036},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":439945,"byte_end":439953,"line_start":134,"line_end":134,"column_start":21,"column_end":29},"alias_span":null,"name":"DiffPair","value":"","parent":{"krate":0,"index":3388}},{"kind":"Use","ref_id":{"krate":0,"index":4145},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":442370,"byte_end":442380,"line_start":210,"line_end":210,"column_start":23,"column_end":33},"alias_span":null,"name":"DiffVector","value":"","parent":{"krate":0,"index":3388}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":0,"byte_end":4473,"line_start":1,"line_end":113,"column_start":1,"column_end":23},"name":"","qualname":"::","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":107},{"krate":0,"index":1138},{"krate":0,"index":1397},{"krate":0,"index":1415},{"krate":0,"index":3322},{"krate":0,"index":3388},{"krate":0,"index":3508},{"krate":0,"index":3614},{"krate":0,"index":3630}],"decl_id":null,"docs":" Differential dataflow is a high-throughput, low-latency data-parallel programming framework.","sig":null,"attributes":[{"value":"forbid(missing_docs)","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":3306,"byte_end":3330,"line_start":73,"line_end":73,"column_start":1,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":3815,"byte_end":3819,"line_start":86,"line_end":86,"column_start":11,"column_end":15},"name":"Data","qualname":"::Data","value":"Data: timely::Data + Ord + Debug","parent":null,"children":[],"decl_id":null,"docs":" Data type usable in differential dataflow.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":21},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":3969,"byte_end":3981,"line_start":90,"line_end":90,"column_start":11,"column_end":23},"name":"ExchangeData","qualname":"::ExchangeData","value":"ExchangeData: timely::ExchangeData + Ord + Debug","parent":null,"children":[],"decl_id":null,"docs":" Data types exchangeable in differential dataflow.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":31},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hashable","qualname":"::hashable","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":57},{"krate":0,"index":64},{"krate":0,"index":3655},{"krate":0,"index":3671},{"krate":0,"index":3668},{"krate":0,"index":3664},{"krate":0,"index":3661},{"krate":0,"index":3658},{"krate":0,"index":71},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":81},{"krate":0,"index":3674},{"krate":0,"index":3707},{"krate":0,"index":3704},{"krate":0,"index":3701},{"krate":0,"index":3690},{"krate":0,"index":3687},{"krate":0,"index":3683},{"krate":0,"index":3680},{"krate":0,"index":3678},{"krate":0,"index":85},{"krate":0,"index":89},{"krate":0,"index":93},{"krate":0,"index":3710},{"krate":0,"index":3738},{"krate":0,"index":3735},{"krate":0,"index":3728},{"krate":0,"index":3725},{"krate":0,"index":3721},{"krate":0,"index":3718},{"krate":0,"index":3715},{"krate":0,"index":3713},{"krate":0,"index":96},{"krate":0,"index":100},{"krate":0,"index":104}],"decl_id":null,"docs":" Traits and types related to the distribution of data.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":5986,"byte_end":5994,"line_start":29,"line_end":29,"column_start":11,"column_end":19},"name":"Hashable","qualname":"::hashable::Hashable","value":"Hashable","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38}],"decl_id":null,"docs":" Types with a `hashed` method, producing an unsigned output of some type.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":6044,"byte_end":6050,"line_start":31,"line_end":31,"column_start":10,"column_end":16},"name":"Output","qualname":"::hashable::Hashable::Output","value":"type Output: Unsigned+Copy;","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" The type of the output value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":6132,"byte_end":6138,"line_start":33,"line_end":33,"column_start":8,"column_end":14},"name":"hashed","qualname":"::hashable::Hashable::hashed","value":"fn (&self) -> Self::Output","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" A well-distributed integer derived from the data.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":6746,"byte_end":6757,"line_start":50,"line_end":50,"column_start":11,"column_end":22},"name":"HashOrdered","qualname":"::hashable::HashOrdered","value":"HashOrdered: Ord + Hashable","parent":null,"children":[],"decl_id":null,"docs":" A marker trait for types whose `Ord` implementation orders first by `hashed()`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3655},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":8686,"byte_end":8696,"line_start":98,"line_end":98,"column_start":12,"column_end":22},"name":"OrdWrapper","qualname":"::hashable::OrdWrapper","value":"OrdWrapper { item }","parent":null,"children":[{"krate":0,"index":3657}],"decl_id":null,"docs":" A wrapper around hashable types that ensures an implementation of `Ord` that compares\n hash values first.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3657},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":8762,"byte_end":8766,"line_start":100,"line_end":100,"column_start":9,"column_end":13},"name":"item","qualname":"::hashable::OrdWrapper::item","value":"T","parent":{"krate":0,"index":3655},"children":[],"decl_id":null,"docs":" The item, so you can grab it.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3674},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":9612,"byte_end":9627,"line_start":129,"line_end":129,"column_start":12,"column_end":27},"name":"HashableWrapper","qualname":"::hashable::HashableWrapper","value":"HashableWrapper { item }","parent":null,"children":[{"krate":0,"index":3676},{"krate":0,"index":3677}],"decl_id":null,"docs":" Wrapper to stash hash value with the actual value.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3677},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":9705,"byte_end":9709,"line_start":132,"line_end":132,"column_start":9,"column_end":13},"name":"item","qualname":"::hashable::HashableWrapper::item","value":"T","parent":{"krate":0,"index":3674},"children":[],"decl_id":null,"docs":" The item, for reference.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3710},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":10361,"byte_end":10376,"line_start":159,"line_end":159,"column_start":12,"column_end":27},"name":"UnsignedWrapper","qualname":"::hashable::UnsignedWrapper","value":"UnsignedWrapper { item }","parent":null,"children":[{"krate":0,"index":3712}],"decl_id":null,"docs":" A wrapper around an unsigned integer, providing `hashed` as the value itself.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3712},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":10423,"byte_end":10427,"line_start":161,"line_end":161,"column_start":9,"column_end":13},"name":"item","qualname":"::hashable::UnsignedWrapper::item","value":"T","parent":{"krate":0,"index":3710},"children":[],"decl_id":null,"docs":" The item.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"operators","qualname":"::operators","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\mod.rs","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":436},{"krate":0,"index":663},{"krate":0,"index":697},{"krate":0,"index":786},{"krate":0,"index":963},{"krate":0,"index":1003},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1068},{"krate":0,"index":1086},{"krate":0,"index":1094},{"krate":0,"index":1113},{"krate":0,"index":1120}],"decl_id":null,"docs":" Specialize differential dataflow operators.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"arrange","qualname":"::operators::arrange","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\mod.rs","parent":null,"children":[{"krate":0,"index":120},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":171},{"krate":0,"index":265},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":431}],"decl_id":null,"docs":" Types and traits for arranging collections.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\mod.rs","byte_start":21220,"byte_end":21228,"line_start":55,"line_end":55,"column_start":5,"column_end":13},"name":"Frontier","qualname":"::operators::arrange::TraceReplayInstruction::Frontier","value":"TraceReplayInstruction::Frontier(Vec<Tr::Time>)","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Describes a frontier advance.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\mod.rs","byte_start":21306,"byte_end":21311,"line_start":57,"line_end":57,"column_start":5,"column_end":10},"name":"Batch","qualname":"::operators::arrange::TraceReplayInstruction::Batch","value":"TraceReplayInstruction::Batch(Tr::Batch, Option<Tr::Time>)","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Describes a batch of data and a capability hint.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\mod.rs","byte_start":21122,"byte_end":21144,"line_start":50,"line_end":50,"column_start":10,"column_end":32},"name":"TraceReplayInstruction","qualname":"::operators::arrange::TraceReplayInstruction","value":"TraceReplayInstruction::{Frontier, Batch}","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":132}],"decl_id":null,"docs":" Operating instructions on how to replay a trace.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\writer.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"writer","qualname":"::operators::arrange::writer","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\writer.rs","parent":null,"children":[{"krate":0,"index":143},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":160},{"krate":0,"index":168}],"decl_id":null,"docs":" Write endpoint for a sequence of batches.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\writer.rs","byte_start":22451,"byte_end":22462,"line_start":21,"line_end":21,"column_start":12,"column_end":23},"name":"TraceWriter","qualname":"::operators::arrange::writer::TraceWriter","value":"TraceWriter {  }","parent":null,"children":[{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159}],"decl_id":null,"docs":" Write endpoint for a sequence of batches.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\writer.rs","byte_start":23089,"byte_end":23092,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"new","qualname":"<TraceWriter<Tr>>::new","value":"fn (upper: Vec<Tr::Time>, trace: Weak<RefCell<TraceBox<Tr>>>, queues: Rc<RefCell<Vec<TraceAgentQueueWriter<Tr>>>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `TraceWriter`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\writer.rs","byte_start":23366,"byte_end":23371,"line_start":52,"line_end":52,"column_start":12,"column_end":17},"name":"exert","qualname":"<TraceWriter<Tr>>::exert","value":"fn (&mut self, fuel: &mut isize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Exerts merge effort, even without additional updates.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\writer.rs","byte_start":23791,"byte_end":23797,"line_start":63,"line_end":63,"column_start":12,"column_end":18},"name":"insert","qualname":"<TraceWriter<Tr>>::insert","value":"fn (&mut self, batch: Tr::Batch, hint: Option<Tr::Time>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Advances the trace by `batch`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\writer.rs","byte_start":24977,"byte_end":24981,"line_start":94,"line_end":94,"column_start":12,"column_end":16},"name":"seal","qualname":"<TraceWriter<Tr>>::seal","value":"fn (&mut self, upper: &[Tr::Time]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts an empty batch up to `upper`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":171},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"agent","qualname":"::operators::arrange::agent","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":200},{"krate":0,"index":208},{"krate":0,"index":223},{"krate":0,"index":228},{"krate":0,"index":244},{"krate":0,"index":248},{"krate":0,"index":253},{"krate":0,"index":256},{"krate":0,"index":259},{"krate":0,"index":262}],"decl_id":null,"docs":" Shared read access to a trace.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":26458,"byte_end":26468,"line_start":30,"line_end":30,"column_start":12,"column_end":22},"name":"TraceAgent","qualname":"::operators::arrange::agent::TraceAgent","value":"TraceAgent {  }","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207}],"decl_id":null,"docs":" A `TraceReader` wrapper which can be imported into other dataflows.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":28190,"byte_end":28193,"line_start":85,"line_end":85,"column_start":12,"column_end":15},"name":"new","qualname":"<TraceAgent<Tr>>::new","value":"fn (trace: Tr, operator: ::timely::dataflow::operators::generic::OperatorInfo, logging: Option<::logging::Logger>) -> (Self, TraceWriter<Tr>)","parent":null,"children":[],"decl_id":null,"docs":" Creates a new agent from a trace reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":29578,"byte_end":29590,"line_start":122,"line_end":122,"column_start":12,"column_end":24},"name":"new_listener","qualname":"<TraceAgent<Tr>>::new_listener","value":"fn (&mut self, activator: Activator) -> TraceAgentQueueReader<Tr>","parent":null,"children":[],"decl_id":null,"docs":" Attaches a new shared queue to the trace.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":33719,"byte_end":33725,"line_start":217,"line_end":217,"column_start":12,"column_end":18},"name":"import","qualname":"<TraceAgent<Tr>>::import","value":"fn <G> (&mut self, scope: &G) -> Arranged<G, TraceAgent<Tr>>","parent":null,"children":[],"decl_id":null,"docs":" Copies an existing collection into the supplied scope.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":33991,"byte_end":34003,"line_start":226,"line_end":226,"column_start":12,"column_end":24},"name":"import_named","qualname":"<TraceAgent<Tr>>::import_named","value":"fn <G> (&mut self, scope: &G, name: &str) -> Arranged<G, TraceAgent<Tr>>","parent":null,"children":[],"decl_id":null,"docs":" Same as `import`, but allows to name the source.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":36217,"byte_end":36228,"line_start":291,"line_end":291,"column_start":12,"column_end":23},"name":"import_core","qualname":"<TraceAgent<Tr>>::import_core","value":"fn <G> (&mut self, scope: &G, name: &str) -> (Arranged<G, TraceAgent<Tr>>, ShutdownButton<CapabilitySet<Tr::Time>>)","parent":null,"children":[],"decl_id":null,"docs":" Imports an arrangement into the supplied scope.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":41048,"byte_end":41063,"line_start":413,"line_end":413,"column_start":12,"column_end":27},"name":"import_frontier","qualname":"<TraceAgent<Tr>>::import_frontier","value":"fn <G> (&mut self, scope: &G, name: &str) -> (Arranged<G, TraceFrontier<TraceAgent<Tr>>>,\n ShutdownButton<CapabilitySet<Tr::Time>>)","parent":null,"children":[],"decl_id":null,"docs":" Imports an arrangement into the supplied scope.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":41595,"byte_end":41615,"line_start":425,"line_end":425,"column_start":12,"column_end":32},"name":"import_frontier_core","qualname":"<TraceAgent<Tr>>::import_frontier_core","value":"fn <G> (&mut self, scope: &G, name: &str, frontier: Vec<Tr::Time>) -> (Arranged<G, TraceFrontier<TraceAgent<Tr>>>,\n ShutdownButton<CapabilitySet<Tr::Time>>)","parent":null,"children":[],"decl_id":null,"docs":" Import a trace advanced to a specific frontier.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":244},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":43868,"byte_end":43882,"line_start":482,"line_end":482,"column_start":12,"column_end":26},"name":"ShutdownButton","qualname":"::operators::arrange::agent::ShutdownButton","value":"ShutdownButton {  }","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":247}],"decl_id":null,"docs":" Wrapper than can drop shared references.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":44033,"byte_end":44036,"line_start":489,"line_end":489,"column_start":12,"column_end":15},"name":"new","qualname":"<ShutdownButton<T>>::new","value":"fn (reference: Rc<RefCell<Option<T>>>, activator: Activator) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new ShutdownButton.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":44222,"byte_end":44227,"line_start":493,"line_end":493,"column_start":12,"column_end":17},"name":"press","qualname":"<ShutdownButton<T>>::press","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Push the shutdown button, dropping the shared objects.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":44401,"byte_end":44414,"line_start":498,"line_end":498,"column_start":12,"column_end":25},"name":"press_on_drop","qualname":"<ShutdownButton<T>>::press_on_drop","value":"fn (self) -> ShutdownDeadmans<T>","parent":null,"children":[],"decl_id":null,"docs":" Hotwires the button to one that is pressed if dropped.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":253},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":44655,"byte_end":44671,"line_start":508,"line_end":508,"column_start":12,"column_end":28},"name":"ShutdownDeadmans","qualname":"::operators::arrange::agent::ShutdownDeadmans","value":"ShutdownDeadmans {  }","parent":null,"children":[{"krate":0,"index":255}],"decl_id":null,"docs":" A deadman's switch version of a shutdown button.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"arrangement","qualname":"::operators::arrange::arrangement","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":270},{"krate":0,"index":273},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":316},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":363},{"krate":0,"index":369},{"krate":0,"index":382},{"krate":0,"index":396},{"krate":0,"index":404},{"krate":0,"index":410},{"krate":0,"index":416},{"krate":0,"index":421}],"decl_id":null,"docs":" Arranges a collection into a re-usable trace structure.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":311},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":48827,"byte_end":48835,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"Arranged","qualname":"::operators::arrange::arrangement::Arranged","value":"Arranged { stream, trace }","parent":null,"children":[{"krate":0,"index":314},{"krate":0,"index":315}],"decl_id":null,"docs":" An arranged collection of `(K,V)` values.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":314},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":49231,"byte_end":49237,"line_start":61,"line_end":61,"column_start":9,"column_end":15},"name":"stream","qualname":"::operators::arrange::arrangement::Arranged::stream","value":"timely::dataflow::Stream<G, <Tr as trace::TraceReader>::Batch>","parent":{"krate":0,"index":311},"children":[],"decl_id":null,"docs":" A stream containing arranged updates.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":315},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":49351,"byte_end":49356,"line_start":63,"line_end":63,"column_start":9,"column_end":14},"name":"trace","qualname":"::operators::arrange::arrangement::Arranged::trace","value":"Tr","parent":{"krate":0,"index":311},"children":[],"decl_id":null,"docs":" A shared trace, updated by the `Arrange` operator and readable by others.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":50666,"byte_end":50671,"line_start":98,"line_end":98,"column_start":12,"column_end":17},"name":"enter","qualname":"<Arranged<G, Tr>>::enter","value":"fn <'a, TInner> (&self, child: &Child<'a, G, TInner>) -> Arranged<Child<'a, G, TInner>, TraceEnter<Tr, TInner>>","parent":null,"children":[],"decl_id":null,"docs":" Brings an arranged collection into a nested scope.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":51466,"byte_end":51478,"line_start":117,"line_end":117,"column_start":12,"column_end":24},"name":"enter_region","qualname":"<Arranged<G, Tr>>::enter_region","value":"fn <'a> (&self, child: &Child<'a, G, G::Timestamp>) -> Arranged<Child<'a, G, G::Timestamp>, Tr>","parent":null,"children":[],"decl_id":null,"docs":" Brings an arranged collection into a nested region.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":52214,"byte_end":52222,"line_start":136,"line_end":136,"column_start":12,"column_end":20},"name":"enter_at","qualname":"<Arranged<G, Tr>>::enter_at","value":"fn <'a, TInner, F> (&self, child: &Child<'a, G, TInner>, logic: F) -> Arranged<Child<'a, G, TInner>, TraceEnterAt<Tr, TInner, F>>","parent":null,"children":[],"decl_id":null,"docs":" Brings an arranged collection into a nested scope.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":53997,"byte_end":54003,"line_start":185,"line_end":185,"column_start":12,"column_end":18},"name":"filter","qualname":"<Arranged<G, Tr>>::filter","value":"fn <F> (&self, logic: F) -> Arranged<G, TraceFilter<Tr, F>>","parent":null,"children":[],"decl_id":null,"docs":" Filters an arranged collection.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":54919,"byte_end":54932,"line_start":206,"line_end":206,"column_start":12,"column_end":25},"name":"as_collection","qualname":"<Arranged<G, Tr>>::as_collection","value":"fn <D, L> (&self, mut logic: L) -> Collection<G, D, Tr::R>","parent":null,"children":[],"decl_id":null,"docs":" Flattens the stream into a `Collection`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":55399,"byte_end":55411,"line_start":218,"line_end":218,"column_start":12,"column_end":24},"name":"flat_map_ref","qualname":"<Arranged<G, Tr>>::flat_map_ref","value":"fn <I, L> (&self, mut logic: L) -> Collection<G, I::Item, Tr::R>","parent":null,"children":[],"decl_id":null,"docs":" Extracts elements from an arrangement as a collection.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":56860,"byte_end":56866,"line_start":253,"line_end":253,"column_start":12,"column_end":18},"name":"lookup","qualname":"<Arranged<G, Tr>>::lookup","value":"fn (&self, queries: &Stream<G, (Tr::Key, G::Timestamp)>) -> Stream<G, (Tr::Key, Tr::Val, G::Timestamp, Tr::R)>","parent":null,"children":[],"decl_id":null,"docs":" Report values associated with keys at certain times.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":64934,"byte_end":64946,"line_start":421,"line_end":421,"column_start":12,"column_end":24},"name":"leave_region","qualname":"<Arranged<Child, Tr>>::leave_region","value":"fn (&self) -> Arranged<G, Tr>","parent":null,"children":[],"decl_id":null,"docs":" Brings an arranged collection out of a nested region.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":369},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":65391,"byte_end":65398,"line_start":434,"line_end":434,"column_start":11,"column_end":18},"name":"Arrange","qualname":"::operators::arrange::arrangement::Arrange","value":"Arrange<G: Scope, K, V, R: Semigroup>","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":376},{"krate":0,"index":379}],"decl_id":null,"docs":" A type that can be arranged into a trace of type `T`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":65903,"byte_end":65910,"line_start":445,"line_end":445,"column_start":8,"column_end":15},"name":"arrange","qualname":"::operators::arrange::arrangement::Arrange::arrange","value":"fn <Tr> (&self) -> Arranged<G, TraceAgent<Tr>>","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Arranges a stream of `(Key, Val)` updates by `Key`. Accepts an empty instance of the trace type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":66685,"byte_end":66698,"line_start":462,"line_end":462,"column_start":8,"column_end":21},"name":"arrange_named","qualname":"::operators::arrange::arrangement::Arrange::arrange_named","value":"fn <Tr> (&self, name: &str) -> Arranged<G, TraceAgent<Tr>>","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Arranges a stream of `(Key, Val)` updates by `Key`. Accepts an empty instance of the trace type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":67598,"byte_end":67610,"line_start":480,"line_end":480,"column_start":8,"column_end":20},"name":"arrange_core","qualname":"::operators::arrange::arrangement::Arrange::arrange_core","value":"fn <P, Tr> (&self, pact: P, name: &str) -> Arranged<G, TraceAgent<Tr>>","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Arranges a stream of `(Key, Val)` updates by `Key`. Accepts an empty instance of the trace type.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":404},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":78091,"byte_end":78103,"line_start":689,"line_end":689,"column_start":11,"column_end":23},"name":"ArrangeByKey","qualname":"::operators::arrange::arrangement::ArrangeByKey","value":"ArrangeByKey<G: Scope, K: Data + Hashable, V: Data, R: Semigroup>","parent":null,"children":[{"krate":0,"index":409}],"decl_id":null,"docs":" Arranges something as `(Key,Val)` pairs according to a type `T` of trace.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":78531,"byte_end":78545,"line_start":696,"line_end":696,"column_start":8,"column_end":22},"name":"arrange_by_key","qualname":"::operators::arrange::arrangement::ArrangeByKey::arrange_by_key","value":"fn (&self) -> Arranged<G, TraceAgent<DefaultValTrace<K, V, G::Timestamp, R>>>","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" Arranges a collection of `(Key, Val)` records by `Key`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":416},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":79274,"byte_end":79287,"line_start":713,"line_end":713,"column_start":11,"column_end":24},"name":"ArrangeBySelf","qualname":"::operators::arrange::arrangement::ArrangeBySelf","value":"ArrangeBySelf<G: Scope, K: Data + Hashable, R: Semigroup>","parent":null,"children":[{"krate":0,"index":420}],"decl_id":null,"docs":" Arranges something as `(Key, ())` pairs according to a type `T` of trace.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":79707,"byte_end":79722,"line_start":722,"line_end":722,"column_start":8,"column_end":23},"name":"arrange_by_self","qualname":"::operators::arrange::arrangement::ArrangeBySelf::arrange_by_self","value":"fn (&self) -> Arranged<G, TraceAgent<DefaultKeyTrace<K, G::Timestamp, R>>>","parent":{"krate":0,"index":416},"children":[],"decl_id":null,"docs":" Arranges a collection of `Key` records by `Key`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":436},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"reduce","qualname":"::operators::reduce","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","parent":null,"children":[{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":442},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":480},{"krate":0,"index":489},{"krate":0,"index":500},{"krate":0,"index":514},{"krate":0,"index":521},{"krate":0,"index":531},{"krate":0,"index":536},{"krate":0,"index":541},{"krate":0,"index":549},{"krate":0,"index":562},{"krate":0,"index":570},{"krate":0,"index":591},{"krate":0,"index":593},{"krate":0,"index":607}],"decl_id":null,"docs":" Applies a reduction function on records grouped by key.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":467},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":81198,"byte_end":81204,"line_start":29,"line_end":29,"column_start":11,"column_end":17},"name":"Reduce","qualname":"::operators::reduce::Reduce","value":"Reduce<G: Scope, K: Data, V: Data, R: Semigroup>","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":476}],"decl_id":null,"docs":" Extension trait for the `reduce` differential dataflow method.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":82581,"byte_end":82587,"line_start":63,"line_end":63,"column_start":8,"column_end":14},"name":"reduce","qualname":"::operators::reduce::Reduce::reduce","value":"fn <L, V2, R2> (&self, logic: L) -> Collection<G, (K, V2), R2>","parent":{"krate":0,"index":467},"children":[],"decl_id":null,"docs":" Applies a reduction function on records grouped by key.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":82842,"byte_end":82854,"line_start":69,"line_end":69,"column_start":8,"column_end":20},"name":"reduce_named","qualname":"::operators::reduce::Reduce::reduce_named","value":"fn <L, V2, R2> (&self, name: &str, logic: L) -> Collection<G, (K, V2), R2>","parent":{"krate":0,"index":467},"children":[],"decl_id":null,"docs":" As `reduce` with the ability to name the operator.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":500},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":84191,"byte_end":84200,"line_start":103,"line_end":103,"column_start":11,"column_end":20},"name":"Threshold","qualname":"::operators::reduce::Threshold","value":"Threshold<G: Scope, K: Data, R1: Semigroup>","parent":null,"children":[{"krate":0,"index":504},{"krate":0,"index":507},{"krate":0,"index":510},{"krate":0,"index":511}],"decl_id":null,"docs":" Extension trait for the `threshold` and `distinct` differential dataflow methods.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":85117,"byte_end":85126,"line_start":128,"line_end":128,"column_start":8,"column_end":17},"name":"threshold","qualname":"::operators::reduce::Threshold::threshold","value":"fn <R2, F> (&self, thresh: F) -> Collection<G, K, R2>","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Transforms the multiplicity of records.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":85340,"byte_end":85355,"line_start":133,"line_end":133,"column_start":8,"column_end":23},"name":"threshold_named","qualname":"::operators::reduce::Threshold::threshold_named","value":"fn <R2, F> (&self, name: &str, thresh: F) -> Collection<G, K, R2>","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" A `threshold` with the ability to name the operator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":86053,"byte_end":86061,"line_start":155,"line_end":155,"column_start":8,"column_end":16},"name":"distinct","qualname":"::operators::reduce::Threshold::distinct","value":"fn (&self) -> Collection<G, K, isize>","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Reduces the collection to one occurrence of each distinct element.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":86372,"byte_end":86385,"line_start":164,"line_end":164,"column_start":8,"column_end":21},"name":"distinct_core","qualname":"::operators::reduce::Threshold::distinct_core","value":"fn <R2> (&self) -> Collection<G, K, R2>","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Distinct for general integer differences.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":87528,"byte_end":87533,"line_start":191,"line_end":191,"column_start":11,"column_end":16},"name":"Count","qualname":"::operators::reduce::Count","value":"Count<G: Scope, K: Data, R: Semigroup>","parent":null,"children":[{"krate":0,"index":535}],"decl_id":null,"docs":" Extension trait for the `count` differential dataflow method.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":88187,"byte_end":88192,"line_start":212,"line_end":212,"column_start":8,"column_end":13},"name":"count","qualname":"::operators::reduce::Count::count","value":"fn (&self) -> Collection<G, (K, R), isize>","parent":{"krate":0,"index":531},"children":[],"decl_id":null,"docs":" Counts the number of occurrences of each element.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":549},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":89097,"byte_end":89107,"line_start":239,"line_end":239,"column_start":11,"column_end":21},"name":"ReduceCore","qualname":"::operators::reduce::ReduceCore","value":"ReduceCore<G: Scope, K: Data, V: Data, R: Semigroup>","parent":null,"children":[{"krate":0,"index":554},{"krate":0,"index":559}],"decl_id":null,"docs":" Extension trait for the `group_arranged` differential dataflow method.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":90374,"byte_end":90388,"line_start":271,"line_end":271,"column_start":8,"column_end":22},"name":"reduce_abelian","qualname":"::operators::reduce::ReduceCore::reduce_abelian","value":"fn <L, T2> (&self, name: &str, mut logic: L) -> Arranged<G, TraceAgent<T2>>","parent":{"krate":0,"index":549},"children":[],"decl_id":null,"docs":" Applies `group` to arranged data, and returns an arrangement of output data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":91455,"byte_end":91466,"line_start":294,"line_end":294,"column_start":8,"column_end":19},"name":"reduce_core","qualname":"::operators::reduce::ReduceCore::reduce_core","value":"fn <L, T2> (&self, name: &str, logic: L) -> Arranged<G, TraceAgent<T2>>","parent":{"krate":0,"index":549},"children":[],"decl_id":null,"docs":" Solves for output updates when presented with inputs and would-be outputs.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":663},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\consolidate.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"consolidate","qualname":"::operators::consolidate","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\consolidate.rs","parent":null,"children":[{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":675},{"krate":0,"index":683},{"krate":0,"index":686}],"decl_id":null,"docs":" Aggregates the weights of equal records into at most one record.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":671},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\consolidate.rs","byte_start":135863,"byte_end":135874,"line_start":16,"line_end":16,"column_start":11,"column_end":22},"name":"Consolidate","qualname":"::operators::consolidate::Consolidate","value":"Consolidate<D: ExchangeData + Hashable>: Sized","parent":null,"children":[{"krate":0,"index":673},{"krate":0,"index":674}],"decl_id":null,"docs":" An extension method for consolidating weighted streams.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\consolidate.rs","byte_start":136755,"byte_end":136766,"line_start":43,"line_end":43,"column_start":8,"column_end":19},"name":"consolidate","qualname":"::operators::consolidate::Consolidate::consolidate","value":"fn (&self) -> Self","parent":{"krate":0,"index":671},"children":[],"decl_id":null,"docs":" Aggregates the weights of equal records into at most one record.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\consolidate.rs","byte_start":136912,"byte_end":136929,"line_start":48,"line_end":48,"column_start":8,"column_end":25},"name":"consolidate_named","qualname":"::operators::consolidate::Consolidate::consolidate_named","value":"fn (&self, name: &str) -> Self","parent":{"krate":0,"index":671},"children":[],"decl_id":null,"docs":" As `consolidate` but with the ability to name the operator.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":683},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\consolidate.rs","byte_start":137477,"byte_end":137494,"line_start":66,"line_end":66,"column_start":11,"column_end":28},"name":"ConsolidateStream","qualname":"::operators::consolidate::ConsolidateStream","value":"ConsolidateStream<D: ExchangeData + Hashable>","parent":null,"children":[{"krate":0,"index":685}],"decl_id":null,"docs":" An extension method for consolidating weighted streams.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\consolidate.rs","byte_start":138523,"byte_end":138541,"line_start":96,"line_end":96,"column_start":8,"column_end":26},"name":"consolidate_stream","qualname":"::operators::consolidate::ConsolidateStream::consolidate_stream","value":"fn (&self) -> Self","parent":{"krate":0,"index":683},"children":[],"decl_id":null,"docs":" Aggregates the weights of equal records.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":697},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\iterate.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"iterate","qualname":"::operators::iterate","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\iterate.rs","parent":null,"children":[{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":714},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":725},{"krate":0,"index":733},{"krate":0,"index":741},{"krate":0,"index":749},{"krate":0,"index":759},{"krate":0,"index":765},{"krate":0,"index":772},{"krate":0,"index":780}],"decl_id":null,"docs":" Iterative application of a differential dataflow fragment.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":718},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\iterate.rs","byte_start":141855,"byte_end":141862,"line_start":49,"line_end":49,"column_start":11,"column_end":18},"name":"Iterate","qualname":"::operators::iterate::Iterate","value":"Iterate<G: Scope, D: Data, R: Semigroup>","parent":null,"children":[{"krate":0,"index":722}],"decl_id":null,"docs":" An extension trait for the `iterate` method.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\iterate.rs","byte_start":143016,"byte_end":143023,"line_start":79,"line_end":79,"column_start":8,"column_end":15},"name":"iterate","qualname":"::operators::iterate::Iterate::iterate","value":"fn <F> (&self, logic: F) -> Collection<G, D, R>","parent":{"krate":0,"index":718},"children":[],"decl_id":null,"docs":" Iteratively apply `logic` to the source collection until convergence.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":741},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\iterate.rs","byte_start":146585,"byte_end":146593,"line_start":166,"line_end":166,"column_start":12,"column_end":20},"name":"Variable","qualname":"::operators::iterate::Variable","value":"Variable {  }","parent":null,"children":[{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748}],"decl_id":null,"docs":" A recursively defined collection.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":753},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\iterate.rs","byte_start":146968,"byte_end":146971,"line_start":176,"line_end":176,"column_start":12,"column_end":15},"name":"new","qualname":"<Variable<G, D, R>>::new","value":"fn (scope: &mut G, step: <G::Timestamp as Timestamp>::Summary) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new initially empty `Variable`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\iterate.rs","byte_start":147299,"byte_end":147307,"line_start":183,"line_end":183,"column_start":12,"column_end":20},"name":"new_from","qualname":"<Variable<G, D, R>>::new_from","value":"fn (source: Collection<G, D, R>, step: <G::Timestamp as Timestamp>::Summary) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Variable` from a supplied `source` stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\iterate.rs","byte_start":147664,"byte_end":147667,"line_start":190,"line_end":190,"column_start":12,"column_end":15},"name":"set","qualname":"<Variable<G, D, R>>::set","value":"fn (self, result: &Collection<G, D, R>) -> Collection<G, D, R>","parent":null,"children":[],"decl_id":null,"docs":" Adds a new source of data to the `Variable`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":765},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\iterate.rs","byte_start":149488,"byte_end":149505,"line_start":247,"line_end":247,"column_start":12,"column_end":29},"name":"SemigroupVariable","qualname":"::operators::iterate::SemigroupVariable","value":"SemigroupVariable {  }","parent":null,"children":[{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771}],"decl_id":null,"docs":" A recursively defined collection.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\iterate.rs","byte_start":149860,"byte_end":149863,"line_start":256,"line_end":256,"column_start":12,"column_end":15},"name":"new","qualname":"<SemigroupVariable<G, D, R>>::new","value":"fn (scope: &mut G, step: <G::Timestamp as Timestamp>::Summary) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new initially empty `Variable`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":777},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\iterate.rs","byte_start":150176,"byte_end":150179,"line_start":263,"line_end":263,"column_start":12,"column_end":15},"name":"set","qualname":"<SemigroupVariable<G, D, R>>::set","value":"fn (self, result: &Collection<G, D, R>) -> Collection<G, D, R>","parent":null,"children":[],"decl_id":null,"docs":" Adds a new source of data to the `Variable`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":786},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\join.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"join","qualname":"::operators::join","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\join.rs","parent":null,"children":[{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":799},{"krate":0,"index":804},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":812},{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":835},{"krate":0,"index":851},{"krate":0,"index":866},{"krate":0,"index":875},{"krate":0,"index":884},{"krate":0,"index":901},{"krate":0,"index":922},{"krate":0,"index":942},{"krate":0,"index":951}],"decl_id":null,"docs":" Match pairs of records based on a key.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":817},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\join.rs","byte_start":151730,"byte_end":151734,"line_start":28,"line_end":28,"column_start":11,"column_end":15},"name":"Join","qualname":"::operators::join::Join","value":"Join<G: Scope, K: Data, V: Data, R: Semigroup>","parent":null,"children":[{"krate":0,"index":822},{"krate":0,"index":826},{"krate":0,"index":831},{"krate":0,"index":833}],"decl_id":null,"docs":" Join implementations for `(key,val)` data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\join.rs","byte_start":152537,"byte_end":152541,"line_start":53,"line_end":53,"column_start":8,"column_end":12},"name":"join","qualname":"::operators::join::Join::join","value":"fn <V2, R2> (&self, other: &Collection<G, (K, V2), R2>) -> Collection<G, (K, (V, V2)), <R as Mul<R2>>::Output>","parent":{"krate":0,"index":817},"children":[],"decl_id":null,"docs":" Matches pairs `(key,val1)` and `(key,val2)` based on `key` and then applies a function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\join.rs","byte_start":153664,"byte_end":153672,"line_start":87,"line_end":87,"column_start":8,"column_end":16},"name":"join_map","qualname":"::operators::join::Join::join_map","value":"fn <V2, R2, D, L> (&self, other: &Collection<G, (K, V2), R2>, logic: L) -> Collection<G, D, <R as Mul<R2>>::Output>","parent":{"krate":0,"index":817},"children":[],"decl_id":null,"docs":" Matches pairs `(key,val1)` and `(key,val2)` based on `key` and then applies a function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":831},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\join.rs","byte_start":154974,"byte_end":154982,"line_start":117,"line_end":117,"column_start":8,"column_end":16},"name":"semijoin","qualname":"::operators::join::Join::semijoin","value":"fn <R2> (&self, other: &Collection<G, K, R2>) -> Collection<G, (K, V), <R as Mul<R2>>::Output>","parent":{"krate":0,"index":817},"children":[],"decl_id":null,"docs":" Matches pairs `(key, val)` and `key` based on `key`, producing the former with frequencies multiplied.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":833},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\join.rs","byte_start":156337,"byte_end":156345,"line_start":150,"line_end":150,"column_start":8,"column_end":16},"name":"antijoin","qualname":"::operators::join::Join::antijoin","value":"fn <R2> (&self, other: &Collection<G, K, R2>) -> Collection<G, (K, V), R>","parent":{"krate":0,"index":817},"children":[],"decl_id":null,"docs":" Subtracts the semijoin with `other` from `self`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":866},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\join.rs","byte_start":159588,"byte_end":159596,"line_start":217,"line_end":217,"column_start":11,"column_end":19},"name":"JoinCore","qualname":"::operators::join::JoinCore","value":"JoinCore<G: Scope, K: 'static, V: 'static, R: Semigroup>","parent":null,"children":[{"krate":0,"index":871}],"decl_id":null,"docs":" Matches the elements of two arranged traces.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\join.rs","byte_start":161186,"byte_end":161195,"line_start":254,"line_end":254,"column_start":8,"column_end":17},"name":"join_core","qualname":"::operators::join::JoinCore::join_core","value":"fn <Tr2, I, L> (&self, stream2: &Arranged<G, Tr2>, result: L) -> Collection<G, I::Item, <R as Mul<Tr2::R>>::Output>","parent":{"krate":0,"index":866},"children":[],"decl_id":null,"docs":" Joins two arranged collections with the same key type.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":963},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\count.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"count","qualname":"::operators::count","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\count.rs","parent":null,"children":[{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":966},{"krate":0,"index":967},{"krate":0,"index":968},{"krate":0,"index":969},{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":978},{"krate":0,"index":982},{"krate":0,"index":987},{"krate":0,"index":992}],"decl_id":null,"docs":" Group records by a key, and apply a reduction function.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":982},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\count.rs","byte_start":181458,"byte_end":181468,"line_start":30,"line_end":30,"column_start":11,"column_end":21},"name":"CountTotal","qualname":"::operators::count::CountTotal","value":"CountTotal<G: Scope, K: ExchangeData, R: Semigroup>","parent":null,"children":[{"krate":0,"index":986}],"decl_id":null,"docs":" Extension trait for the `count` differential dataflow method.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\count.rs","byte_start":182152,"byte_end":182163,"line_start":51,"line_end":51,"column_start":8,"column_end":19},"name":"count_total","qualname":"::operators::count::CountTotal::count_total","value":"fn (&self) -> Collection<G, (K, R), isize>","parent":{"krate":0,"index":982},"children":[],"decl_id":null,"docs":" Counts the number of occurrences of each element.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1003},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\threshold.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"threshold","qualname":"::operators::threshold","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\threshold.rs","parent":null,"children":[{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1006},{"krate":0,"index":1007},{"krate":0,"index":1008},{"krate":0,"index":1009},{"krate":0,"index":1012},{"krate":0,"index":1015},{"krate":0,"index":1016},{"krate":0,"index":1017},{"krate":0,"index":1020},{"krate":0,"index":1024},{"krate":0,"index":1039},{"krate":0,"index":1046}],"decl_id":null,"docs":" Reduce the collection to one occurrence of each distinct element.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1024},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\threshold.rs","byte_start":186284,"byte_end":186298,"line_start":20,"line_end":20,"column_start":11,"column_end":25},"name":"ThresholdTotal","qualname":"::operators::threshold::ThresholdTotal","value":"ThresholdTotal<G: Scope, K: ExchangeData, R: ExchangeData + Semigroup>","parent":null,"children":[{"krate":0,"index":1028},{"krate":0,"index":1031},{"krate":0,"index":1035},{"krate":0,"index":1036}],"decl_id":null,"docs":" Extension trait for the `distinct` differential dataflow method.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\threshold.rs","byte_start":186480,"byte_end":186499,"line_start":22,"line_end":22,"column_start":8,"column_end":27},"name":"threshold_semigroup","qualname":"::operators::threshold::ThresholdTotal::threshold_semigroup","value":"fn <R2, F> (&self, thresh: F) -> Collection<G, K, R2>","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" Reduces the collection to one occurrence of each distinct element.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1031},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\threshold.rs","byte_start":187281,"byte_end":187296,"line_start":47,"line_end":47,"column_start":8,"column_end":23},"name":"threshold_total","qualname":"::operators::threshold::ThresholdTotal::threshold_total","value":"fn <R2, F> (&self, mut thresh: F) -> Collection<G, K, R2>","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" Reduces the collection to one occurrence of each distinct element.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1035},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\threshold.rs","byte_start":188501,"byte_end":188515,"line_start":78,"line_end":78,"column_start":8,"column_end":22},"name":"distinct_total","qualname":"::operators::threshold::ThresholdTotal::distinct_total","value":"fn (&self) -> Collection<G, K, isize>","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" Reduces the collection to one occurrence of each distinct element.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1036},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\threshold.rs","byte_start":188832,"byte_end":188851,"line_start":87,"line_end":87,"column_start":8,"column_end":27},"name":"distinct_total_core","qualname":"::operators::threshold::ThresholdTotal::distinct_total_core","value":"fn <R2> (&self) -> Collection<G, K, R2>","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":" Distinct for general integer differences.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1138},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"algorithms","qualname":"::algorithms","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\mod.rs","parent":null,"children":[{"krate":0,"index":1139},{"krate":0,"index":1165},{"krate":0,"index":1215}],"decl_id":null,"docs":" Common algorithms constructed from differential dataflow operators.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1139},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\identifiers.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"identifiers","qualname":"::algorithms::identifiers","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\identifiers.rs","parent":null,"children":[{"krate":0,"index":1140},{"krate":0,"index":1141},{"krate":0,"index":1145},{"krate":0,"index":1146},{"krate":0,"index":1147},{"krate":0,"index":1148},{"krate":0,"index":1153}],"decl_id":null,"docs":" Assign unique identifiers to records.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1148},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\identifiers.rs","byte_start":193807,"byte_end":193818,"line_start":11,"line_end":11,"column_start":11,"column_end":22},"name":"Identifiers","qualname":"::algorithms::identifiers::Identifiers","value":"Identifiers<G: Scope, D: ExchangeData, R: ExchangeData + Abelian>","parent":null,"children":[{"krate":0,"index":1152}],"decl_id":null,"docs":" Assign unique identifiers to elements of a collection.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1152},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\identifiers.rs","byte_start":194678,"byte_end":194689,"line_start":36,"line_end":36,"column_start":8,"column_end":19},"name":"identifiers","qualname":"::algorithms::identifiers::Identifiers::identifiers","value":"fn (&self) -> Collection<G, (D, u64), R>","parent":{"krate":0,"index":1148},"children":[],"decl_id":null,"docs":" Assign unique identifiers to elements of a collection.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1165},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\prefix_sum.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prefix_sum","qualname":"::algorithms::prefix_sum","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\prefix_sum.rs","parent":null,"children":[{"krate":0,"index":1166},{"krate":0,"index":1167},{"krate":0,"index":1170},{"krate":0,"index":1171},{"krate":0,"index":1172},{"krate":0,"index":1180},{"krate":0,"index":1191},{"krate":0,"index":1201}],"decl_id":null,"docs":" Implementation of Parallel Prefix Sum\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1172},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\prefix_sum.rs","byte_start":199480,"byte_end":199489,"line_start":10,"line_end":10,"column_start":11,"column_end":20},"name":"PrefixSum","qualname":"::algorithms::prefix_sum::PrefixSum","value":"PrefixSum<G: Scope, K, D>","parent":null,"children":[{"krate":0,"index":1176},{"krate":0,"index":1178}],"decl_id":null,"docs":" Extension trait for the prefix_sum method.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1176},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\prefix_sum.rs","byte_start":199857,"byte_end":199867,"line_start":16,"line_end":16,"column_start":8,"column_end":18},"name":"prefix_sum","qualname":"::algorithms::prefix_sum::PrefixSum::prefix_sum","value":"fn <F> (&self, zero: D, combine: F) -> Self","parent":{"krate":0,"index":1172},"children":[],"decl_id":null,"docs":" Computes the prefix sum for each element in the collection.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1178},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\prefix_sum.rs","byte_start":200015,"byte_end":200028,"line_start":19,"line_end":19,"column_start":8,"column_end":21},"name":"prefix_sum_at","qualname":"::algorithms::prefix_sum::PrefixSum::prefix_sum_at","value":"fn <F> (&self, locations: Collection<G, (usize, K)>, zero: D, combine: F) -> Self","parent":{"krate":0,"index":1172},"children":[],"decl_id":null,"docs":" Determine the prefix sum at each element of `location`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1191},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\prefix_sum.rs","byte_start":201021,"byte_end":201030,"line_start":46,"line_end":46,"column_start":8,"column_end":17},"name":"aggregate","qualname":"::algorithms::prefix_sum::aggregate","value":"fn <G, K, D, F> (collection: Collection<G, ((usize, K), D)>, combine: F) -> Collection<G, ((usize, usize, K), D)>","parent":null,"children":[],"decl_id":null,"docs":" Accumulate data in `collection` into all powers-of-two intervals containing them.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1201},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\prefix_sum.rs","byte_start":202527,"byte_end":202536,"line_start":78,"line_end":78,"column_start":8,"column_end":17},"name":"broadcast","qualname":"::algorithms::prefix_sum::broadcast","value":"fn <G, K, D, F> (ranges: Collection<G, ((usize, usize, K), D)>, queries: Collection<G, (usize, K)>, zero: D, combine: F) -> Collection<G, ((usize, K), D)>","parent":null,"children":[],"decl_id":null,"docs":" Produces the accumulated values at each of the `usize` locations in `queries`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1215},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"graphs","qualname":"::algorithms::graphs","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\mod.rs","parent":null,"children":[{"krate":0,"index":1216},{"krate":0,"index":1250},{"krate":0,"index":1285},{"krate":0,"index":1334},{"krate":0,"index":1356}],"decl_id":null,"docs":" Methods for graph processing.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1216},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\scc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"scc","qualname":"::algorithms::graphs::scc","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\scc.rs","parent":null,"children":[{"krate":0,"index":1217},{"krate":0,"index":1218},{"krate":0,"index":1219},{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1224},{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1228},{"krate":0,"index":1235},{"krate":0,"index":1241}],"decl_id":null,"docs":" Strongly connected component structure.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1228},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\scc.rs","byte_start":206337,"byte_end":206341,"line_start":17,"line_end":17,"column_start":8,"column_end":12},"name":"trim","qualname":"::algorithms::graphs::scc::trim","value":"fn <G, N, R> (graph: &Collection<G, (N, N), R>) -> Collection<G, (N, N), R>","parent":null,"children":[],"decl_id":null,"docs":" Iteratively removes nodes with no in-edges.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1235},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\scc.rs","byte_start":206955,"byte_end":206973,"line_start":38,"line_end":38,"column_start":8,"column_end":26},"name":"strongly_connected","qualname":"::algorithms::graphs::scc::strongly_connected","value":"fn <G, N, R> (graph: &Collection<G, (N, N), R>) -> Collection<G, (N, N), R>","parent":null,"children":[],"decl_id":null,"docs":" Returns the subset of edges in the same strongly connected component.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1250},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\sequential.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sequential","qualname":"::algorithms::graphs::sequential","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\sequential.rs","parent":null,"children":[{"krate":0,"index":1251},{"krate":0,"index":1252},{"krate":0,"index":1253},{"krate":0,"index":1256},{"krate":0,"index":1257},{"krate":0,"index":1258},{"krate":0,"index":1259},{"krate":0,"index":1266}],"decl_id":null,"docs":" Sequential (non-concurrent) graph algorithms.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1266},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\sequential.rs","byte_start":209526,"byte_end":209534,"line_start":44,"line_end":44,"column_start":8,"column_end":16},"name":"sequence","qualname":"::algorithms::graphs::sequential::sequence","value":"fn <G, N, V, F> (state: &Collection<G, (N, V)>, edges: &Collection<G, (N, N)>, logic: F) -> Collection<G, (N, Option<V>)>","parent":null,"children":[],"decl_id":null,"docs":" Applies `logic` to nodes sequentially, in order of node identifiers.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1285},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\bijkstra.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bijkstra","qualname":"::algorithms::graphs::bijkstra","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\bijkstra.rs","parent":null,"children":[{"krate":0,"index":1286},{"krate":0,"index":1287},{"krate":0,"index":1288},{"krate":0,"index":1289},{"krate":0,"index":1292},{"krate":0,"index":1293},{"krate":0,"index":1294},{"krate":0,"index":1295},{"krate":0,"index":1300},{"krate":0,"index":1301},{"krate":0,"index":1302}],"decl_id":null,"docs":" Bi-directional Dijkstra distance labeling.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1295},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\bijkstra.rs","byte_start":212499,"byte_end":212509,"line_start":23,"line_end":23,"column_start":8,"column_end":18},"name":"bidijkstra","qualname":"::algorithms::graphs::bijkstra::bidijkstra","value":"fn <G, N> (edges: &Collection<G, (N, N)>, goals: &Collection<G, (N, N)>) -> Collection<G, ((N, N), u32)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the subset of `goals` that can reach each other in `edges`, with distance.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1302},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\bijkstra.rs","byte_start":213066,"byte_end":213085,"line_start":39,"line_end":39,"column_start":8,"column_end":27},"name":"bidijkstra_arranged","qualname":"::algorithms::graphs::bijkstra::bidijkstra_arranged","value":"fn <G, N, Tr> (forward: &Arranged<G, Tr>, reverse: &Arranged<G, Tr>, goals: &Collection<G, (N, N)>) -> Collection<G, ((N, N), u32)>","parent":null,"children":[],"decl_id":null,"docs":" Bi-directional Dijkstra search using arranged forward and reverse edge collections.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1334},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\bfs.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bfs","qualname":"::algorithms::graphs::bfs","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\bfs.rs","parent":null,"children":[{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1340},{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1346},{"krate":0,"index":1347},{"krate":0,"index":1348}],"decl_id":null,"docs":" Breadth-first distance labeling.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1342},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\bfs.rs","byte_start":217029,"byte_end":217032,"line_start":12,"line_end":12,"column_start":8,"column_end":11},"name":"bfs","qualname":"::algorithms::graphs::bfs::bfs","value":"fn <G, N> (edges: &Collection<G, (N, N)>, roots: &Collection<G, N>) -> Collection<G, (N, u32)>","parent":null,"children":[],"decl_id":null,"docs":" Returns pairs (node, dist) indicating distance of each node from a root.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1348},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\bfs.rs","byte_start":217487,"byte_end":217499,"line_start":27,"line_end":27,"column_start":8,"column_end":20},"name":"bfs_arranged","qualname":"::algorithms::graphs::bfs::bfs_arranged","value":"fn <G, N, Tr> (edges: &Arranged<G, Tr>, roots: &Collection<G, N>) -> Collection<G, (N, u32)>","parent":null,"children":[],"decl_id":null,"docs":" Returns pairs (node, dist) indicating distance of each node from a root.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1356},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\propagate.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"propagate","qualname":"::algorithms::graphs::propagate","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\propagate.rs","parent":null,"children":[{"krate":0,"index":1357},{"krate":0,"index":1358},{"krate":0,"index":1359},{"krate":0,"index":1360},{"krate":0,"index":1363},{"krate":0,"index":1364},{"krate":0,"index":1365},{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1373},{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1381}],"decl_id":null,"docs":" Directed label reachability.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1367},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\propagate.rs","byte_start":218941,"byte_end":218950,"line_start":19,"line_end":19,"column_start":8,"column_end":17},"name":"propagate","qualname":"::algorithms::graphs::propagate::propagate","value":"fn <G, N, L, R> (edges: &Collection<G, (N, N), R>, nodes: &Collection<G, (N, L), R>) -> Collection<G, (N, L), R>","parent":null,"children":[],"decl_id":null,"docs":" Propagates labels forward, retaining the minimum label.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1373},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\propagate.rs","byte_start":219600,"byte_end":219612,"line_start":37,"line_end":37,"column_start":8,"column_end":20},"name":"propagate_at","qualname":"::algorithms::graphs::propagate::propagate_at","value":"fn <G, N, L, F, R> (edges: &Collection<G, (N, N), R>, nodes: &Collection<G, (N, L), R>, logic: F) -> Collection<G, (N, L), R>","parent":null,"children":[],"decl_id":null,"docs":" Propagates labels forward, retaining the minimum label.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1381},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\propagate.rs","byte_start":220373,"byte_end":220387,"line_start":59,"line_end":59,"column_start":8,"column_end":22},"name":"propagate_core","qualname":"::algorithms::graphs::propagate::propagate_core","value":"fn <G, N, L, Tr, F, R> (edges: &Arranged<G, Tr>, nodes: &Collection<G, (N, L), R>, logic: F) -> Collection<G, (N, L), R>","parent":null,"children":[],"decl_id":null,"docs":" Propagates labels forward, retaining the minimum label.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1397},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lattice.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"lattice","qualname":"::lattice","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lattice.rs","parent":null,"children":[{"krate":0,"index":1398},{"krate":0,"index":1399},{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1413},{"krate":0,"index":1414},{"krate":0,"index":3747},{"krate":0,"index":3751},{"krate":0,"index":3755},{"krate":0,"index":3759},{"krate":0,"index":3763},{"krate":0,"index":3767},{"krate":0,"index":3771},{"krate":0,"index":3775},{"krate":0,"index":3779}],"decl_id":null,"docs":" Partially ordered elements with a least upper bound.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1399},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lattice.rs","byte_start":223348,"byte_end":223355,"line_start":10,"line_end":10,"column_start":11,"column_end":18},"name":"Lattice","qualname":"::lattice::Lattice","value":"Lattice: PartialOrder","parent":null,"children":[{"krate":0,"index":1400},{"krate":0,"index":1401},{"krate":0,"index":1402},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405}],"decl_id":null,"docs":" A bounded partially ordered type supporting joins and meets.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1400},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lattice.rs","byte_start":223636,"byte_end":223643,"line_start":22,"line_end":22,"column_start":8,"column_end":15},"name":"minimum","qualname":"::lattice::Lattice::minimum","value":"fn () -> Self","parent":{"krate":0,"index":1399},"children":[],"decl_id":null,"docs":" The smallest element of the type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1401},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lattice.rs","byte_start":224213,"byte_end":224217,"line_start":43,"line_end":43,"column_start":8,"column_end":12},"name":"join","qualname":"::lattice::Lattice::join","value":"fn (&self, &Self) -> Self","parent":{"krate":0,"index":1399},"children":[],"decl_id":null,"docs":" The smallest element greater than or equal to both arguments.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1402},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lattice.rs","byte_start":224818,"byte_end":224829,"line_start":64,"line_end":64,"column_start":8,"column_end":19},"name":"join_assign","qualname":"::lattice::Lattice::join_assign","value":"fn (&mut self, other: &Self) -> ()","parent":{"krate":0,"index":1399},"children":[],"decl_id":null,"docs":" Updates `self` to the smallest element greater than or equal to both arguments.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1403},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lattice.rs","byte_start":225469,"byte_end":225473,"line_start":87,"line_end":87,"column_start":8,"column_end":12},"name":"meet","qualname":"::lattice::Lattice::meet","value":"fn (&self, &Self) -> Self","parent":{"krate":0,"index":1399},"children":[],"decl_id":null,"docs":" The largest element less than or equal to both arguments.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lattice.rs","byte_start":226070,"byte_end":226081,"line_start":108,"line_end":108,"column_start":8,"column_end":19},"name":"meet_assign","qualname":"::lattice::Lattice::meet_assign","value":"fn (&mut self, other: &Self) -> ()","parent":{"krate":0,"index":1399},"children":[],"decl_id":null,"docs":" Updates `self` to the largest element less than or equal to both arguments.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1405},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lattice.rs","byte_start":227820,"byte_end":227830,"line_start":152,"line_end":152,"column_start":8,"column_end":18},"name":"advance_by","qualname":"::lattice::Lattice::advance_by","value":"fn (&mut self, frontier: &[Self]) -> ()","parent":{"krate":0,"index":1399},"children":[],"decl_id":null,"docs":" Advances self to the largest time indistinguishable under `frontier`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lattice.rs","byte_start":227803,"byte_end":227812,"line_start":151,"line_end":151,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":1415},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"trace","qualname":"::trace","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","parent":null,"children":[{"krate":0,"index":1416},{"krate":0,"index":1522},{"krate":0,"index":1531},{"krate":0,"index":1977},{"krate":0,"index":2149},{"krate":0,"index":3007},{"krate":0,"index":3008},{"krate":0,"index":3009},{"krate":0,"index":3010},{"krate":0,"index":3011},{"krate":0,"index":3030},{"krate":0,"index":3035},{"krate":0,"index":3047},{"krate":0,"index":3057},{"krate":0,"index":3067},{"krate":0,"index":3079},{"krate":0,"index":3088},{"krate":0,"index":3203}],"decl_id":null,"docs":" Traits and datastructures representing a collection trace.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1416},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cursor","qualname":"::trace::cursor","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\mod.rs","parent":null,"children":[{"krate":0,"index":1417},{"krate":0,"index":1451},{"krate":0,"index":1484},{"krate":0,"index":1485},{"krate":0,"index":1509},{"krate":0,"index":1516}],"decl_id":null,"docs":" Traits and types for navigating order sequences of update tuples.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1417},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\cursor_pair.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cursor_pair","qualname":"::trace::cursor::cursor_pair","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\cursor_pair.rs","parent":null,"children":[{"krate":0,"index":1418},{"krate":0,"index":1419},{"krate":0,"index":1420},{"krate":0,"index":1427}],"decl_id":null,"docs":" A generic cursor implementation merging pairs of different cursors.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1420},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\cursor_pair.rs","byte_start":256773,"byte_end":256783,"line_start":11,"line_end":11,"column_start":12,"column_end":22},"name":"CursorPair","qualname":"::trace::cursor::cursor_pair::CursorPair","value":"CursorPair {  }","parent":null,"children":[{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1425},{"krate":0,"index":1426}],"decl_id":null,"docs":" A cursor over the combined updates of two different cursors.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1451},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\cursor_list.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cursor_list","qualname":"::trace::cursor::cursor_list","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\cursor_list.rs","parent":null,"children":[{"krate":0,"index":1452},{"krate":0,"index":3783},{"krate":0,"index":3793},{"krate":0,"index":1453},{"krate":0,"index":1462}],"decl_id":null,"docs":" A generic cursor implementation merging multiple cursors.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3783},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\cursor_list.rs","byte_start":262466,"byte_end":262476,"line_start":10,"line_end":10,"column_start":12,"column_end":22},"name":"CursorList","qualname":"::trace::cursor::cursor_list::CursorList","value":"CursorList {  }","parent":null,"children":[{"krate":0,"index":3789},{"krate":0,"index":3790},{"krate":0,"index":3791},{"krate":0,"index":3792}],"decl_id":null,"docs":" Provides a cursor interface over a list of cursors.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1459},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\cursor_list.rs","byte_start":262805,"byte_end":262808,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"new","qualname":"<CursorList<K, V, T, R, C>>::new","value":"fn (cursors: Vec<C>, storage: &[C::Storage]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new cursor list from pre-existing cursors.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1485},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\mod.rs","byte_start":253748,"byte_end":253754,"line_start":15,"line_end":15,"column_start":11,"column_end":17},"name":"Cursor","qualname":"::trace::cursor::Cursor","value":"Cursor<K, V, T, R>","parent":null,"children":[{"krate":0,"index":1490},{"krate":0,"index":1491},{"krate":0,"index":1492},{"krate":0,"index":1493},{"krate":0,"index":1495},{"krate":0,"index":1497},{"krate":0,"index":1499},{"krate":0,"index":1501},{"krate":0,"index":1503},{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1506},{"krate":0,"index":1507},{"krate":0,"index":1508}],"decl_id":null,"docs":" A cursor for navigating ordered `(key, val, time, diff)` updates.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1490},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\mod.rs","byte_start":253816,"byte_end":253823,"line_start":18,"line_end":18,"column_start":7,"column_end":14},"name":"Storage","qualname":"::trace::cursor::Cursor::Storage","value":"type Storage;","parent":{"krate":0,"index":1485},"children":[],"decl_id":null,"docs":" Type the cursor addresses data in.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1491},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\mod.rs","byte_start":253953,"byte_end":253962,"line_start":23,"line_end":23,"column_start":5,"column_end":14},"name":"key_valid","qualname":"::trace::cursor::Cursor::key_valid","value":"fn (&self, storage: &Self::Storage) -> bool","parent":{"krate":0,"index":1485},"children":[],"decl_id":null,"docs":" Indicates if the current key is valid.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1492},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\mod.rs","byte_start":254148,"byte_end":254157,"line_start":27,"line_end":27,"column_start":5,"column_end":14},"name":"val_valid","qualname":"::trace::cursor::Cursor::val_valid","value":"fn (&self, storage: &Self::Storage) -> bool","parent":{"krate":0,"index":1485},"children":[],"decl_id":null,"docs":" Indicates if the current value is valid.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1493},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\mod.rs","byte_start":254261,"byte_end":254264,"line_start":30,"line_end":30,"column_start":5,"column_end":8},"name":"key","qualname":"::trace::cursor::Cursor::key","value":"fn <'a> (&self, storage: &'a Self::Storage) -> &'a K","parent":{"krate":0,"index":1485},"children":[],"decl_id":null,"docs":" A reference to the current key. Asserts if invalid.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1495},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\mod.rs","byte_start":254377,"byte_end":254380,"line_start":32,"line_end":32,"column_start":5,"column_end":8},"name":"val","qualname":"::trace::cursor::Cursor::val","value":"fn <'a> (&self, storage: &'a Self::Storage) -> &'a V","parent":{"krate":0,"index":1485},"children":[],"decl_id":null,"docs":" A reference to the current value. Asserts if invalid.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1497},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\mod.rs","byte_start":254490,"byte_end":254497,"line_start":35,"line_end":35,"column_start":5,"column_end":12},"name":"get_key","qualname":"::trace::cursor::Cursor::get_key","value":"fn <'a> (&self, storage: &'a Self::Storage) -> Option<&'a K>","parent":{"krate":0,"index":1485},"children":[],"decl_id":null,"docs":" Returns a reference to the current key, if valid.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1499},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\mod.rs","byte_start":254691,"byte_end":254698,"line_start":39,"line_end":39,"column_start":5,"column_end":12},"name":"get_val","qualname":"::trace::cursor::Cursor::get_val","value":"fn <'a> (&self, storage: &'a Self::Storage) -> Option<&'a V>","parent":{"krate":0,"index":1485},"children":[],"decl_id":null,"docs":" Returns a reference to the current value, if valid.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1501},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\mod.rs","byte_start":254945,"byte_end":254954,"line_start":45,"line_end":45,"column_start":5,"column_end":14},"name":"map_times","qualname":"::trace::cursor::Cursor::map_times","value":"fn <L> (&mut self, storage: &Self::Storage, logic: L) -> ()","parent":{"krate":0,"index":1485},"children":[],"decl_id":null,"docs":" Applies `logic` to each pair of time and difference. Intended for mutation of the\n closure's scope.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1503},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\mod.rs","byte_start":255067,"byte_end":255075,"line_start":48,"line_end":48,"column_start":5,"column_end":13},"name":"step_key","qualname":"::trace::cursor::Cursor::step_key","value":"fn (&mut self, storage: &Self::Storage) -> ()","parent":{"krate":0,"index":1485},"children":[],"decl_id":null,"docs":" Advances the cursor to the next key.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1504},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\mod.rs","byte_start":255164,"byte_end":255172,"line_start":50,"line_end":50,"column_start":5,"column_end":13},"name":"seek_key","qualname":"::trace::cursor::Cursor::seek_key","value":"fn (&mut self, storage: &Self::Storage, key: &K) -> ()","parent":{"krate":0,"index":1485},"children":[],"decl_id":null,"docs":" Advances the cursor to the specified key.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1505},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\mod.rs","byte_start":255268,"byte_end":255276,"line_start":53,"line_end":53,"column_start":5,"column_end":13},"name":"step_val","qualname":"::trace::cursor::Cursor::step_val","value":"fn (&mut self, storage: &Self::Storage) -> ()","parent":{"krate":0,"index":1485},"children":[],"decl_id":null,"docs":" Advances the cursor to the next value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1506},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\mod.rs","byte_start":255367,"byte_end":255375,"line_start":55,"line_end":55,"column_start":5,"column_end":13},"name":"seek_val","qualname":"::trace::cursor::Cursor::seek_val","value":"fn (&mut self, storage: &Self::Storage, val: &V) -> ()","parent":{"krate":0,"index":1485},"children":[],"decl_id":null,"docs":" Advances the cursor to the specified value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1507},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\mod.rs","byte_start":255469,"byte_end":255480,"line_start":58,"line_end":58,"column_start":5,"column_end":16},"name":"rewind_keys","qualname":"::trace::cursor::Cursor::rewind_keys","value":"fn (&mut self, storage: &Self::Storage) -> ()","parent":{"krate":0,"index":1485},"children":[],"decl_id":null,"docs":" Rewinds the cursor to the first key.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1508},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\mod.rs","byte_start":255582,"byte_end":255593,"line_start":60,"line_end":60,"column_start":5,"column_end":16},"name":"rewind_vals","qualname":"::trace::cursor::Cursor::rewind_vals","value":"fn (&mut self, storage: &Self::Storage) -> ()","parent":{"krate":0,"index":1485},"children":[],"decl_id":null,"docs":" Rewinds the cursor to the first value for current key.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1509},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\mod.rs","byte_start":255692,"byte_end":255703,"line_start":64,"line_end":64,"column_start":11,"column_end":22},"name":"CursorDebug","qualname":"::trace::cursor::CursorDebug","value":"CursorDebug<K: Clone, V: Clone, T: Clone, R: Clone>: Cursor<K, V, T, R>","parent":null,"children":[{"krate":0,"index":1514}],"decl_id":null,"docs":" Debugging and testing utilities for Cursor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1514},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\mod.rs","byte_start":255829,"byte_end":255835,"line_start":66,"line_end":66,"column_start":5,"column_end":11},"name":"to_vec","qualname":"::trace::cursor::CursorDebug::to_vec","value":"fn (&mut self, storage: &Self::Storage) -> Vec<((K, V), Vec<(T, R)>)>","parent":{"krate":0,"index":1509},"children":[],"decl_id":null,"docs":" Rewinds the cursor and outputs its contents to a Vec\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1522},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\description.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"description","qualname":"::trace::description","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\description.rs","parent":null,"children":[{"krate":0,"index":3800},{"krate":0,"index":3818},{"krate":0,"index":3815},{"krate":0,"index":3805},{"krate":0,"index":1523},{"krate":0,"index":1526}],"decl_id":null,"docs":" Descriptions of intervals of partially ordered times.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3800},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\description.rs","byte_start":271550,"byte_end":271561,"line_start":66,"line_end":66,"column_start":12,"column_end":23},"name":"Description","qualname":"::trace::description::Description","value":"Description {  }","parent":null,"children":[{"krate":0,"index":3802},{"krate":0,"index":3803},{"krate":0,"index":3804}],"decl_id":null,"docs":" Describes an interval of partially ordered times.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1525},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\description.rs","byte_start":271859,"byte_end":271862,"line_start":77,"line_end":77,"column_start":9,"column_end":12},"name":"new","qualname":"<Description<Time>>::new","value":"fn (lower: &[Time], upper: &[Time], since: &[Time]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new description from its component parts.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1528},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\description.rs","byte_start":272237,"byte_end":272242,"line_start":90,"line_end":90,"column_start":9,"column_end":14},"name":"lower","qualname":"<Description<Time>>::lower","value":"fn (&self) -> &[Time]","parent":null,"children":[],"decl_id":null,"docs":" The lower envelope for times in the interval.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1529},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\description.rs","byte_start":272340,"byte_end":272345,"line_start":92,"line_end":92,"column_start":9,"column_end":14},"name":"upper","qualname":"<Description<Time>>::upper","value":"fn (&self) -> &[Time]","parent":null,"children":[],"decl_id":null,"docs":" The upper envelope for times in the interval.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1530},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\description.rs","byte_start":272451,"byte_end":272456,"line_start":94,"line_end":94,"column_start":9,"column_end":14},"name":"since","qualname":"<Description<Time>>::since","value":"fn (&self) -> &[Time]","parent":null,"children":[],"decl_id":null,"docs":" Times from whose future the interval may be observed.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1531},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"implementations","qualname":"::trace::implementations","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\mod.rs","parent":null,"children":[{"krate":0,"index":1532},{"krate":0,"index":1677},{"krate":0,"index":1678},{"krate":0,"index":1753},{"krate":0,"index":1754}],"decl_id":null,"docs":" Implementations of `Trace` and associated traits.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1532},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\spine_fueled_neu.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"spine_fueled_neu","qualname":"::trace::implementations::spine_fueled_neu","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\spine_fueled_neu.rs","parent":null,"children":[{"krate":0,"index":1533},{"krate":0,"index":1534},{"krate":0,"index":1535},{"krate":0,"index":1536},{"krate":0,"index":1537},{"krate":0,"index":1542},{"krate":0,"index":1545},{"krate":0,"index":1546},{"krate":0,"index":1547},{"krate":0,"index":1563},{"krate":0,"index":1586},{"krate":0,"index":1599},{"krate":0,"index":1624},{"krate":0,"index":1638},{"krate":0,"index":1654},{"krate":0,"index":1669}],"decl_id":null,"docs":" An append-only collection of update batches.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1547},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\spine_fueled_neu.rs","byte_start":280250,"byte_end":280255,"line_start":89,"line_end":89,"column_start":12,"column_end":17},"name":"Spine","qualname":"::trace::implementations::spine_fueled_neu::Spine","value":"Spine {  }","parent":null,"children":[{"krate":0,"index":1553},{"krate":0,"index":1554},{"krate":0,"index":1555},{"krate":0,"index":1556},{"krate":0,"index":1557},{"krate":0,"index":1558},{"krate":0,"index":1559},{"krate":0,"index":1560},{"krate":0,"index":1561},{"krate":0,"index":1562}],"decl_id":null,"docs":" An append-only collection of update tuples.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1608},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\spine_fueled_neu.rs","byte_start":290945,"byte_end":290956,"line_start":352,"line_end":352,"column_start":12,"column_end":23},"name":"with_effort","qualname":"<Spine<K, V, T, R, B>>::with_effort","value":"fn (mut effort: usize, operator: OperatorInfo, logger: Option<::logging::Logger>, activator: Option<timely::scheduling::activate::Activator>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a fueled `Spine` with a specified effort multiplier.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1613},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\spine_fueled_neu.rs","byte_start":294065,"byte_end":294080,"line_start":425,"line_end":425,"column_start":12,"column_end":27},"name":"introduce_batch","qualname":"<Spine<K, V, T, R, B>>::introduce_batch","value":"fn (&mut self, batch: Option<B>, batch_index: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Introduces a batch at an indicated level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1616},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\spine_fueled_neu.rs","byte_start":300167,"byte_end":300177,"line_start":544,"line_end":544,"column_start":12,"column_end":22},"name":"apply_fuel","qualname":"<Spine<K, V, T, R, B>>::apply_fuel","value":"fn (&mut self, fuel: &mut isize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Applies an amount of fuel to merges in progress.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1686},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\merge_batcher.rs","byte_start":313513,"byte_end":313525,"line_start":11,"line_end":11,"column_start":12,"column_end":24},"name":"MergeBatcher","qualname":"::trace::implementations::merge_batcher::MergeBatcher","value":"MergeBatcher {  }","parent":null,"children":[{"krate":0,"index":1692},{"krate":0,"index":1693},{"krate":0,"index":1694},{"krate":0,"index":1695}],"decl_id":null,"docs":" Creates batches from unordered tuples.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1754},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ord","qualname":"::trace::implementations::ord","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","parent":null,"children":[{"krate":0,"index":1755},{"krate":0,"index":1756},{"krate":0,"index":1759},{"krate":0,"index":1760},{"krate":0,"index":1761},{"krate":0,"index":1762},{"krate":0,"index":1763},{"krate":0,"index":1766},{"krate":0,"index":1767},{"krate":0,"index":1768},{"krate":0,"index":1773},{"krate":0,"index":1776},{"krate":0,"index":1782},{"krate":0,"index":1783},{"krate":0,"index":1784},{"krate":0,"index":1785},{"krate":0,"index":1786},{"krate":0,"index":1787},{"krate":0,"index":1793},{"krate":0,"index":1799},{"krate":0,"index":1804},{"krate":0,"index":3823},{"krate":0,"index":3845},{"krate":0,"index":3831},{"krate":0,"index":1809},{"krate":0,"index":1819},{"krate":0,"index":1829},{"krate":0,"index":1836},{"krate":0,"index":1848},{"krate":0,"index":3852},{"krate":0,"index":3858},{"krate":0,"index":1859},{"krate":0,"index":1880},{"krate":0,"index":1887},{"krate":0,"index":3864},{"krate":0,"index":3884},{"krate":0,"index":3871},{"krate":0,"index":1897},{"krate":0,"index":1906},{"krate":0,"index":1915},{"krate":0,"index":1921},{"krate":0,"index":1932},{"krate":0,"index":3890},{"krate":0,"index":3898},{"krate":0,"index":1942},{"krate":0,"index":1962},{"krate":0,"index":1968}],"decl_id":null,"docs":" Trace and batch implementations based on sorted ranges.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1787},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":326736,"byte_end":326747,"line_start":36,"line_end":36,"column_start":10,"column_end":21},"name":"OrdValSpine","qualname":"::trace::implementations::ord::OrdValSpine","value":"Spine<K, V, T, R, Rc<OrdValBatch<K, V, T, R, O>>>","parent":null,"children":[],"decl_id":null,"docs":" A trace implementation using a spine of ordered lists.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1793},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":326902,"byte_end":326917,"line_start":39,"line_end":39,"column_start":10,"column_end":25},"name":"OrdValSpineAbom","qualname":"::trace::implementations::ord::OrdValSpineAbom","value":"Spine<K, V, T, R, Rc<Abomonated<OrdValBatch<K, V, T, R, O>, Vec<u8>>>>","parent":null,"children":[],"decl_id":null,"docs":" A trace implementation using a spine of abomonated ordered lists.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1799},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":327099,"byte_end":327110,"line_start":42,"line_end":42,"column_start":10,"column_end":21},"name":"OrdKeySpine","qualname":"::trace::implementations::ord::OrdKeySpine","value":"Spine<K, (), T, R, Rc<OrdKeyBatch<K, T, R, O>>>","parent":null,"children":[],"decl_id":null,"docs":" A trace implementation for empty values using a spine of ordered lists.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1804},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":327277,"byte_end":327292,"line_start":45,"line_end":45,"column_start":10,"column_end":25},"name":"OrdKeySpineAbom","qualname":"::trace::implementations::ord::OrdKeySpineAbom","value":"Spine<K, (), T, R, Rc<Abomonated<OrdKeyBatch<K, T, R, O>, Vec<u8>>>>","parent":null,"children":[],"decl_id":null,"docs":" A trace implementation for empty values using a spine of abomonated ordered lists.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3823},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":327517,"byte_end":327528,"line_start":50,"line_end":50,"column_start":12,"column_end":23},"name":"OrdValBatch","qualname":"::trace::implementations::ord::OrdValBatch","value":"OrdValBatch { layer, desc }","parent":null,"children":[{"krate":0,"index":3829},{"krate":0,"index":3830}],"decl_id":null,"docs":" An immutable collection of update tuples, from a contiguous interval of logical times.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3829},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":327723,"byte_end":327728,"line_start":58,"line_end":58,"column_start":6,"column_end":11},"name":"layer","qualname":"::trace::implementations::ord::OrdValBatch::layer","value":"trace::layers::ordered::OrderedLayer<K, trace::layers::ordered::OrderedLayer<V, trace::layers::ordered_leaf::OrderedLeaf<T, R>, O>, O>","parent":{"krate":0,"index":3823},"children":[],"decl_id":null,"docs":" Where all the dataz is.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3830},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":327854,"byte_end":327858,"line_start":60,"line_end":60,"column_start":6,"column_end":10},"name":"desc","qualname":"::trace::implementations::ord::OrdValBatch::desc","value":"trace::description::Description<T>","parent":{"krate":0,"index":3823},"children":[],"decl_id":null,"docs":" Description of the update times this layer represents.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1836},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":332910,"byte_end":332922,"line_start":196,"line_end":196,"column_start":12,"column_end":24},"name":"OrdValMerger","qualname":"::trace::implementations::ord::OrdValMerger","value":"OrdValMerger {  }","parent":null,"children":[{"krate":0,"index":1842},{"krate":0,"index":1843},{"krate":0,"index":1844},{"krate":0,"index":1845},{"krate":0,"index":1846},{"krate":0,"index":1847}],"decl_id":null,"docs":" State for an in-progress merge.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3852},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":337019,"byte_end":337031,"line_start":307,"line_end":307,"column_start":12,"column_end":24},"name":"OrdValCursor","qualname":"::trace::implementations::ord::OrdValCursor","value":"OrdValCursor {  }","parent":null,"children":[{"krate":0,"index":3857}],"decl_id":null,"docs":" A cursor for navigating a single layer.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1880},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":339033,"byte_end":339046,"line_start":348,"line_end":348,"column_start":12,"column_end":25},"name":"OrdValBuilder","qualname":"::trace::implementations::ord::OrdValBuilder","value":"OrdValBuilder {  }","parent":null,"children":[{"krate":0,"index":1886}],"decl_id":null,"docs":" A builder for creating layers from unsorted update tuples.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3864},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":340428,"byte_end":340439,"line_start":398,"line_end":398,"column_start":12,"column_end":23},"name":"OrdKeyBatch","qualname":"::trace::implementations::ord::OrdKeyBatch","value":"OrdKeyBatch { layer, desc }","parent":null,"children":[{"krate":0,"index":3869},{"krate":0,"index":3870}],"decl_id":null,"docs":" An immutable collection of update tuples, from a contiguous interval of logical times.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3869},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":340619,"byte_end":340624,"line_start":405,"line_end":405,"column_start":6,"column_end":11},"name":"layer","qualname":"::trace::implementations::ord::OrdKeyBatch::layer","value":"trace::layers::ordered::OrderedLayer<K, trace::layers::ordered_leaf::OrderedLeaf<T, R>, O>","parent":{"krate":0,"index":3864},"children":[],"decl_id":null,"docs":" Where all the dataz is.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3870},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":340730,"byte_end":340734,"line_start":407,"line_end":407,"column_start":6,"column_end":10},"name":"desc","qualname":"::trace::implementations::ord::OrdKeyBatch::desc","value":"trace::description::Description<T>","parent":{"krate":0,"index":3864},"children":[],"decl_id":null,"docs":" Description of the update times this layer represents.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1921},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":344337,"byte_end":344349,"line_start":517,"line_end":517,"column_start":12,"column_end":24},"name":"OrdKeyMerger","qualname":"::trace::implementations::ord::OrdKeyMerger","value":"OrdKeyMerger {  }","parent":null,"children":[{"krate":0,"index":1926},{"krate":0,"index":1927},{"krate":0,"index":1928},{"krate":0,"index":1929},{"krate":0,"index":1930},{"krate":0,"index":1931}],"decl_id":null,"docs":" State for an in-progress merge.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3890},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":348646,"byte_end":348658,"line_start":632,"line_end":632,"column_start":12,"column_end":24},"name":"OrdKeyCursor","qualname":"::trace::implementations::ord::OrdKeyCursor","value":"OrdKeyCursor {  }","parent":null,"children":[{"krate":0,"index":3894},{"krate":0,"index":3895},{"krate":0,"index":3896},{"krate":0,"index":3897}],"decl_id":null,"docs":" A cursor for navigating a single layer.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1962},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":350412,"byte_end":350425,"line_start":670,"line_end":670,"column_start":12,"column_end":25},"name":"OrdKeyBuilder","qualname":"::trace::implementations::ord::OrdKeyBuilder","value":"OrdKeyBuilder {  }","parent":null,"children":[{"krate":0,"index":1967}],"decl_id":null,"docs":" A builder for creating layers from unsorted update tuples.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1977},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"layers","qualname":"::trace::layers","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","parent":null,"children":[{"krate":0,"index":1978},{"krate":0,"index":2057},{"krate":0,"index":2112},{"krate":0,"index":2122},{"krate":0,"index":2126},{"krate":0,"index":2130},{"krate":0,"index":2135},{"krate":0,"index":2145}],"decl_id":null,"docs":" Traits and types for building trie-based indices.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1978},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ordered","qualname":"::trace::layers::ordered","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","parent":null,"children":[{"krate":0,"index":1979},{"krate":0,"index":1986},{"krate":0,"index":1989},{"krate":0,"index":1990},{"krate":0,"index":1993},{"krate":0,"index":1994},{"krate":0,"index":3903},{"krate":0,"index":3938},{"krate":0,"index":3933},{"krate":0,"index":3927},{"krate":0,"index":3922},{"krate":0,"index":3910},{"krate":0,"index":1996},{"krate":0,"index":2007},{"krate":0,"index":2014},{"krate":0,"index":2021},{"krate":0,"index":2029},{"krate":0,"index":2036},{"krate":0,"index":3943},{"krate":0,"index":3948},{"krate":0,"index":2044}],"decl_id":null,"docs":" Implementation using ordered keys and exponential search.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1993},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":358430,"byte_end":358439,"line_start":11,"line_end":11,"column_start":11,"column_end":20},"name":"OrdOffset","qualname":"::trace::layers::ordered::OrdOffset","value":"OrdOffset: Copy + PartialEq + Add<Output = Self> + Sub<Output = Self> + TryFrom<usize> +\nTryInto<usize>","parent":null,"children":[],"decl_id":null,"docs":" Trait for types used as offsets into an ordered layer.\n This is usually `usize`, but `u32` can also be used in applications\n where huge batches do not occur to reduce metadata size.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3903},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":358895,"byte_end":358907,"line_start":23,"line_end":23,"column_start":12,"column_end":24},"name":"OrderedLayer","qualname":"::trace::layers::ordered::OrderedLayer","value":"OrderedLayer { keys, offs, vals }","parent":null,"children":[{"krate":0,"index":3907},{"krate":0,"index":3908},{"krate":0,"index":3909}],"decl_id":null,"docs":" A level of the trie, with keys and offsets into a lower layer.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3907},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":359067,"byte_end":359071,"line_start":29,"line_end":29,"column_start":6,"column_end":10},"name":"keys","qualname":"::trace::layers::ordered::OrderedLayer::keys","value":"std::vec::Vec<K>","parent":{"krate":0,"index":3903},"children":[],"decl_id":null,"docs":" The keys of the layer.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3908},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":359316,"byte_end":359320,"line_start":34,"line_end":34,"column_start":6,"column_end":10},"name":"offs","qualname":"::trace::layers::ordered::OrderedLayer::offs","value":"std::vec::Vec<O>","parent":{"krate":0,"index":3903},"children":[],"decl_id":null,"docs":" The offsets associate with each key.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3909},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":359387,"byte_end":359391,"line_start":36,"line_end":36,"column_start":6,"column_end":10},"name":"vals","qualname":"::trace::layers::ordered::OrderedLayer::vals","value":"L","parent":{"krate":0,"index":3903},"children":[],"decl_id":null,"docs":" The ranges of values associated with the keys.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2007},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":360352,"byte_end":360366,"line_start":75,"line_end":75,"column_start":12,"column_end":26},"name":"OrderedBuilder","qualname":"::trace::layers::ordered::OrderedBuilder","value":"OrderedBuilder { keys, offs, vals }","parent":null,"children":[{"krate":0,"index":2011},{"krate":0,"index":2012},{"krate":0,"index":2013}],"decl_id":null,"docs":" Assembles a layer of this\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2011},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":360508,"byte_end":360512,"line_start":81,"line_end":81,"column_start":6,"column_end":10},"name":"keys","qualname":"::trace::layers::ordered::OrderedBuilder::keys","value":"std::vec::Vec<K>","parent":{"krate":0,"index":2007},"children":[],"decl_id":null,"docs":" Keys\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2012},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":360540,"byte_end":360544,"line_start":83,"line_end":83,"column_start":6,"column_end":10},"name":"offs","qualname":"::trace::layers::ordered::OrderedBuilder::offs","value":"std::vec::Vec<O>","parent":{"krate":0,"index":2007},"children":[],"decl_id":null,"docs":" Offsets\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2013},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":360584,"byte_end":360588,"line_start":85,"line_end":85,"column_start":6,"column_end":10},"name":"vals","qualname":"::trace::layers::ordered::OrderedBuilder::vals","value":"L","parent":{"krate":0,"index":2007},"children":[],"decl_id":null,"docs":" The next layer down\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2033},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":363121,"byte_end":363131,"line_start":165,"line_end":165,"column_start":9,"column_end":19},"name":"merge_step","qualname":"<OrderedBuilder<K, L, O>>::merge_step","value":"fn (&mut self, other1: (&<Self as Builder>::Trie, &mut usize, usize), other2: (&<Self as Builder>::Trie, &mut usize, usize)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs one step of merging.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":363103,"byte_end":363112,"line_start":164,"line_end":164,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":3943},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":365892,"byte_end":365905,"line_start":238,"line_end":238,"column_start":12,"column_end":25},"name":"OrderedCursor","qualname":"::trace::layers::ordered::OrderedCursor","value":"OrderedCursor { child }","parent":null,"children":[{"krate":0,"index":3945},{"krate":0,"index":3946},{"krate":0,"index":3947}],"decl_id":null,"docs":" A cursor with a child cursor that is updated as we move.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3947},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":366091,"byte_end":366096,"line_start":244,"line_end":244,"column_start":6,"column_end":11},"name":"child","qualname":"::trace::layers::ordered::OrderedCursor::child","value":"<L as trace::layers::Trie>::Cursor","parent":{"krate":0,"index":3943},"children":[],"decl_id":null,"docs":" The cursor for the trie layer below this one.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2057},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered_leaf.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ordered_leaf","qualname":"::trace::layers::ordered_leaf","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered_leaf.rs","parent":null,"children":[{"krate":0,"index":2058},{"krate":0,"index":2059},{"krate":0,"index":3951},{"krate":0,"index":3979},{"krate":0,"index":3975},{"krate":0,"index":3970},{"krate":0,"index":3966},{"krate":0,"index":3955},{"krate":0,"index":2066},{"krate":0,"index":2076},{"krate":0,"index":2080},{"krate":0,"index":2086},{"krate":0,"index":2094},{"krate":0,"index":3983},{"krate":0,"index":3986},{"krate":0,"index":2101}],"decl_id":null,"docs":" Implementation using ordered keys and exponential search.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3951},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered_leaf.rs","byte_start":367992,"byte_end":368003,"line_start":9,"line_end":9,"column_start":12,"column_end":23},"name":"OrderedLeaf","qualname":"::trace::layers::ordered_leaf::OrderedLeaf","value":"OrderedLeaf { vals }","parent":null,"children":[{"krate":0,"index":3954}],"decl_id":null,"docs":" A layer of unordered values.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3954},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered_leaf.rs","byte_start":368046,"byte_end":368050,"line_start":11,"line_end":11,"column_start":9,"column_end":13},"name":"vals","qualname":"::trace::layers::ordered_leaf::OrderedLeaf::vals","value":"std::vec::Vec<(K, R)>","parent":{"krate":0,"index":3951},"children":[],"decl_id":null,"docs":" Unordered values.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2076},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered_leaf.rs","byte_start":368646,"byte_end":368664,"line_start":30,"line_end":30,"column_start":12,"column_end":30},"name":"OrderedLeafBuilder","qualname":"::trace::layers::ordered_leaf::OrderedLeafBuilder","value":"OrderedLeafBuilder { vals }","parent":null,"children":[{"krate":0,"index":2079}],"decl_id":null,"docs":" A builder for unordered values.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2079},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered_leaf.rs","byte_start":368707,"byte_end":368711,"line_start":32,"line_end":32,"column_start":9,"column_end":13},"name":"vals","qualname":"::trace::layers::ordered_leaf::OrderedLeafBuilder::vals","value":"std::vec::Vec<(K, R)>","parent":{"krate":0,"index":2076},"children":[],"decl_id":null,"docs":" Unordered values.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3983},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered_leaf.rs","byte_start":372069,"byte_end":372086,"line_start":108,"line_end":108,"column_start":12,"column_end":29},"name":"OrderedLeafCursor","qualname":"::trace::layers::ordered_leaf::OrderedLeafCursor","value":"OrderedLeafCursor {  }","parent":null,"children":[{"krate":0,"index":3984},{"krate":0,"index":3985}],"decl_id":null,"docs":" A cursor for walking through an unordered sequence of values.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2112},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":352234,"byte_end":352238,"line_start":18,"line_end":18,"column_start":11,"column_end":15},"name":"Trie","qualname":"::trace::layers::Trie","value":"Trie: ::std::marker::Sized","parent":null,"children":[{"krate":0,"index":2113},{"krate":0,"index":2114},{"krate":0,"index":2115},{"krate":0,"index":2116},{"krate":0,"index":2117},{"krate":0,"index":2118},{"krate":0,"index":2119},{"krate":0,"index":2120},{"krate":0,"index":2121}],"decl_id":null,"docs":" A collection of tuples, and types for building and enumerating them.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2113},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":352335,"byte_end":352339,"line_start":20,"line_end":20,"column_start":10,"column_end":14},"name":"Item","qualname":"::trace::layers::Trie::Item","value":"type Item;","parent":{"krate":0,"index":2112},"children":[],"decl_id":null,"docs":" The type of item from which the type is constructed.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2114},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":352404,"byte_end":352410,"line_start":22,"line_end":22,"column_start":10,"column_end":16},"name":"Cursor","qualname":"::trace::layers::Trie::Cursor","value":"type Cursor: Cursor<Self>;","parent":{"krate":0,"index":2112},"children":[],"decl_id":null,"docs":" The type of cursor used to navigate the type.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2115},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":352498,"byte_end":352510,"line_start":24,"line_end":24,"column_start":10,"column_end":22},"name":"MergeBuilder","qualname":"::trace::layers::Trie::MergeBuilder","value":"type MergeBuilder: MergeBuilder<Trie=Self>;","parent":{"krate":0,"index":2112},"children":[],"decl_id":null,"docs":" The type used to merge instances of the type together.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2116},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":352620,"byte_end":352632,"line_start":26,"line_end":26,"column_start":10,"column_end":22},"name":"TupleBuilder","qualname":"::trace::layers::Trie::TupleBuilder","value":"type TupleBuilder: TupleBuilder<Trie=Self, Item=Self::Item>;","parent":{"krate":0,"index":2112},"children":[],"decl_id":null,"docs":" The type used to assemble instances of the type from its `Item`s.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2117},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":352766,"byte_end":352770,"line_start":29,"line_end":29,"column_start":8,"column_end":12},"name":"keys","qualname":"::trace::layers::Trie::keys","value":"fn (&self) -> usize","parent":{"krate":0,"index":2112},"children":[],"decl_id":null,"docs":" The number of distinct keys, as distinct from the total number of tuples.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2118},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":352849,"byte_end":352855,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"tuples","qualname":"::trace::layers::Trie::tuples","value":"fn (&self) -> usize","parent":{"krate":0,"index":2112},"children":[],"decl_id":null,"docs":" The total number of tuples in the collection.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2119},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":352943,"byte_end":352949,"line_start":33,"line_end":33,"column_start":8,"column_end":14},"name":"cursor","qualname":"::trace::layers::Trie::cursor","value":"fn (&self) -> Self::Cursor","parent":{"krate":0,"index":2112},"children":[],"decl_id":null,"docs":" Returns a cursor capable of navigating the collection.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2120},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":353139,"byte_end":353150,"line_start":36,"line_end":36,"column_start":8,"column_end":19},"name":"cursor_from","qualname":"::trace::layers::Trie::cursor_from","value":"fn (&self, lower: usize, upper: usize) -> Self::Cursor","parent":{"krate":0,"index":2112},"children":[],"decl_id":null,"docs":" Returns a cursor over a range of data, commonly used by others to restrict navigation to\n sub-collections.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2121},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":353496,"byte_end":353501,"line_start":43,"line_end":43,"column_start":8,"column_end":13},"name":"merge","qualname":"::trace::layers::Trie::merge","value":"fn (&self, other: &Self) -> Self","parent":{"krate":0,"index":2112},"children":[],"decl_id":null,"docs":" Merges two collections into a third.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2122},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":353830,"byte_end":353837,"line_start":52,"line_end":52,"column_start":11,"column_end":18},"name":"Builder","qualname":"::trace::layers::Builder","value":"Builder","parent":null,"children":[{"krate":0,"index":2123},{"krate":0,"index":2124},{"krate":0,"index":2125}],"decl_id":null,"docs":" A type used to assemble collections.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2123},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":353890,"byte_end":353894,"line_start":54,"line_end":54,"column_start":10,"column_end":14},"name":"Trie","qualname":"::trace::layers::Builder::Trie","value":"type Trie: Trie;","parent":{"krate":0,"index":2122},"children":[],"decl_id":null,"docs":" The type of collection produced.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2124},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":354275,"byte_end":354283,"line_start":60,"line_end":60,"column_start":8,"column_end":16},"name":"boundary","qualname":"::trace::layers::Builder::boundary","value":"fn (&mut self) -> usize","parent":{"krate":0,"index":2122},"children":[],"decl_id":null,"docs":" Requests a commitment to the offset of the current-most sub-collection.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2125},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":354379,"byte_end":354383,"line_start":62,"line_end":62,"column_start":8,"column_end":12},"name":"done","qualname":"::trace::layers::Builder::done","value":"fn (self) -> Self::Trie","parent":{"krate":0,"index":2122},"children":[],"decl_id":null,"docs":" Finalizes the building process and returns the collection.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2126},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":354486,"byte_end":354498,"line_start":66,"line_end":66,"column_start":11,"column_end":23},"name":"MergeBuilder","qualname":"::trace::layers::MergeBuilder","value":"MergeBuilder: Builder","parent":null,"children":[{"krate":0,"index":2127},{"krate":0,"index":2128},{"krate":0,"index":2129}],"decl_id":null,"docs":" A type used to assemble collections by merging other instances.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2127},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":354616,"byte_end":354629,"line_start":68,"line_end":68,"column_start":8,"column_end":21},"name":"with_capacity","qualname":"::trace::layers::MergeBuilder::with_capacity","value":"fn (other1: &Self::Trie, other2: &Self::Trie) -> Self","parent":{"krate":0,"index":2126},"children":[],"decl_id":null,"docs":" Allocates an instance of the builder with sufficient capacity to contain the merged data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2128},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":354752,"byte_end":354762,"line_start":70,"line_end":70,"column_start":8,"column_end":18},"name":"copy_range","qualname":"::trace::layers::MergeBuilder::copy_range","value":"fn (&mut self, other: &Self::Trie, lower: usize, upper: usize) -> ()","parent":{"krate":0,"index":2126},"children":[],"decl_id":null,"docs":" Copies sub-collections of `other` into this collection.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2129},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":354890,"byte_end":354900,"line_start":72,"line_end":72,"column_start":8,"column_end":18},"name":"push_merge","qualname":"::trace::layers::MergeBuilder::push_merge","value":"fn (&mut self, other1: (&Self::Trie, usize, usize), other2: (&Self::Trie, usize, usize)) -> usize","parent":{"krate":0,"index":2126},"children":[],"decl_id":null,"docs":" Merges two sub-collections into one sub-collection.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2130},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":355083,"byte_end":355095,"line_start":76,"line_end":76,"column_start":11,"column_end":23},"name":"TupleBuilder","qualname":"::trace::layers::TupleBuilder","value":"TupleBuilder: Builder","parent":null,"children":[{"krate":0,"index":2131},{"krate":0,"index":2132},{"krate":0,"index":2133},{"krate":0,"index":2134}],"decl_id":null,"docs":" A type used to assemble collections from ordered sequences of tuples.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2131},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":355169,"byte_end":355173,"line_start":78,"line_end":78,"column_start":10,"column_end":14},"name":"Item","qualname":"::trace::layers::TupleBuilder::Item","value":"type Item;","parent":{"krate":0,"index":2130},"children":[],"decl_id":null,"docs":" The type of item accepted for construction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2132},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":355215,"byte_end":355218,"line_start":80,"line_end":80,"column_start":8,"column_end":11},"name":"new","qualname":"::trace::layers::TupleBuilder::new","value":"fn () -> Self","parent":{"krate":0,"index":2130},"children":[],"decl_id":null,"docs":" Allocates a new builder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2133},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":355310,"byte_end":355323,"line_start":82,"line_end":82,"column_start":8,"column_end":21},"name":"with_capacity","qualname":"::trace::layers::TupleBuilder::with_capacity","value":"fn (cap: usize) -> Self","parent":{"krate":0,"index":2130},"children":[],"decl_id":null,"docs":" Allocates a new builder with capacity for at least `cap` tuples.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2134},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":355444,"byte_end":355454,"line_start":84,"line_end":84,"column_start":8,"column_end":18},"name":"push_tuple","qualname":"::trace::layers::TupleBuilder::push_tuple","value":"fn (&mut self, tuple: Self::Item) -> ()","parent":{"krate":0,"index":2130},"children":[],"decl_id":null,"docs":" Inserts a new into the collection.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2135},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":355764,"byte_end":355770,"line_start":92,"line_end":92,"column_start":11,"column_end":17},"name":"Cursor","qualname":"::trace::layers::Cursor","value":"Cursor<Storage>","parent":null,"children":[{"krate":0,"index":2137},{"krate":0,"index":2138},{"krate":0,"index":2140},{"krate":0,"index":2141},{"krate":0,"index":2142},{"krate":0,"index":2143},{"krate":0,"index":2144}],"decl_id":null,"docs":" A type supporting navigation.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2137},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":355832,"byte_end":355835,"line_start":94,"line_end":94,"column_start":10,"column_end":13},"name":"Key","qualname":"::trace::layers::Cursor::Key","value":"type Key;","parent":{"krate":0,"index":2135},"children":[],"decl_id":null,"docs":" The type revealed by the cursor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2138},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":355877,"byte_end":355880,"line_start":96,"line_end":96,"column_start":8,"column_end":11},"name":"key","qualname":"::trace::layers::Cursor::key","value":"fn <'a> (&self, storage: &'a Storage) -> &'a Self::Key","parent":{"krate":0,"index":2135},"children":[],"decl_id":null,"docs":" Reveals the current key.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2140},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":355983,"byte_end":355987,"line_start":98,"line_end":98,"column_start":8,"column_end":12},"name":"step","qualname":"::trace::layers::Cursor::step","value":"fn (&mut self, storage: &Storage) -> ()","parent":{"krate":0,"index":2135},"children":[],"decl_id":null,"docs":" Advances the cursor by one element.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2141},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":356104,"byte_end":356108,"line_start":100,"line_end":100,"column_start":8,"column_end":12},"name":"seek","qualname":"::trace::layers::Cursor::seek","value":"fn (&mut self, storage: &Storage, key: &Self::Key) -> ()","parent":{"krate":0,"index":2135},"children":[],"decl_id":null,"docs":" Advances the cursor until the location where `key` would be expected.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2142},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":356267,"byte_end":356272,"line_start":102,"line_end":102,"column_start":8,"column_end":13},"name":"valid","qualname":"::trace::layers::Cursor::valid","value":"fn (&self, storage: &Storage) -> bool","parent":{"krate":0,"index":2135},"children":[],"decl_id":null,"docs":" Returns `true` if the cursor points at valid data. Returns `false` if the cursor is exhausted.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2143},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":356364,"byte_end":356370,"line_start":104,"line_end":104,"column_start":8,"column_end":14},"name":"rewind","qualname":"::trace::layers::Cursor::rewind","value":"fn (&mut self, storage: &Storage) -> ()","parent":{"krate":0,"index":2135},"children":[],"decl_id":null,"docs":" Rewinds the cursor to its initial state.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2144},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":356472,"byte_end":356482,"line_start":106,"line_end":106,"column_start":8,"column_end":18},"name":"reposition","qualname":"::trace::layers::Cursor::reposition","value":"fn (&mut self, storage: &Storage, lower: usize, upper: usize) -> ()","parent":{"krate":0,"index":2135},"children":[],"decl_id":null,"docs":" Repositions the cursor to a different range of values.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2145},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":356899,"byte_end":356906,"line_start":115,"line_end":115,"column_start":8,"column_end":15},"name":"advance","qualname":"::trace::layers::advance","value":"fn <T, F> (slice: &[T], function: F) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Reports the number of elements satisfing the predicate.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2149},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wrappers","qualname":"::trace::wrappers","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\mod.rs","parent":null,"children":[{"krate":0,"index":2150},{"krate":0,"index":2311},{"krate":0,"index":2490},{"krate":0,"index":2634},{"krate":0,"index":2686},{"krate":0,"index":2841}],"decl_id":null,"docs":" Wrappers around trace implementations, providing derived views of updates.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2150},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"enter","qualname":"::trace::wrappers::enter","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","parent":null,"children":[{"krate":0,"index":2151},{"krate":0,"index":2152},{"krate":0,"index":2153},{"krate":0,"index":2154},{"krate":0,"index":2158},{"krate":0,"index":2159},{"krate":0,"index":2165},{"krate":0,"index":2169},{"krate":0,"index":2187},{"krate":0,"index":2191},{"krate":0,"index":2201},{"krate":0,"index":2209},{"krate":0,"index":2220},{"krate":0,"index":2231},{"krate":0,"index":2240},{"krate":0,"index":2248},{"krate":0,"index":2271},{"krate":0,"index":2280},{"krate":0,"index":2288}],"decl_id":null,"docs":" Wrappers to provide trace access to nested scopes.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2159},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":373526,"byte_end":373536,"line_start":12,"line_end":12,"column_start":12,"column_end":22},"name":"TraceEnter","qualname":"::trace::wrappers::enter::TraceEnter","value":"TraceEnter {  }","parent":null,"children":[{"krate":0,"index":2162},{"krate":0,"index":2163},{"krate":0,"index":2164}],"decl_id":null,"docs":" Wrapper to provide trace to nested scope.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2190},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":376120,"byte_end":376129,"line_start":104,"line_end":104,"column_start":12,"column_end":21},"name":"make_from","qualname":"<TraceEnter<Tr, TInner>>::make_from","value":"fn (trace: Tr) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Makes a new trace wrapper\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2191},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":376339,"byte_end":376349,"line_start":115,"line_end":115,"column_start":12,"column_end":22},"name":"BatchEnter","qualname":"::trace::wrappers::enter::BatchEnter","value":"BatchEnter {  }","parent":null,"children":[{"krate":0,"index":2198},{"krate":0,"index":2199},{"krate":0,"index":2200}],"decl_id":null,"docs":" Wrapper to provide batch to nested scope.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2227},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":377443,"byte_end":377452,"line_start":153,"line_end":153,"column_start":12,"column_end":21},"name":"make_from","qualname":"<BatchEnter<K, V, T, R, B, TInner>>::make_from","value":"fn (batch: B) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Makes a new batch wrapper\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2231},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":378058,"byte_end":378069,"line_start":167,"line_end":167,"column_start":12,"column_end":23},"name":"CursorEnter","qualname":"::trace::wrappers::enter::CursorEnter","value":"CursorEnter {  }","parent":null,"children":[{"krate":0,"index":2238},{"krate":0,"index":2239}],"decl_id":null,"docs":" Wrapper to provide cursor to nested scope.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2271},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":379957,"byte_end":379973,"line_start":215,"line_end":215,"column_start":12,"column_end":28},"name":"BatchCursorEnter","qualname":"::trace::wrappers::enter::BatchCursorEnter","value":"BatchCursorEnter {  }","parent":null,"children":[{"krate":0,"index":2278},{"krate":0,"index":2279}],"decl_id":null,"docs":" Wrapper to provide cursor to nested scope.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2311},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"enter_at","qualname":"::trace::wrappers::enter_at","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","parent":null,"children":[{"krate":0,"index":2312},{"krate":0,"index":2313},{"krate":0,"index":2314},{"krate":0,"index":2315},{"krate":0,"index":2319},{"krate":0,"index":2320},{"krate":0,"index":2328},{"krate":0,"index":2333},{"krate":0,"index":2352},{"krate":0,"index":2357},{"krate":0,"index":2369},{"krate":0,"index":2378},{"krate":0,"index":2390},{"krate":0,"index":2402},{"krate":0,"index":2413},{"krate":0,"index":2422},{"krate":0,"index":2446},{"krate":0,"index":2457},{"krate":0,"index":2466}],"decl_id":null,"docs":" Wrappers to provide trace access to nested scopes.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2320},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":382228,"byte_end":382238,"line_start":11,"line_end":11,"column_start":12,"column_end":22},"name":"TraceEnter","qualname":"::trace::wrappers::enter_at::TraceEnter","value":"TraceEnter {  }","parent":null,"children":[{"krate":0,"index":2324},{"krate":0,"index":2325},{"krate":0,"index":2326},{"krate":0,"index":2327}],"decl_id":null,"docs":" Wrapper to provide trace to nested scope.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2356},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":385061,"byte_end":385070,"line_start":109,"line_end":109,"column_start":12,"column_end":21},"name":"make_from","qualname":"<TraceEnter<Tr, TInner, F>>::make_from","value":"fn (trace: Tr, logic: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Makes a new trace wrapper\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2357},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":385309,"byte_end":385319,"line_start":121,"line_end":121,"column_start":12,"column_end":22},"name":"BatchEnter","qualname":"::trace::wrappers::enter_at::BatchEnter","value":"BatchEnter {  }","parent":null,"children":[{"krate":0,"index":2365},{"krate":0,"index":2366},{"krate":0,"index":2367},{"krate":0,"index":2368}],"decl_id":null,"docs":" Wrapper to provide batch to nested scope.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2398},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":386557,"byte_end":386566,"line_start":162,"line_end":162,"column_start":12,"column_end":21},"name":"make_from","qualname":"<BatchEnter<K, V, T, R, B, TInner, F>>::make_from","value":"fn (batch: B, logic: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Makes a new batch wrapper\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2402},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":387195,"byte_end":387206,"line_start":177,"line_end":177,"column_start":12,"column_end":23},"name":"CursorEnter","qualname":"::trace::wrappers::enter_at::CursorEnter","value":"CursorEnter {  }","parent":null,"children":[{"krate":0,"index":2410},{"krate":0,"index":2411},{"krate":0,"index":2412}],"decl_id":null,"docs":" Wrapper to provide cursor to nested scope.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2446},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":389282,"byte_end":389298,"line_start":231,"line_end":231,"column_start":12,"column_end":28},"name":"BatchCursorEnter","qualname":"::trace::wrappers::enter_at::BatchCursorEnter","value":"BatchCursorEnter {  }","parent":null,"children":[{"krate":0,"index":2454},{"krate":0,"index":2455},{"krate":0,"index":2456}],"decl_id":null,"docs":" Wrapper to provide cursor to nested scope.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2490},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"frontier","qualname":"::trace::wrappers::frontier","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","parent":null,"children":[{"krate":0,"index":2491},{"krate":0,"index":2492},{"krate":0,"index":2496},{"krate":0,"index":2497},{"krate":0,"index":2498},{"krate":0,"index":2502},{"krate":0,"index":2505},{"krate":0,"index":2522},{"krate":0,"index":2525},{"krate":0,"index":2534},{"krate":0,"index":2541},{"krate":0,"index":2551},{"krate":0,"index":2558},{"krate":0,"index":2567},{"krate":0,"index":2574},{"krate":0,"index":2596},{"krate":0,"index":2605},{"krate":0,"index":2612}],"decl_id":null,"docs":" Wrapper for frontiered trace.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2498},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":391964,"byte_end":391977,"line_start":14,"line_end":14,"column_start":12,"column_end":25},"name":"TraceFrontier","qualname":"::trace::wrappers::frontier::TraceFrontier","value":"TraceFrontier {  }","parent":null,"children":[{"krate":0,"index":2500},{"krate":0,"index":2501}],"decl_id":null,"docs":" Wrapper to provide trace to nested scope.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2524},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":393751,"byte_end":393760,"line_start":75,"line_end":75,"column_start":12,"column_end":21},"name":"make_from","qualname":"<TraceFrontier<Tr>>::make_from","value":"fn (trace: Tr, frontier: &[Tr::Time]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Makes a new trace wrapper\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2525},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":393966,"byte_end":393979,"line_start":85,"line_end":85,"column_start":12,"column_end":25},"name":"BatchFrontier","qualname":"::trace::wrappers::frontier::BatchFrontier","value":"BatchFrontier {  }","parent":null,"children":[{"krate":0,"index":2531},{"krate":0,"index":2532},{"krate":0,"index":2533}],"decl_id":null,"docs":" Wrapper to provide batch to nested scope.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2557},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":394975,"byte_end":394984,"line_start":121,"line_end":121,"column_start":12,"column_end":21},"name":"make_from","qualname":"<BatchFrontier<K, V, T, R, B>>::make_from","value":"fn (batch: B, frontier: &[T]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Makes a new batch wrapper\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2558},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":395231,"byte_end":395245,"line_start":131,"line_end":131,"column_start":12,"column_end":26},"name":"CursorFrontier","qualname":"::trace::wrappers::frontier::CursorFrontier","value":"CursorFrontier {  }","parent":null,"children":[{"krate":0,"index":2564},{"krate":0,"index":2565},{"krate":0,"index":2566}],"decl_id":null,"docs":" Wrapper to provide cursor to nested scope.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2596},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":397275,"byte_end":397294,"line_start":184,"line_end":184,"column_start":12,"column_end":31},"name":"BatchCursorFrontier","qualname":"::trace::wrappers::frontier::BatchCursorFrontier","value":"BatchCursorFrontier {  }","parent":null,"children":[{"krate":0,"index":2602},{"krate":0,"index":2603},{"krate":0,"index":2604}],"decl_id":null,"docs":" Wrapper to provide cursor to nested scope.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2634},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\rc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rc","qualname":"::trace::wrappers::rc","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\rc.rs","parent":null,"children":[{"krate":0,"index":2635},{"krate":0,"index":2636},{"krate":0,"index":2637},{"krate":0,"index":2638},{"krate":0,"index":2639},{"krate":0,"index":2640},{"krate":0,"index":2641},{"krate":0,"index":2646},{"krate":0,"index":2657},{"krate":0,"index":2662},{"krate":0,"index":2677},{"krate":0,"index":2680},{"krate":0,"index":2683}],"decl_id":null,"docs":" A reference-counted wrapper sharing one owned trace.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2641},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\rc.rs","byte_start":400786,"byte_end":400794,"line_start":28,"line_end":28,"column_start":12,"column_end":20},"name":"TraceBox","qualname":"::trace::wrappers::rc::TraceBox","value":"TraceBox { advance_frontiers, through_frontiers, trace }","parent":null,"children":[{"krate":0,"index":2643},{"krate":0,"index":2644},{"krate":0,"index":2645}],"decl_id":null,"docs":" A wrapper around a trace which tracks the frontiers of all referees.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2643},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\rc.rs","byte_start":400928,"byte_end":400945,"line_start":34,"line_end":34,"column_start":9,"column_end":26},"name":"advance_frontiers","qualname":"::trace::wrappers::rc::TraceBox::advance_frontiers","value":"timely::progress::frontier::MutableAntichain<<Tr as trace::TraceReader>::Time>","parent":{"krate":0,"index":2641},"children":[],"decl_id":null,"docs":" accumulated holds on times for advancement.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2644},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\rc.rs","byte_start":401035,"byte_end":401052,"line_start":36,"line_end":36,"column_start":9,"column_end":26},"name":"through_frontiers","qualname":"::trace::wrappers::rc::TraceBox::through_frontiers","value":"timely::progress::frontier::MutableAntichain<<Tr as trace::TraceReader>::Time>","parent":{"krate":0,"index":2641},"children":[],"decl_id":null,"docs":" accumulated holds on times for distinction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2645},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\rc.rs","byte_start":401117,"byte_end":401122,"line_start":38,"line_end":38,"column_start":9,"column_end":14},"name":"trace","qualname":"::trace::wrappers::rc::TraceBox::trace","value":"Tr","parent":{"krate":0,"index":2641},"children":[],"decl_id":null,"docs":" The wrapped trace.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2648},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\rc.rs","byte_start":401513,"byte_end":401516,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"new","qualname":"<TraceBox<Tr>>::new","value":"fn (mut trace: Tr) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Moves an existing trace into a shareable trace wrapper.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2651},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\rc.rs","byte_start":402245,"byte_end":402268,"line_start":71,"line_end":71,"column_start":12,"column_end":35},"name":"adjust_advance_frontier","qualname":"<TraceBox<Tr>>::adjust_advance_frontier","value":"fn (&mut self, lower: &[Tr::Time], upper: &[Tr::Time]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Replaces elements of `lower` with those of `upper`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2654},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\rc.rs","byte_start":402818,"byte_end":402841,"line_start":79,"line_end":79,"column_start":12,"column_end":35},"name":"adjust_through_frontier","qualname":"<TraceBox<Tr>>::adjust_through_frontier","value":"fn (&mut self, lower: &[Tr::Time], upper: &[Tr::Time]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Replaces elements of `lower` with those of `upper`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2657},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\rc.rs","byte_start":403667,"byte_end":403674,"line_start":93,"line_end":93,"column_start":12,"column_end":19},"name":"TraceRc","qualname":"::trace::wrappers::rc::TraceRc","value":"TraceRc { wrapper }","parent":null,"children":[{"krate":0,"index":2659},{"krate":0,"index":2660},{"krate":0,"index":2661}],"decl_id":null,"docs":" A handle to a shared trace.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2661},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\rc.rs","byte_start":403883,"byte_end":403890,"line_start":101,"line_end":101,"column_start":9,"column_end":16},"name":"wrapper","qualname":"::trace::wrappers::rc::TraceRc::wrapper","value":"std::rc::Rc<std::cell::RefCell<trace::wrappers::rc::TraceBox<Tr>>>","parent":{"krate":0,"index":2657},"children":[],"decl_id":null,"docs":" Wrapped trace. Please be gentle when using.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2679},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\rc.rs","byte_start":405812,"byte_end":405821,"line_start":149,"line_end":149,"column_start":12,"column_end":21},"name":"make_from","qualname":"<TraceRc<Tr>>::make_from","value":"fn (trace: Tr) -> (Self, Rc<RefCell<TraceBox<Tr>>>)","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new handle from an existing wrapped wrapper.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2686},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"filter","qualname":"::trace::wrappers::filter","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","parent":null,"children":[{"krate":0,"index":2687},{"krate":0,"index":2688},{"krate":0,"index":2692},{"krate":0,"index":2693},{"krate":0,"index":2698},{"krate":0,"index":2702},{"krate":0,"index":2720},{"krate":0,"index":2724},{"krate":0,"index":2734},{"krate":0,"index":2742},{"krate":0,"index":2753},{"krate":0,"index":2761},{"krate":0,"index":2771},{"krate":0,"index":2779},{"krate":0,"index":2801},{"krate":0,"index":2811},{"krate":0,"index":2819}],"decl_id":null,"docs":" Wrapper for filtered trace.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2693},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":407396,"byte_end":407407,"line_start":9,"line_end":9,"column_start":12,"column_end":23},"name":"TraceFilter","qualname":"::trace::wrappers::filter::TraceFilter","value":"TraceFilter {  }","parent":null,"children":[{"krate":0,"index":2696},{"krate":0,"index":2697}],"decl_id":null,"docs":" Wrapper to provide trace to nested scope.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2723},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":409168,"byte_end":409177,"line_start":68,"line_end":68,"column_start":12,"column_end":21},"name":"make_from","qualname":"<TraceFilter<Tr, F>>::make_from","value":"fn (trace: Tr, logic: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Makes a new trace wrapper\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2724},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":409346,"byte_end":409357,"line_start":78,"line_end":78,"column_start":12,"column_end":23},"name":"BatchFilter","qualname":"::trace::wrappers::filter::BatchFilter","value":"BatchFilter {  }","parent":null,"children":[{"krate":0,"index":2731},{"krate":0,"index":2732},{"krate":0,"index":2733}],"decl_id":null,"docs":" Wrapper to provide batch to nested scope.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2760},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":410376,"byte_end":410385,"line_start":115,"line_end":115,"column_start":12,"column_end":21},"name":"make_from","qualname":"<BatchFilter<K, V, T, R, B, F>>::make_from","value":"fn (batch: B, logic: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Makes a new batch wrapper\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2761},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":410602,"byte_end":410614,"line_start":125,"line_end":125,"column_start":12,"column_end":24},"name":"CursorFilter","qualname":"::trace::wrappers::filter::CursorFilter","value":"CursorFilter {  }","parent":null,"children":[{"krate":0,"index":2768},{"krate":0,"index":2769},{"krate":0,"index":2770}],"decl_id":null,"docs":" Wrapper to provide cursor to nested scope.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2801},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":412543,"byte_end":412560,"line_start":177,"line_end":177,"column_start":12,"column_end":29},"name":"BatchCursorFilter","qualname":"::trace::wrappers::filter::BatchCursorFilter","value":"BatchCursorFilter {  }","parent":null,"children":[{"krate":0,"index":2808},{"krate":0,"index":2809},{"krate":0,"index":2810}],"decl_id":null,"docs":" Wrapper to provide cursor to nested scope.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2841},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"freeze","qualname":"::trace::wrappers::freeze","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","parent":null,"children":[{"krate":0,"index":2842},{"krate":0,"index":2843},{"krate":0,"index":2844},{"krate":0,"index":2845},{"krate":0,"index":2846},{"krate":0,"index":2847},{"krate":0,"index":2851},{"krate":0,"index":2852},{"krate":0,"index":2857},{"krate":0,"index":2862},{"krate":0,"index":2866},{"krate":0,"index":2884},{"krate":0,"index":2888},{"krate":0,"index":2898},{"krate":0,"index":2906},{"krate":0,"index":2917},{"krate":0,"index":2925},{"krate":0,"index":2935},{"krate":0,"index":2943},{"krate":0,"index":2966},{"krate":0,"index":2976},{"krate":0,"index":2984}],"decl_id":null,"docs":" Wrappers to transform the timestamps of updates.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2852},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":416061,"byte_end":416067,"line_start":35,"line_end":35,"column_start":8,"column_end":14},"name":"freeze","qualname":"::trace::wrappers::freeze::freeze","value":"fn <G, T, F> (arranged: &Arranged<G, T>, func: F) -> Arranged<G, TraceFreeze<T, F>>","parent":null,"children":[],"decl_id":null,"docs":" Freezes updates to an arrangement using a supplied function.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2857},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":416787,"byte_end":416798,"line_start":56,"line_end":56,"column_start":12,"column_end":23},"name":"TraceFreeze","qualname":"::trace::wrappers::freeze::TraceFreeze","value":"TraceFreeze {  }","parent":null,"children":[{"krate":0,"index":2860},{"krate":0,"index":2861}],"decl_id":null,"docs":" Wrapper to provide trace to nested scope.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2887},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":418950,"byte_end":418959,"line_start":129,"line_end":129,"column_start":12,"column_end":21},"name":"make_from","qualname":"<TraceFreeze<Tr, F>>::make_from","value":"fn (trace: Tr, func: Rc<F>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Makes a new trace wrapper\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2888},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":419143,"byte_end":419154,"line_start":139,"line_end":139,"column_start":12,"column_end":23},"name":"BatchFreeze","qualname":"::trace::wrappers::freeze::BatchFreeze","value":"BatchFreeze {  }","parent":null,"children":[{"krate":0,"index":2895},{"krate":0,"index":2896},{"krate":0,"index":2897}],"decl_id":null,"docs":" Wrapper to provide batch to nested scope.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2924},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":420182,"byte_end":420191,"line_start":177,"line_end":177,"column_start":12,"column_end":21},"name":"make_from","qualname":"<BatchFreeze<K, V, T, R, B, F>>::make_from","value":"fn (batch: B, func: Rc<F>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Makes a new batch wrapper\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2925},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":420423,"byte_end":420435,"line_start":187,"line_end":187,"column_start":12,"column_end":24},"name":"CursorFreeze","qualname":"::trace::wrappers::freeze::CursorFreeze","value":"CursorFreeze {  }","parent":null,"children":[{"krate":0,"index":2932},{"krate":0,"index":2933},{"krate":0,"index":2934}],"decl_id":null,"docs":" Wrapper to provide cursor to nested scope.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2966},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":422378,"byte_end":422395,"line_start":238,"line_end":238,"column_start":12,"column_end":29},"name":"BatchCursorFreeze","qualname":"::trace::wrappers::freeze::BatchCursorFreeze","value":"BatchCursorFreeze {  }","parent":null,"children":[{"krate":0,"index":2973},{"krate":0,"index":2974},{"krate":0,"index":2975}],"decl_id":null,"docs":" Wrapper to provide cursor to nested scope.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3011},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":231914,"byte_end":231925,"line_start":43,"line_end":43,"column_start":11,"column_end":22},"name":"TraceReader","qualname":"::trace::TraceReader","value":"TraceReader","parent":null,"children":[{"krate":0,"index":3012},{"krate":0,"index":3013},{"krate":0,"index":3014},{"krate":0,"index":3015},{"krate":0,"index":3016},{"krate":0,"index":3017},{"krate":0,"index":3018},{"krate":0,"index":3019},{"krate":0,"index":3020},{"krate":0,"index":3021},{"krate":0,"index":3022},{"krate":0,"index":3023},{"krate":0,"index":3024},{"krate":0,"index":3026},{"krate":0,"index":3028}],"decl_id":null,"docs":" A trace whose contents may be read.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3012},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":231974,"byte_end":231977,"line_start":46,"line_end":46,"column_start":7,"column_end":10},"name":"Key","qualname":"::trace::TraceReader::Key","value":"type Key;","parent":{"krate":0,"index":3011},"children":[],"decl_id":null,"docs":" Key by which updates are indexed.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3013},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":232019,"byte_end":232022,"line_start":48,"line_end":48,"column_start":7,"column_end":10},"name":"Val","qualname":"::trace::TraceReader::Val","value":"type Val;","parent":{"krate":0,"index":3011},"children":[],"decl_id":null,"docs":" Values associated with keys.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3014},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":232070,"byte_end":232074,"line_start":50,"line_end":50,"column_start":7,"column_end":11},"name":"Time","qualname":"::trace::TraceReader::Time","value":"type Time;","parent":{"krate":0,"index":3011},"children":[],"decl_id":null,"docs":" Timestamps associated with updates\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3015},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":232106,"byte_end":232107,"line_start":52,"line_end":52,"column_start":7,"column_end":8},"name":"R","qualname":"::trace::TraceReader::R","value":"type R;","parent":{"krate":0,"index":3011},"children":[],"decl_id":null,"docs":" Associated update.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3016},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":232169,"byte_end":232174,"line_start":55,"line_end":55,"column_start":7,"column_end":12},"name":"Batch","qualname":"::trace::TraceReader::Batch","value":"type Batch: BatchReader<Self::Key, Self::Val, Self::Time, Self::R>+Clone+'static;","parent":{"krate":0,"index":3011},"children":[],"decl_id":null,"docs":" The type of an immutable collection of updates.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3017},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":232311,"byte_end":232317,"line_start":58,"line_end":58,"column_start":7,"column_end":13},"name":"Cursor","qualname":"::trace::TraceReader::Cursor","value":"type Cursor: Cursor<Self::Key, Self::Val, Self::Time, Self::R>;","parent":{"krate":0,"index":3011},"children":[],"decl_id":null,"docs":" The type used to enumerate the collections contents.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3018},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":232435,"byte_end":232441,"line_start":61,"line_end":61,"column_start":5,"column_end":11},"name":"cursor","qualname":"::trace::TraceReader::cursor","value":"fn (&mut self) -> (Self::Cursor,\n <Self::Cursor as Cursor<Self::Key, Self::Val, Self::Time, Self::R>>::Storage)","parent":{"krate":0,"index":3011},"children":[],"decl_id":null,"docs":" Provides a cursor over updates contained in the trace.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3019},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":233305,"byte_end":233319,"line_start":77,"line_end":77,"column_start":5,"column_end":19},"name":"cursor_through","qualname":"::trace::TraceReader::cursor_through","value":"fn (&mut self, upper: &[Self::Time]) -> Option<(Self::Cursor,\n        <Self::Cursor as\n        Cursor<Self::Key, Self::Val, Self::Time, Self::R>>::Storage)>","parent":{"krate":0,"index":3011},"children":[],"decl_id":null,"docs":" Acquires a cursor to the restriction of the collection's contents to updates at times not greater or\n equal to an element of `upper`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3020},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":233956,"byte_end":233966,"line_start":85,"line_end":85,"column_start":5,"column_end":15},"name":"advance_by","qualname":"::trace::TraceReader::advance_by","value":"fn (&mut self, frontier: &[Self::Time]) -> ()","parent":{"krate":0,"index":3011},"children":[],"decl_id":null,"docs":" Advances the frontier of times the collection must be correctly accumulable through.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3021},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":234362,"byte_end":234378,"line_start":92,"line_end":92,"column_start":5,"column_end":21},"name":"advance_frontier","qualname":"::trace::TraceReader::advance_frontier","value":"fn (&mut self) -> &[Self::Time]","parent":{"krate":0,"index":3011},"children":[],"decl_id":null,"docs":" Reports the frontier from which all time comparisions should be accurate.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3022},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":235025,"byte_end":235042,"line_start":102,"line_end":102,"column_start":5,"column_end":22},"name":"distinguish_since","qualname":"::trace::TraceReader::distinguish_since","value":"fn (&mut self, frontier: &[Self::Time]) -> ()","parent":{"krate":0,"index":3011},"children":[],"decl_id":null,"docs":" Advances the frontier that may be used in `cursor_through`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3023},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":235546,"byte_end":235566,"line_start":110,"line_end":110,"column_start":5,"column_end":25},"name":"distinguish_frontier","qualname":"::trace::TraceReader::distinguish_frontier","value":"fn (&mut self) -> &[Self::Time]","parent":{"krate":0,"index":3011},"children":[],"decl_id":null,"docs":" Reports the frontier from which the collection may be subsetted.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3024},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":236017,"byte_end":236028,"line_start":117,"line_end":117,"column_start":5,"column_end":16},"name":"map_batches","qualname":"::trace::TraceReader::map_batches","value":"fn <F> (&mut self, f: F) -> ()","parent":{"krate":0,"index":3011},"children":[],"decl_id":null,"docs":" Maps logic across the non-empty sequence of batches in the trace.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3026},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":236136,"byte_end":236146,"line_start":122,"line_end":122,"column_start":5,"column_end":15},"name":"read_upper","qualname":"::trace::TraceReader::read_upper","value":"fn (&mut self, target: &mut Antichain<Self::Time>) -> ()","parent":{"krate":0,"index":3011},"children":[],"decl_id":null,"docs":" Reads the upper frontier of committed times.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3028},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":236714,"byte_end":236727,"line_start":142,"line_end":142,"column_start":8,"column_end":21},"name":"advance_upper","qualname":"::trace::TraceReader::advance_upper","value":"fn (&mut self, upper: &mut Antichain<Self::Time>) -> ()","parent":{"krate":0,"index":3011},"children":[],"decl_id":null,"docs":" Advances `upper` by any empty batches.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3030},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":237481,"byte_end":237486,"line_start":163,"line_end":163,"column_start":11,"column_end":16},"name":"Trace","qualname":"::trace::Trace","value":"Trace: TraceReader","parent":null,"children":[{"krate":0,"index":3031},{"krate":0,"index":3032},{"krate":0,"index":3033},{"krate":0,"index":3034}],"decl_id":null,"docs":" An append-only collection of `(key, val, time, diff)` tuples.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3031},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":237627,"byte_end":237630,"line_start":167,"line_end":167,"column_start":5,"column_end":8},"name":"new","qualname":"::trace::Trace::new","value":"fn (info: ::timely::dataflow::operators::generic::OperatorInfo, logging: Option<::logging::Logger>, activator: Option<timely::scheduling::activate::Activator>) -> Self","parent":{"krate":0,"index":3030},"children":[],"decl_id":null,"docs":" Allocates a new empty trace.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3032},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":237858,"byte_end":237863,"line_start":174,"line_end":174,"column_start":5,"column_end":10},"name":"exert","qualname":"::trace::Trace::exert","value":"fn (&mut self, effort: &mut isize) -> ()","parent":{"krate":0,"index":3030},"children":[],"decl_id":null,"docs":"\tExert merge effort, even without updates.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3033},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":238499,"byte_end":238505,"line_start":184,"line_end":184,"column_start":5,"column_end":11},"name":"insert","qualname":"::trace::Trace::insert","value":"fn (&mut self, batch: Self::Batch) -> ()","parent":{"krate":0,"index":3030},"children":[],"decl_id":null,"docs":" Introduces a batch of updates to the trace.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3034},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":238805,"byte_end":238810,"line_start":190,"line_end":190,"column_start":5,"column_end":10},"name":"close","qualname":"::trace::Trace::close","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":3030},"children":[],"decl_id":null,"docs":" Introduces an empty batch concluding the trace.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3035},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":239328,"byte_end":239339,"line_start":199,"line_end":199,"column_start":11,"column_end":22},"name":"BatchReader","qualname":"::trace::BatchReader","value":"BatchReader<K, V, T, R>","parent":null,"children":[{"krate":0,"index":3040},{"krate":0,"index":3041},{"krate":0,"index":3042},{"krate":0,"index":3043},{"krate":0,"index":3044},{"krate":0,"index":3045},{"krate":0,"index":3046}],"decl_id":null,"docs":" A batch of updates whose contents may be read.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3040},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":239447,"byte_end":239453,"line_start":202,"line_end":202,"column_start":7,"column_end":13},"name":"Cursor","qualname":"::trace::BatchReader::Cursor","value":"type Cursor: Cursor<K, V, T, R, Storage=Self>;","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" The type used to enumerate the batch's contents.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3041},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":239541,"byte_end":239547,"line_start":204,"line_end":204,"column_start":5,"column_end":11},"name":"cursor","qualname":"::trace::BatchReader::cursor","value":"fn (&self) -> Self::Cursor","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" Acquires a cursor to the batch's contents.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3042},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":239617,"byte_end":239620,"line_start":206,"line_end":206,"column_start":5,"column_end":8},"name":"len","qualname":"::trace::BatchReader::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" The number of updates in the batch.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3043},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":239675,"byte_end":239683,"line_start":208,"line_end":208,"column_start":5,"column_end":13},"name":"is_empty","qualname":"::trace::BatchReader::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" True if the batch is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3044},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":239777,"byte_end":239788,"line_start":210,"line_end":210,"column_start":5,"column_end":16},"name":"description","qualname":"::trace::BatchReader::description","value":"fn (&self) -> &Description<T>","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" Describes the times of the updates in the batch.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3045},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":239896,"byte_end":239901,"line_start":213,"line_end":213,"column_start":5,"column_end":10},"name":"lower","qualname":"::trace::BatchReader::lower","value":"fn (&self) -> &[T]","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" All times in the batch are greater or equal to an element of `lower`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3046},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":240032,"byte_end":240037,"line_start":215,"line_end":215,"column_start":5,"column_end":10},"name":"upper","qualname":"::trace::BatchReader::upper","value":"fn (&self) -> &[T]","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" All times in the batch are not greater or equal to any element of `upper`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3047},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":240137,"byte_end":240142,"line_start":219,"line_end":219,"column_start":11,"column_end":16},"name":"Batch","qualname":"::trace::Batch","value":"Batch<K, V, T, R>: BatchReader<K, V, T, R>","parent":null,"children":[{"krate":0,"index":3052},{"krate":0,"index":3053},{"krate":0,"index":3054},{"krate":0,"index":3055},{"krate":0,"index":3056}],"decl_id":null,"docs":" An immutable collection of updates.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3052},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":240284,"byte_end":240291,"line_start":221,"line_end":221,"column_start":7,"column_end":14},"name":"Batcher","qualname":"::trace::Batch::Batcher","value":"type Batcher: Batcher<K, V, T, R, Self>;","parent":{"krate":0,"index":3047},"children":[],"decl_id":null,"docs":" A type used to assemble batches from disordered updates.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3053},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":240394,"byte_end":240401,"line_start":223,"line_end":223,"column_start":7,"column_end":14},"name":"Builder","qualname":"::trace::Batch::Builder","value":"type Builder: Builder<K, V, T, R, Self>;","parent":{"krate":0,"index":3047},"children":[],"decl_id":null,"docs":" A type used to assemble batches from ordered update sequences.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3054},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":240485,"byte_end":240491,"line_start":225,"line_end":225,"column_start":7,"column_end":13},"name":"Merger","qualname":"::trace::Batch::Merger","value":"type Merger: Merger<K, V, T, R, Self>;","parent":{"krate":0,"index":3047},"children":[],"decl_id":null,"docs":" A type used to progressively merge batches.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3055},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":240843,"byte_end":240854,"line_start":232,"line_end":232,"column_start":5,"column_end":16},"name":"begin_merge","qualname":"::trace::Batch::begin_merge","value":"fn (&self, other: &Self) -> Self::Merger","parent":{"krate":0,"index":3047},"children":[],"decl_id":null,"docs":" Initiates the merging of consecutive batches.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3056},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":240939,"byte_end":240944,"line_start":236,"line_end":236,"column_start":5,"column_end":10},"name":"empty","qualname":"::trace::Batch::empty","value":"fn (lower: &[T], upper: &[T], since: &[T]) -> Self","parent":{"krate":0,"index":3047},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3057},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":241116,"byte_end":241123,"line_start":242,"line_end":242,"column_start":11,"column_end":18},"name":"Batcher","qualname":"::trace::Batcher","value":"Batcher<K, V, T, R, Output: Batch<K, V, T, R>>","parent":null,"children":[{"krate":0,"index":3063},{"krate":0,"index":3064},{"krate":0,"index":3065},{"krate":0,"index":3066}],"decl_id":null,"docs":" Functionality for collecting and batching updates.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3063},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":241205,"byte_end":241208,"line_start":244,"line_end":244,"column_start":5,"column_end":8},"name":"new","qualname":"::trace::Batcher::new","value":"fn () -> Self","parent":{"krate":0,"index":3057},"children":[],"decl_id":null,"docs":" Allocates a new empty batcher.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3064},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":241281,"byte_end":241291,"line_start":246,"line_end":246,"column_start":5,"column_end":15},"name":"push_batch","qualname":"::trace::Batcher::push_batch","value":"fn (&mut self, batch: &mut Vec<((K, V), T, R)>) -> ()","parent":{"krate":0,"index":3057},"children":[],"decl_id":null,"docs":" Adds an unordered batch of elements to the batcher.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3065},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":241413,"byte_end":241417,"line_start":248,"line_end":248,"column_start":5,"column_end":9},"name":"seal","qualname":"::trace::Batcher::seal","value":"fn (&mut self, upper: &[T]) -> Output","parent":{"krate":0,"index":3057},"children":[],"decl_id":null,"docs":" Returns all updates not greater or equal to an element of `upper`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3066},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":241516,"byte_end":241524,"line_start":250,"line_end":250,"column_start":5,"column_end":13},"name":"frontier","qualname":"::trace::Batcher::frontier","value":"fn (&mut self) -> &[T]","parent":{"krate":0,"index":3057},"children":[],"decl_id":null,"docs":" Returns the lower envelope of contained update times.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3067},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":241628,"byte_end":241635,"line_start":254,"line_end":254,"column_start":11,"column_end":18},"name":"Builder","qualname":"::trace::Builder","value":"Builder<K, V, T, R, Output: Batch<K, V, T, R>>","parent":null,"children":[{"krate":0,"index":3073},{"krate":0,"index":3074},{"krate":0,"index":3075},{"krate":0,"index":3076},{"krate":0,"index":3078}],"decl_id":null,"docs":" Functionality for building batches from ordered update sequences.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3073},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":241714,"byte_end":241717,"line_start":256,"line_end":256,"column_start":5,"column_end":8},"name":"new","qualname":"::trace::Builder::new","value":"fn () -> Self","parent":{"krate":0,"index":3067},"children":[],"decl_id":null,"docs":" Allocates an empty builder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3074},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":241785,"byte_end":241798,"line_start":258,"line_end":258,"column_start":5,"column_end":18},"name":"with_capacity","qualname":"::trace::Builder::with_capacity","value":"fn (cap: usize) -> Self","parent":{"krate":0,"index":3067},"children":[],"decl_id":null,"docs":" Allocates an empty builder with some capacity.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3075},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":241859,"byte_end":241863,"line_start":260,"line_end":260,"column_start":5,"column_end":9},"name":"push","qualname":"::trace::Builder::push","value":"fn (&mut self, element: (K, V, T, R)) -> ()","parent":{"krate":0,"index":3067},"children":[],"decl_id":null,"docs":" Adds an element to the batch.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3076},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":241959,"byte_end":241965,"line_start":262,"line_end":262,"column_start":5,"column_end":11},"name":"extend","qualname":"::trace::Builder::extend","value":"fn <I> (&mut self, iter: I) -> ()","parent":{"krate":0,"index":3067},"children":[],"decl_id":null,"docs":" Adds an ordered sequence of elements to the batch.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3078},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":242111,"byte_end":242115,"line_start":266,"line_end":266,"column_start":5,"column_end":9},"name":"done","qualname":"::trace::Builder::done","value":"fn (self, lower: &[T], upper: &[T], since: &[T]) -> Output","parent":{"krate":0,"index":3067},"children":[],"decl_id":null,"docs":" Completes building and returns the batch.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3079},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":242221,"byte_end":242227,"line_start":270,"line_end":270,"column_start":11,"column_end":17},"name":"Merger","qualname":"::trace::Merger","value":"Merger<K, V, T, R, Output: Batch<K, V, T, R>>","parent":null,"children":[{"krate":0,"index":3085},{"krate":0,"index":3086},{"krate":0,"index":3087}],"decl_id":null,"docs":" Represents a merge in progress.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3085},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":242330,"byte_end":242333,"line_start":272,"line_end":272,"column_start":5,"column_end":8},"name":"new","qualname":"::trace::Merger::new","value":"fn (source1: &Output, source2: &Output) -> Self","parent":{"krate":0,"index":3079},"children":[],"decl_id":null,"docs":" Creates a new merger to merge the supplied batches.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3086},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":242573,"byte_end":242577,"line_start":277,"line_end":277,"column_start":5,"column_end":9},"name":"work","qualname":"::trace::Merger::work","value":"fn (&mut self, source1: &Output, source2: &Output, frontier: &Option<Vec<T>>, fuel: &mut isize) -> ()","parent":{"krate":0,"index":3079},"children":[],"decl_id":null,"docs":" Perform some amount of work, decrementing `fuel`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3087},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":242867,"byte_end":242871,"line_start":283,"line_end":283,"column_start":5,"column_end":9},"name":"done","qualname":"::trace::Merger::done","value":"fn (self) -> Output","parent":{"krate":0,"index":3079},"children":[],"decl_id":null,"docs":" Extracts merged results.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":3088},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":242960,"byte_end":242976,"line_start":288,"line_end":288,"column_start":9,"column_end":25},"name":"rc_blanket_impls","qualname":"::trace::rc_blanket_impls","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","parent":null,"children":[{"krate":0,"index":3089},{"krate":0,"index":3090},{"krate":0,"index":3098},{"krate":0,"index":3108},{"krate":0,"index":3116},{"krate":0,"index":3123},{"krate":0,"index":3144},{"krate":0,"index":3153},{"krate":0,"index":3160},{"krate":0,"index":3170},{"krate":0,"index":3177},{"krate":0,"index":3187},{"krate":0,"index":3194}],"decl_id":null,"docs":" Blanket implementations for reference counted batches.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3108},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":243669,"byte_end":243682,"line_start":310,"line_end":310,"column_start":13,"column_end":26},"name":"RcBatchCursor","qualname":"::trace::rc_blanket_impls::RcBatchCursor","value":"RcBatchCursor {  }","parent":null,"children":[{"krate":0,"index":3114},{"krate":0,"index":3115}],"decl_id":null,"docs":" Wrapper to provide cursor to nested scope.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3153},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":245664,"byte_end":245673,"line_start":357,"line_end":357,"column_start":13,"column_end":22},"name":"RcBatcher","qualname":"::trace::rc_blanket_impls::RcBatcher","value":"RcBatcher {  }","parent":null,"children":[{"krate":0,"index":3159}],"decl_id":null,"docs":" Wrapper type for batching reference counted batches.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3170},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":246266,"byte_end":246275,"line_start":368,"line_end":368,"column_start":13,"column_end":22},"name":"RcBuilder","qualname":"::trace::rc_blanket_impls::RcBuilder","value":"RcBuilder {  }","parent":null,"children":[{"krate":0,"index":3176}],"decl_id":null,"docs":" Wrapper type for building reference counted batches.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3187},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":246957,"byte_end":246965,"line_start":379,"line_end":379,"column_start":13,"column_end":21},"name":"RcMerger","qualname":"::trace::rc_blanket_impls::RcMerger","value":"RcMerger {  }","parent":null,"children":[{"krate":0,"index":3193}],"decl_id":null,"docs":" Wrapper type for merging reference counted batches.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":3203},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":247531,"byte_end":247555,"line_start":391,"line_end":391,"column_start":9,"column_end":33},"name":"abomonated_blanket_impls","qualname":"::trace::abomonated_blanket_impls","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","parent":null,"children":[{"krate":0,"index":3204},{"krate":0,"index":3205},{"krate":0,"index":3208},{"krate":0,"index":3209},{"krate":0,"index":3217},{"krate":0,"index":3227},{"krate":0,"index":3235},{"krate":0,"index":3242},{"krate":0,"index":3263},{"krate":0,"index":3272},{"krate":0,"index":3279},{"krate":0,"index":3289},{"krate":0,"index":3296},{"krate":0,"index":3306},{"krate":0,"index":3313}],"decl_id":null,"docs":" Blanket implementations for reference counted batches.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3227},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":248387,"byte_end":248408,"line_start":416,"line_end":416,"column_start":13,"column_end":34},"name":"AbomonatedBatchCursor","qualname":"::trace::abomonated_blanket_impls::AbomonatedBatchCursor","value":"AbomonatedBatchCursor {  }","parent":null,"children":[{"krate":0,"index":3233},{"krate":0,"index":3234}],"decl_id":null,"docs":" Wrapper to provide cursor to nested scope.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3272},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":250496,"byte_end":250513,"line_start":463,"line_end":463,"column_start":13,"column_end":30},"name":"AbomonatedBatcher","qualname":"::trace::abomonated_blanket_impls::AbomonatedBatcher","value":"AbomonatedBatcher {  }","parent":null,"children":[{"krate":0,"index":3278}],"decl_id":null,"docs":" Wrapper type for batching reference counted batches.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3289},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":251349,"byte_end":251366,"line_start":479,"line_end":479,"column_start":13,"column_end":30},"name":"AbomonatedBuilder","qualname":"::trace::abomonated_blanket_impls::AbomonatedBuilder","value":"AbomonatedBuilder {  }","parent":null,"children":[{"krate":0,"index":3295}],"decl_id":null,"docs":" Wrapper type for building reference counted batches.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3306},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":252299,"byte_end":252315,"line_start":495,"line_end":495,"column_start":13,"column_end":29},"name":"AbomonatedMerger","qualname":"::trace::abomonated_blanket_impls::AbomonatedMerger","value":"AbomonatedMerger {  }","parent":null,"children":[{"krate":0,"index":3312}],"decl_id":null,"docs":" Wrapper type for merging reference counted batches.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":3322},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"input","qualname":"::input","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","parent":null,"children":[{"krate":0,"index":3323},{"krate":0,"index":3324},{"krate":0,"index":3325},{"krate":0,"index":3326},{"krate":0,"index":3327},{"krate":0,"index":3328},{"krate":0,"index":3329},{"krate":0,"index":3332},{"krate":0,"index":3342},{"krate":0,"index":3343},{"krate":0,"index":3356},{"krate":0,"index":3363},{"krate":0,"index":3368},{"krate":0,"index":3383}],"decl_id":null,"docs":" Input sessions for simplified collection updates.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3332},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":425264,"byte_end":425269,"line_start":19,"line_end":19,"column_start":11,"column_end":16},"name":"Input","qualname":"::input::Input","value":"Input: TimelyInput","parent":null,"children":[{"krate":0,"index":3333},{"krate":0,"index":3336},{"krate":0,"index":3338}],"decl_id":null,"docs":" Create a new collection and input handle to control the collection.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3333},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":426173,"byte_end":426187,"line_start":49,"line_end":49,"column_start":8,"column_end":22},"name":"new_collection","qualname":"::input::Input::new_collection","value":"fn <D, R> (&mut self) -> (InputSession<<Self as ScopeParent>::Timestamp, D, R>, Collection<Self, D, R>)","parent":{"krate":0,"index":3332},"children":[],"decl_id":null,"docs":" Create a new collection and input handle to subsequently control the collection.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3336},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":427198,"byte_end":427217,"line_start":80,"line_end":80,"column_start":8,"column_end":27},"name":"new_collection_from","qualname":"::input::Input::new_collection_from","value":"fn <I> (&mut self, data: I) -> (InputSession<<Self as ScopeParent>::Timestamp, I::Item, isize>,\n Collection<Self, I::Item, isize>)","parent":{"krate":0,"index":3332},"children":[],"decl_id":null,"docs":" Create a new collection and input handle from initial data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3338},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":428349,"byte_end":428372,"line_start":111,"line_end":111,"column_start":8,"column_end":31},"name":"new_collection_from_raw","qualname":"::input::Input::new_collection_from_raw","value":"fn <D, R, I> (&mut self, data: I) -> (InputSession<<Self as ScopeParent>::Timestamp, D, R>, Collection<Self, D, R>)","parent":{"krate":0,"index":3332},"children":[],"decl_id":null,"docs":" Create a new collection and input handle from initial data.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3356},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":431224,"byte_end":431236,"line_start":189,"line_end":189,"column_start":12,"column_end":24},"name":"InputSession","qualname":"::input::InputSession","value":"InputSession {  }","parent":null,"children":[{"krate":0,"index":3360},{"krate":0,"index":3361},{"krate":0,"index":3362}],"decl_id":null,"docs":" An input session wrapping a single timely dataflow capability.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3366},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":431458,"byte_end":431464,"line_start":197,"line_end":197,"column_start":9,"column_end":15},"name":"insert","qualname":"<InputSession<T, D, isize>>::insert","value":"fn (&mut self, element: D) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds an element to the collection.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3367},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":431570,"byte_end":431576,"line_start":199,"line_end":199,"column_start":9,"column_end":15},"name":"remove","qualname":"<InputSession<T, D, isize>>::remove","value":"fn (&mut self, element: D) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes an element from the collection.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3372},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":432383,"byte_end":432396,"line_start":219,"line_end":219,"column_start":12,"column_end":25},"name":"to_collection","qualname":"<InputSession<T, D, R>>::to_collection","value":"fn <G> (&mut self, scope: &mut G) -> Collection<G, D, R>","parent":null,"children":[],"decl_id":null,"docs":" Introduces a handle as collection.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3374},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":432656,"byte_end":432659,"line_start":229,"line_end":229,"column_start":12,"column_end":15},"name":"new","qualname":"<InputSession<T, D, R>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new input handle.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3375},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":432926,"byte_end":432930,"line_start":239,"line_end":239,"column_start":9,"column_end":13},"name":"from","qualname":"<InputSession<T, D, R>>::from","value":"fn (handle: Handle<T, (D, T, R)>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new session from a reference to an input handle.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3376},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":433124,"byte_end":433130,"line_start":248,"line_end":248,"column_start":9,"column_end":15},"name":"update","qualname":"<InputSession<T, D, R>>::update","value":"fn (&mut self, element: D, change: R) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds to the weight of an element in the collection.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3377},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":433646,"byte_end":433655,"line_start":260,"line_end":260,"column_start":12,"column_end":21},"name":"update_at","qualname":"<InputSession<T, D, R>>::update_at","value":"fn (&mut self, element: D, time: T, change: R) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds to the weight of an element in the collection at a future time.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3378},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":434597,"byte_end":434602,"line_start":277,"line_end":277,"column_start":9,"column_end":14},"name":"flush","qualname":"<InputSession<T, D, R>>::flush","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forces buffered data into the timely dataflow input, and advances its time to match that of the session.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3379},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":435116,"byte_end":435126,"line_start":289,"line_end":289,"column_start":9,"column_end":19},"name":"advance_to","qualname":"<InputSession<T, D, R>>::advance_to","value":"fn (&mut self, time: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Advances the logical time for future records.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3380},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":435318,"byte_end":435323,"line_start":296,"line_end":296,"column_start":9,"column_end":14},"name":"epoch","qualname":"<InputSession<T, D, R>>::epoch","value":"fn (&self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Reveals the current time of the session.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3381},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":435406,"byte_end":435410,"line_start":298,"line_end":298,"column_start":9,"column_end":13},"name":"time","qualname":"<InputSession<T, D, R>>::time","value":"fn (&self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Reveals the current time of the session.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3382},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":435518,"byte_end":435523,"line_start":301,"line_end":301,"column_start":9,"column_end":14},"name":"close","qualname":"<InputSession<T, D, R>>::close","value":"fn (self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Closes the input, flushing and sealing the wrapped timely input.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":3388},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"difference","qualname":"::difference","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","parent":null,"children":[{"krate":0,"index":3389},{"krate":0,"index":3392},{"krate":0,"index":3393},{"krate":0,"index":3394},{"krate":0,"index":3397},{"krate":0,"index":3399},{"krate":0,"index":3401},{"krate":0,"index":3403},{"krate":0,"index":3405},{"krate":0,"index":3407},{"krate":0,"index":3409},{"krate":0,"index":3411},{"krate":0,"index":3413},{"krate":0,"index":3415},{"krate":0,"index":3417},{"krate":0,"index":3419},{"krate":0,"index":3421},{"krate":0,"index":3423},{"krate":0,"index":3424},{"krate":0,"index":3426},{"krate":0,"index":3427},{"krate":0,"index":3437},{"krate":0,"index":3438},{"krate":0,"index":3468},{"krate":0,"index":3469}],"decl_id":null,"docs":" A type that can be treated as a difference.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3394},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":437038,"byte_end":437047,"line_start":27,"line_end":27,"column_start":11,"column_end":20},"name":"Semigroup","qualname":"::difference::Semigroup","value":"Semigroup: for<'a> AddAssign<&'a Self> + ::std::marker::Sized + Data + Clone","parent":null,"children":[{"krate":0,"index":3396}],"decl_id":null,"docs":" A type with addition and a test for zero.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3396},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":437531,"byte_end":437538,"line_start":36,"line_end":36,"column_start":5,"column_end":12},"name":"is_zero","qualname":"::difference::Semigroup::is_zero","value":"fn (&self) -> bool","parent":{"krate":0,"index":3394},"children":[],"decl_id":null,"docs":" Returns true if the element is the additive identity.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3409},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":438098,"byte_end":438104,"line_start":65,"line_end":65,"column_start":11,"column_end":17},"name":"Monoid","qualname":"::difference::Monoid","value":"Monoid: Semigroup","parent":null,"children":[{"krate":0,"index":3410}],"decl_id":null,"docs":" A semigroup with an explicit zero element.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3410},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":438182,"byte_end":438186,"line_start":67,"line_end":67,"column_start":5,"column_end":9},"name":"zero","qualname":"::difference::Monoid::zero","value":"fn () -> Self","parent":{"krate":0,"index":3409},"children":[],"decl_id":null,"docs":" A zero element under the semigroup addition operator.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3423},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":438839,"byte_end":438846,"line_start":100,"line_end":100,"column_start":11,"column_end":18},"name":"Abelian","qualname":"::difference::Abelian","value":"Abelian: Monoid + Neg<Output = Self>","parent":null,"children":[],"decl_id":null,"docs":" A `Monoid` with negation.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3988},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":439625,"byte_end":439632,"line_start":116,"line_end":116,"column_start":13,"column_end":20},"name":"Present","qualname":"::difference::present::Present","value":"","parent":null,"children":[],"decl_id":null,"docs":" A zero-sized difference that indicates the presence of a record.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4036},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":440563,"byte_end":440571,"line_start":147,"line_end":147,"column_start":13,"column_end":21},"name":"DiffPair","qualname":"::difference::pair::DiffPair","value":"DiffPair { element1, element2 }","parent":null,"children":[{"krate":0,"index":4039},{"krate":0,"index":4040}],"decl_id":null,"docs":" The difference defined by a pair of difference elements.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4039},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":440625,"byte_end":440633,"line_start":149,"line_end":149,"column_start":7,"column_end":15},"name":"element1","qualname":"::difference::pair::DiffPair::element1","value":"R1","parent":{"krate":0,"index":4036},"children":[],"decl_id":null,"docs":" The first element in the pair.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4040},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":440683,"byte_end":440691,"line_start":151,"line_end":151,"column_start":7,"column_end":15},"name":"element2","qualname":"::difference::pair::DiffPair::element2","value":"R2","parent":{"krate":0,"index":4036},"children":[],"decl_id":null,"docs":" The second element in the pair.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3447},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":440802,"byte_end":440805,"line_start":156,"line_end":156,"column_start":20,"column_end":23},"name":"new","qualname":"<DiffPair<R1, R2>>::new","value":"fn (elt1: R1, elt2: R2) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Diff pair from two elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":440785,"byte_end":440794,"line_start":156,"line_end":156,"column_start":3,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":4145},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":442611,"byte_end":442621,"line_start":218,"line_end":218,"column_start":13,"column_end":23},"name":"DiffVector","qualname":"::difference::vector::DiffVector","value":"DiffVector {  }","parent":null,"children":[{"krate":0,"index":4147}],"decl_id":null,"docs":" A variable number of accumulable updates.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3477},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":442740,"byte_end":442743,"line_start":225,"line_end":225,"column_start":10,"column_end":13},"name":"new","qualname":"<DiffVector<R>>::new","value":"fn (vec: Vec<R>) -> DiffVector<R>","parent":null,"children":[],"decl_id":null,"docs":" Create new DiffVector from Vec\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":442713,"byte_end":442730,"line_start":224,"line_end":224,"column_start":3,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":3508},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"collection","qualname":"::collection","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","parent":null,"children":[{"krate":0,"index":3509},{"krate":0,"index":3510},{"krate":0,"index":3511},{"krate":0,"index":3512},{"krate":0,"index":3513},{"krate":0,"index":3514},{"krate":0,"index":3517},{"krate":0,"index":3520},{"krate":0,"index":3521},{"krate":0,"index":3524},{"krate":0,"index":3525},{"krate":0,"index":4232},{"krate":0,"index":4237},{"krate":0,"index":3526},{"krate":0,"index":3581},{"krate":0,"index":3582},{"krate":0,"index":3583},{"krate":0,"index":3591},{"krate":0,"index":3598},{"krate":0,"index":3603},{"krate":0,"index":3608}],"decl_id":null,"docs":" Types and traits associated with collections of data.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4232},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":446615,"byte_end":446625,"line_start":41,"line_end":41,"column_start":12,"column_end":22},"name":"Collection","qualname":"::collection::Collection","value":"Collection { inner }","parent":null,"children":[{"krate":0,"index":4236}],"decl_id":null,"docs":" A mutable collection of values of type `D`","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4236},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":446902,"byte_end":446907,"line_start":46,"line_end":46,"column_start":9,"column_end":14},"name":"inner","qualname":"::collection::Collection::inner","value":"timely::dataflow::Stream<G, (D, <G as timely::dataflow::ScopeParent>::Timestamp, R)>","parent":{"krate":0,"index":4232},"children":[],"decl_id":null,"docs":" The underlying timely dataflow stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3530},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":447461,"byte_end":447464,"line_start":56,"line_end":56,"column_start":12,"column_end":15},"name":"new","qualname":"<Collection<G, D, R>>::new","value":"fn (stream: Stream<G, (D, G::Timestamp, R)>) -> Collection<G, D, R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Collection from a timely dataflow stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3531},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":448131,"byte_end":448134,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"map","qualname":"<Collection<G, D, R>>::map","value":"fn <D2, L> (&self, mut logic: L) -> Collection<G, D2, R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new collection by applying the supplied function to each input element.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3535},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":449220,"byte_end":449232,"line_start":109,"line_end":109,"column_start":12,"column_end":24},"name":"map_in_place","qualname":"<Collection<G, D, R>>::map_in_place","value":"fn <L> (&self, mut logic: L) -> Collection<G, D, R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new collection by applying the supplied function to each input element.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3538},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":450241,"byte_end":450249,"line_start":136,"line_end":136,"column_start":12,"column_end":20},"name":"flat_map","qualname":"<Collection<G, D, R>>::flat_map","value":"fn <I, L> (&self, mut logic: L) -> Collection<G, I::Item, R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new collection by applying the supplied function to each input element and accumulating the results.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3543},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":451185,"byte_end":451191,"line_start":164,"line_end":164,"column_start":12,"column_end":18},"name":"filter","qualname":"<Collection<G, D, R>>::filter","value":"fn <L> (&self, mut logic: L) -> Collection<G, D, R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new collection containing those input records satisfying the supplied predicate.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3546},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":452304,"byte_end":452310,"line_start":197,"line_end":197,"column_start":12,"column_end":18},"name":"concat","qualname":"<Collection<G, D, R>>::concat","value":"fn (&self, other: &Collection<G, D, R>) -> Collection<G, D, R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new collection accumulating the contents of the two collections.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3547},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":453380,"byte_end":453391,"line_start":229,"line_end":229,"column_start":12,"column_end":23},"name":"concatenate","qualname":"<Collection<G, D, R>>::concatenate","value":"fn <I> (&self, sources: I) -> Collection<G, D, R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new collection accumulating the contents of the two collections.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3550},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":454500,"byte_end":454507,"line_start":262,"line_end":262,"column_start":12,"column_end":19},"name":"explode","qualname":"<Collection<G, D, R>>::explode","value":"fn <D2, R2, I, L> (&self, mut logic: L) -> Collection<G, D2, <R2 as Mul<R>>::Output>","parent":null,"children":[],"decl_id":null,"docs":" Replaces each record with another, with a new difference type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3557},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":455590,"byte_end":455595,"line_start":299,"line_end":299,"column_start":12,"column_end":17},"name":"enter","qualname":"<Collection<G, D, R>>::enter","value":"fn <'a, T> (&self, child: &Child<'a, G, T>) -> Collection<Child<'a, G, T>, D, R>","parent":null,"children":[],"decl_id":null,"docs":" Brings a Collection into a nested scope.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3561},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":456700,"byte_end":456708,"line_start":336,"line_end":336,"column_start":12,"column_end":20},"name":"enter_at","qualname":"<Collection<G, D, R>>::enter_at","value":"fn <'a, T, F> (&self, child: &Iterative<'a, G, T>, initial: F) -> Collection<Iterative<'a, G, T>, D, R>","parent":null,"children":[],"decl_id":null,"docs":" Brings a Collection into a nested scope, at varying times.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3567},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":457806,"byte_end":457811,"line_start":361,"line_end":361,"column_start":12,"column_end":17},"name":"delay","qualname":"<Collection<G, D, R>>::delay","value":"fn <F> (&self, func: F) -> Collection<G, D, R>","parent":null,"children":[],"decl_id":null,"docs":" Delays each difference by a supplied function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3571},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":459417,"byte_end":459424,"line_start":400,"line_end":400,"column_start":12,"column_end":19},"name":"inspect","qualname":"<Collection<G, D, R>>::inspect","value":"fn <F> (&self, func: F) -> Collection<G, D, R>","parent":null,"children":[],"decl_id":null,"docs":" Applies a supplied function to each update.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3573},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":460462,"byte_end":460475,"line_start":429,"line_end":429,"column_start":12,"column_end":25},"name":"inspect_batch","qualname":"<Collection<G, D, R>>::inspect_batch","value":"fn <F> (&self, func: F) -> Collection<G, D, R>","parent":null,"children":[],"decl_id":null,"docs":" Applies a supplied function to each batch of updates.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3575},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":460882,"byte_end":460887,"line_start":439,"line_end":439,"column_start":12,"column_end":17},"name":"probe","qualname":"<Collection<G, D, R>>::probe","value":"fn (&self) -> probe::Handle<G::Timestamp>","parent":null,"children":[],"decl_id":null,"docs":" Attaches a timely dataflow probe to the output of a Collection.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3576},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":461442,"byte_end":461452,"line_start":449,"line_end":449,"column_start":12,"column_end":22},"name":"probe_with","qualname":"<Collection<G, D, R>>::probe_with","value":"fn (&self, handle: &mut probe::Handle<G::Timestamp>) -> Collection<G, D, R>","parent":null,"children":[],"decl_id":null,"docs":" Attaches a timely dataflow probe to the output of a Collection.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3577},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":462564,"byte_end":462576,"line_start":479,"line_end":479,"column_start":12,"column_end":24},"name":"assert_empty","qualname":"<Collection<G, D, R>>::assert_empty","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Assert if the collection is ever non-empty.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3580},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":462950,"byte_end":462955,"line_start":490,"line_end":490,"column_start":12,"column_end":17},"name":"scope","qualname":"<Collection<G, D, R>>::scope","value":"fn (&self) -> G","parent":null,"children":[],"decl_id":null,"docs":" The scope containing the underlying timely dataflow stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3589},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":463934,"byte_end":463939,"line_start":527,"line_end":527,"column_start":12,"column_end":17},"name":"leave","qualname":"<Collection<Child, D, R>>::leave","value":"fn (&self) -> Collection<G, D, R>","parent":null,"children":[],"decl_id":null,"docs":" Returns the final value of a Collection from a nested scope to its containing scope.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3595},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":465157,"byte_end":465163,"line_start":564,"line_end":564,"column_start":12,"column_end":18},"name":"negate","qualname":"<Collection<G, D, R>>::negate","value":"fn (&self) -> Collection<G, D, R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new collection whose counts are the negation of those in the input.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3597},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":466351,"byte_end":466360,"line_start":599,"line_end":599,"column_start":12,"column_end":21},"name":"assert_eq","qualname":"<Collection<G, D, R>>::assert_eq","value":"fn (&self, other: &Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Assert if the collections are ever different.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3598},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":466651,"byte_end":466663,"line_start":611,"line_end":611,"column_start":11,"column_end":23},"name":"AsCollection","qualname":"::collection::AsCollection","value":"AsCollection<G: Scope, D: Data, R: Semigroup>","parent":null,"children":[{"krate":0,"index":3602}],"decl_id":null,"docs":" Conversion to a differential dataflow Collection.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3602},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":466771,"byte_end":466784,"line_start":613,"line_end":613,"column_start":8,"column_end":21},"name":"as_collection","qualname":"::collection::AsCollection::as_collection","value":"fn (&self) -> Collection<G, D, R>","parent":{"krate":0,"index":3598},"children":[],"decl_id":null,"docs":" Converts the type to a differential dataflow collection.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3608},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":467733,"byte_end":467744,"line_start":648,"line_end":648,"column_start":8,"column_end":19},"name":"concatenate","qualname":"::collection::concatenate","value":"fn <G, D, R, I> (scope: &mut G, iterator: I) -> Collection<G, D, R>","parent":null,"children":[],"decl_id":null,"docs":" Concatenates multiple collections.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":3614},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"logging","qualname":"::logging","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","parent":null,"children":[{"krate":0,"index":3615},{"krate":0,"index":3616},{"krate":0,"index":4242},{"krate":0,"index":4282},{"krate":0,"index":4280},{"krate":0,"index":4271},{"krate":0,"index":4269},{"krate":0,"index":4263},{"krate":0,"index":4261},{"krate":0,"index":4258},{"krate":0,"index":4284},{"krate":0,"index":4315},{"krate":0,"index":4313},{"krate":0,"index":4304},{"krate":0,"index":4302},{"krate":0,"index":4292},{"krate":0,"index":4290},{"krate":0,"index":4287},{"krate":0,"index":3620},{"krate":0,"index":4317},{"krate":0,"index":4348},{"krate":0,"index":4346},{"krate":0,"index":4337},{"krate":0,"index":4335},{"krate":0,"index":4325},{"krate":0,"index":4323},{"krate":0,"index":4320},{"krate":0,"index":3622},{"krate":0,"index":4350},{"krate":0,"index":4396},{"krate":0,"index":4394},{"krate":0,"index":4385},{"krate":0,"index":4383},{"krate":0,"index":4361},{"krate":0,"index":4359},{"krate":0,"index":4356},{"krate":0,"index":3624},{"krate":0,"index":4398},{"krate":0,"index":4434},{"krate":0,"index":4432},{"krate":0,"index":4423},{"krate":0,"index":4421},{"krate":0,"index":4407},{"krate":0,"index":4405},{"krate":0,"index":4402},{"krate":0,"index":3626},{"krate":0,"index":4436},{"krate":0,"index":4467},{"krate":0,"index":4465},{"krate":0,"index":4456},{"krate":0,"index":4454},{"krate":0,"index":4444},{"krate":0,"index":4442},{"krate":0,"index":4439},{"krate":0,"index":3628}],"decl_id":null,"docs":" Loggers and logging events for differential dataflow.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3615},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":468119,"byte_end":468125,"line_start":4,"line_end":4,"column_start":10,"column_end":16},"name":"Logger","qualname":"::logging::Logger","value":"::timely::logging::Logger<DifferentialEvent>","parent":null,"children":[],"decl_id":null,"docs":" Logger for differential dataflow events.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3616},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":468235,"byte_end":468241,"line_start":7,"line_end":7,"column_start":8,"column_end":14},"name":"enable","qualname":"::logging::enable","value":"fn <A, W> (worker: &mut timely::worker::Worker<A>, writer: W) -> Option<Box<dyn std::any::Any + 'static>>","parent":null,"children":[],"decl_id":null,"docs":" Enables logging of differential dataflow events.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4243},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":468892,"byte_end":468897,"line_start":23,"line_end":23,"column_start":5,"column_end":10},"name":"Batch","qualname":"::logging::DifferentialEvent::Batch","value":"DifferentialEvent::Batch(BatchEvent)","parent":{"krate":0,"index":4242},"children":[],"decl_id":null,"docs":" Batch creation.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4246},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":468952,"byte_end":468957,"line_start":25,"line_end":25,"column_start":5,"column_end":10},"name":"Merge","qualname":"::logging::DifferentialEvent::Merge","value":"DifferentialEvent::Merge(MergeEvent)","parent":{"krate":0,"index":4242},"children":[],"decl_id":null,"docs":" Merge start and stop events.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4249},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":469017,"byte_end":469021,"line_start":27,"line_end":27,"column_start":5,"column_end":9},"name":"Drop","qualname":"::logging::DifferentialEvent::Drop","value":"DifferentialEvent::Drop(DropEvent)","parent":{"krate":0,"index":4242},"children":[],"decl_id":null,"docs":" Batch dropped when trace dropped.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4252},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":469082,"byte_end":469096,"line_start":29,"line_end":29,"column_start":5,"column_end":19},"name":"MergeShortfall","qualname":"::logging::DifferentialEvent::MergeShortfall","value":"DifferentialEvent::MergeShortfall(MergeShortfall)","parent":{"krate":0,"index":4242},"children":[],"decl_id":null,"docs":" A merge failed to complete in time.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4255},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":469147,"byte_end":469157,"line_start":31,"line_end":31,"column_start":5,"column_end":15},"name":"TraceShare","qualname":"::logging::DifferentialEvent::TraceShare","value":"DifferentialEvent::TraceShare(TraceShare)","parent":{"krate":0,"index":4242},"children":[],"decl_id":null,"docs":" Trace sharing event.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4242},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":468844,"byte_end":468861,"line_start":21,"line_end":21,"column_start":10,"column_end":27},"name":"DifferentialEvent","qualname":"::logging::DifferentialEvent","value":"DifferentialEvent::{Batch, Merge, Drop, MergeShortfall, TraceShare}","parent":null,"children":[{"krate":0,"index":4243},{"krate":0,"index":4246},{"krate":0,"index":4249},{"krate":0,"index":4252},{"krate":0,"index":4255}],"decl_id":null,"docs":" Possible different differential events.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4284},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":469300,"byte_end":469310,"line_start":36,"line_end":36,"column_start":12,"column_end":22},"name":"BatchEvent","qualname":"::logging::BatchEvent","value":"BatchEvent { operator, length }","parent":null,"children":[{"krate":0,"index":4285},{"krate":0,"index":4286}],"decl_id":null,"docs":" Either the start or end of a merge event.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4285},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":469350,"byte_end":469358,"line_start":38,"line_end":38,"column_start":9,"column_end":17},"name":"operator","qualname":"::logging::BatchEvent::operator","value":"usize","parent":{"krate":0,"index":4284},"children":[],"decl_id":null,"docs":" Operator identifier.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4286},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":469409,"byte_end":469415,"line_start":40,"line_end":40,"column_start":9,"column_end":15},"name":"length","qualname":"::logging::BatchEvent::length","value":"usize","parent":{"krate":0,"index":4284},"children":[],"decl_id":null,"docs":" Which order of magnitude.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4317},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":469666,"byte_end":469675,"line_start":48,"line_end":48,"column_start":12,"column_end":21},"name":"DropEvent","qualname":"::logging::DropEvent","value":"DropEvent { operator, length }","parent":null,"children":[{"krate":0,"index":4318},{"krate":0,"index":4319}],"decl_id":null,"docs":" Either the start or end of a merge event.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4318},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":469715,"byte_end":469723,"line_start":50,"line_end":50,"column_start":9,"column_end":17},"name":"operator","qualname":"::logging::DropEvent::operator","value":"usize","parent":{"krate":0,"index":4317},"children":[],"decl_id":null,"docs":" Operator identifier.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4319},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":469774,"byte_end":469780,"line_start":52,"line_end":52,"column_start":9,"column_end":15},"name":"length","qualname":"::logging::DropEvent::length","value":"usize","parent":{"krate":0,"index":4317},"children":[],"decl_id":null,"docs":" Which order of magnitude.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4350},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":470027,"byte_end":470037,"line_start":59,"line_end":59,"column_start":12,"column_end":22},"name":"MergeEvent","qualname":"::logging::MergeEvent","value":"MergeEvent { operator, scale, length1, length2, complete }","parent":null,"children":[{"krate":0,"index":4351},{"krate":0,"index":4352},{"krate":0,"index":4353},{"krate":0,"index":4354},{"krate":0,"index":4355}],"decl_id":null,"docs":" Either the start or end of a merge event.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4351},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":470077,"byte_end":470085,"line_start":61,"line_end":61,"column_start":9,"column_end":17},"name":"operator","qualname":"::logging::MergeEvent::operator","value":"usize","parent":{"krate":0,"index":4350},"children":[],"decl_id":null,"docs":" Operator identifier.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4352},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":470136,"byte_end":470141,"line_start":63,"line_end":63,"column_start":9,"column_end":14},"name":"scale","qualname":"::logging::MergeEvent::scale","value":"usize","parent":{"krate":0,"index":4350},"children":[],"decl_id":null,"docs":" Which order of magnitude.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4353},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":470189,"byte_end":470196,"line_start":65,"line_end":65,"column_start":9,"column_end":16},"name":"length1","qualname":"::logging::MergeEvent::length1","value":"usize","parent":{"krate":0,"index":4350},"children":[],"decl_id":null,"docs":" Length of first trace.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4354},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":470245,"byte_end":470252,"line_start":67,"line_end":67,"column_start":9,"column_end":16},"name":"length2","qualname":"::logging::MergeEvent::length2","value":"usize","parent":{"krate":0,"index":4350},"children":[],"decl_id":null,"docs":" Length of second trace.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4355},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":470299,"byte_end":470307,"line_start":69,"line_end":69,"column_start":9,"column_end":17},"name":"complete","qualname":"::logging::MergeEvent::complete","value":"std::option::Option<usize>","parent":{"krate":0,"index":4350},"children":[],"decl_id":null,"docs":" None implies a start.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4398},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":470559,"byte_end":470573,"line_start":76,"line_end":76,"column_start":12,"column_end":26},"name":"MergeShortfall","qualname":"::logging::MergeShortfall","value":"MergeShortfall { operator, scale, shortfall }","parent":null,"children":[{"krate":0,"index":4399},{"krate":0,"index":4400},{"krate":0,"index":4401}],"decl_id":null,"docs":" A merge failed to complete in time.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4399},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":470612,"byte_end":470620,"line_start":78,"line_end":78,"column_start":9,"column_end":17},"name":"operator","qualname":"::logging::MergeShortfall::operator","value":"usize","parent":{"krate":0,"index":4398},"children":[],"decl_id":null,"docs":" Operator identifer.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4400},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":470671,"byte_end":470676,"line_start":80,"line_end":80,"column_start":9,"column_end":14},"name":"scale","qualname":"::logging::MergeShortfall::scale","value":"usize","parent":{"krate":0,"index":4398},"children":[],"decl_id":null,"docs":" Which order of magnitude.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4401},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":470728,"byte_end":470737,"line_start":82,"line_end":82,"column_start":9,"column_end":18},"name":"shortfall","qualname":"::logging::MergeShortfall::shortfall","value":"usize","parent":{"krate":0,"index":4398},"children":[],"decl_id":null,"docs":" By how much were we short.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4436},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":471004,"byte_end":471014,"line_start":89,"line_end":89,"column_start":12,"column_end":22},"name":"TraceShare","qualname":"::logging::TraceShare","value":"TraceShare { operator, diff }","parent":null,"children":[{"krate":0,"index":4437},{"krate":0,"index":4438}],"decl_id":null,"docs":" Either the start or end of a merge event.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4437},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":471054,"byte_end":471062,"line_start":91,"line_end":91,"column_start":9,"column_end":17},"name":"operator","qualname":"::logging::TraceShare::operator","value":"usize","parent":{"krate":0,"index":4436},"children":[],"decl_id":null,"docs":" Operator identifier.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4438},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":471115,"byte_end":471119,"line_start":93,"line_end":93,"column_start":9,"column_end":13},"name":"diff","qualname":"::logging::TraceShare::diff","value":"isize","parent":{"krate":0,"index":4436},"children":[],"decl_id":null,"docs":" Change in number of shares.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":3630},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\consolidation.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"consolidation","qualname":"::consolidation","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\consolidation.rs","parent":null,"children":[{"krate":0,"index":3631},{"krate":0,"index":3632},{"krate":0,"index":3635},{"krate":0,"index":3638},{"krate":0,"index":3642},{"krate":0,"index":3646},{"krate":0,"index":3650}],"decl_id":null,"docs":" Common logic for the consolidation of vectors of Semigroups.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3632},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\consolidation.rs","byte_start":471660,"byte_end":471671,"line_start":10,"line_end":10,"column_start":8,"column_end":19},"name":"consolidate","qualname":"::consolidation::consolidate","value":"fn <T, R> (vec: &mut Vec<(T, R)>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sorts and consolidates `vec`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3635},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\consolidation.rs","byte_start":472035,"byte_end":472051,"line_start":19,"line_end":19,"column_start":8,"column_end":24},"name":"consolidate_from","qualname":"::consolidation::consolidate_from","value":"fn <T, R> (vec: &mut Vec<(T, R)>, offset: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sorts and consolidate `vec[offset..]`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3638},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\consolidation.rs","byte_start":472286,"byte_end":472303,"line_start":25,"line_end":25,"column_start":8,"column_end":25},"name":"consolidate_slice","qualname":"::consolidation::consolidate_slice","value":"fn <T, R> (slice: &mut [(T, R)]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Sorts and consolidates a slice, returning the valid prefix length.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3642},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\consolidation.rs","byte_start":474159,"byte_end":474178,"line_start":76,"line_end":76,"column_start":8,"column_end":27},"name":"consolidate_updates","qualname":"::consolidation::consolidate_updates","value":"fn <D, T, R> (vec: &mut Vec<(D, T, R)>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sorts and consolidates `vec`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3646},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\consolidation.rs","byte_start":474561,"byte_end":474585,"line_start":85,"line_end":85,"column_start":8,"column_end":32},"name":"consolidate_updates_from","qualname":"::consolidation::consolidate_updates_from","value":"fn <D, T, R> (vec: &mut Vec<(D, T, R)>, offset: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sorts and consolidate `vec[offset..]`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3650},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\consolidation.rs","byte_start":474839,"byte_end":474864,"line_start":91,"line_end":91,"column_start":8,"column_end":33},"name":"consolidate_updates_slice","qualname":"::consolidation::consolidate_updates_slice","value":"fn <D, T, R> (slice: &mut [(D, T, R)]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Sorts and consolidates a slice, returning the valid prefix length.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":3898,"byte_end":3899,"line_start":87,"line_end":87,"column_start":46,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":4084,"byte_end":4085,"line_start":91,"line_end":91,"column_start":62,"column_end":63},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":6206,"byte_end":6207,"line_start":36,"line_end":36,"column_start":41,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":41},{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":6815,"byte_end":6825,"line_start":51,"line_end":51,"column_start":39,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":6871,"byte_end":6886,"line_start":52,"line_end":52,"column_start":39,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":6933,"byte_end":6948,"line_start":53,"line_end":53,"column_start":40,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":7170,"byte_end":7180,"line_start":57,"line_end":57,"column_start":51,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":7733,"byte_end":7748,"line_start":70,"line_end":70,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":8153,"byte_end":8168,"line_start":82,"line_end":82,"column_start":61,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":8810,"byte_end":8820,"line_start":103,"line_end":103,"column_start":38,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":9042,"byte_end":9052,"line_start":109,"line_end":109,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":9256,"byte_end":9266,"line_start":116,"line_end":116,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":9393,"byte_end":9403,"line_start":121,"line_end":121,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":9748,"byte_end":9763,"line_start":135,"line_end":135,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":9891,"byte_end":9906,"line_start":141,"line_end":141,"column_start":29,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":10021,"byte_end":10036,"line_start":147,"line_end":147,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":10471,"byte_end":10486,"line_start":164,"line_end":164,"column_start":37,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":10614,"byte_end":10629,"line_start":170,"line_end":170,"column_start":34,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":10749,"byte_end":10764,"line_start":176,"line_end":176,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\writer.rs","byte_start":22891,"byte_end":22902,"line_start":35,"line_end":35,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\writer.rs","byte_start":25335,"byte_end":25346,"line_start":104,"line_end":104,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":26833,"byte_end":26843,"line_start":44,"line_end":44,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":28053,"byte_end":28063,"line_start":79,"line_end":79,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":30632,"byte_end":30642,"line_start":154,"line_end":154,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":238},{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":43964,"byte_end":43978,"line_start":487,"line_end":487,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":44728,"byte_end":44744,"line_start":512,"line_end":512,"column_start":18,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":44832,"byte_end":44842,"line_start":518,"line_end":518,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":45657,"byte_end":45667,"line_start":546,"line_end":546,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":49591,"byte_end":49599,"line_start":68,"line_end":68,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":50075,"byte_end":50083,"line_start":86,"line_end":86,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":325},{"krate":0,"index":329},{"krate":0,"index":331},{"krate":0,"index":336},{"krate":0,"index":339},{"krate":0,"index":343},{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":64415,"byte_end":64423,"line_start":410,"line_end":410,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":67985,"byte_end":67995,"line_start":489,"line_end":489,"column_start":42,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":77254,"byte_end":77264,"line_start":668,"line_end":668,"column_start":94,"column_end":104},"value":"","parent":null,"children":[{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":78738,"byte_end":78748,"line_start":699,"line_end":699,"column_start":115,"column_end":125},"value":"","parent":null,"children":[{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":79894,"byte_end":79904,"line_start":726,"line_end":726,"column_start":96,"column_end":106},"value":"","parent":null,"children":[{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":83047,"byte_end":83057,"line_start":73,"line_end":73,"column_start":41,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":485}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":83558,"byte_end":83566,"line_start":88,"line_end":88,"column_start":75,"column_end":83},"value":"","parent":null,"children":[{"krate":0,"index":495}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":86605,"byte_end":86615,"line_start":169,"line_end":169,"column_start":94,"column_end":104},"value":"","parent":null,"children":[{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":86932,"byte_end":86940,"line_start":177,"line_end":177,"column_start":68,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":526}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":88323,"byte_end":88333,"line_start":215,"line_end":215,"column_start":88,"column_end":98},"value":"","parent":null,"children":[{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":88558,"byte_end":88566,"line_start":225,"line_end":225,"column_start":62,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":91962,"byte_end":91972,"line_start":305,"line_end":305,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":92737,"byte_end":92745,"line_start":327,"line_end":327,"column_start":79,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":114709,"byte_end":114724,"line_start":719,"line_end":719,"column_start":74,"column_end":89},"value":"","parent":null,"children":[{"krate":0,"index":641},{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\consolidate.rs","byte_start":137001,"byte_end":137011,"line_start":51,"line_end":51,"column_start":41,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":679}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\consolidate.rs","byte_start":138607,"byte_end":138617,"line_start":99,"line_end":99,"column_start":47,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\iterate.rs","byte_start":143300,"byte_end":143310,"line_start":85,"line_end":85,"column_start":68,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":729}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\iterate.rs","byte_start":144271,"byte_end":144272,"line_start":105,"line_end":105,"column_start":70,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\iterate.rs","byte_start":146859,"byte_end":146867,"line_start":174,"line_end":174,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":753},{"krate":0,"index":755},{"krate":0,"index":756}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\iterate.rs","byte_start":148045,"byte_end":148053,"line_start":203,"line_end":203,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":763},{"krate":0,"index":764}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\iterate.rs","byte_start":149742,"byte_end":149759,"line_start":254,"line_end":254,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":776},{"krate":0,"index":777}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\iterate.rs","byte_start":150504,"byte_end":150521,"line_start":274,"line_end":274,"column_start":49,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":784},{"krate":0,"index":785}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\join.rs","byte_start":156547,"byte_end":156557,"line_start":154,"line_end":154,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":840},{"krate":0,"index":846},{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\join.rs","byte_start":157786,"byte_end":157794,"line_start":182,"line_end":182,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":854},{"krate":0,"index":860},{"krate":0,"index":863}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\join.rs","byte_start":161818,"byte_end":161828,"line_start":270,"line_end":270,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":880}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\join.rs","byte_start":162699,"byte_end":162707,"line_start":296,"line_end":296,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":887}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\join.rs","byte_start":173096,"byte_end":173104,"line_start":490,"line_end":490,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":934},{"krate":0,"index":935},{"krate":0,"index":936}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\join.rs","byte_start":177060,"byte_end":177071,"line_start":596,"line_end":596,"column_start":92,"column_end":103},"value":"","parent":null,"children":[{"krate":0,"index":958},{"krate":0,"index":959}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\count.rs","byte_start":182299,"byte_end":182309,"line_start":54,"line_end":54,"column_start":93,"column_end":103},"value":"","parent":null,"children":[{"krate":0,"index":991}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\count.rs","byte_start":182544,"byte_end":182552,"line_start":62,"line_end":62,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":995}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\threshold.rs","byte_start":189063,"byte_end":189073,"line_start":93,"line_end":93,"column_start":97,"column_end":107},"value":"","parent":null,"children":[{"krate":0,"index":1043}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\threshold.rs","byte_start":189437,"byte_end":189445,"line_start":105,"line_end":105,"column_start":58,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1049}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\mod.rs","byte_start":11784,"byte_end":11792,"line_start":32,"line_end":32,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":1084}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\mod.rs","byte_start":14128,"byte_end":14140,"line_start":92,"line_end":92,"column_start":75,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":1099},{"krate":0,"index":1100},{"krate":0,"index":1101},{"krate":0,"index":1105},{"krate":0,"index":1110}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\mod.rs","byte_start":16407,"byte_end":16420,"line_start":165,"line_end":165,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1126},{"krate":0,"index":1128},{"krate":0,"index":1130},{"krate":0,"index":1132},{"krate":0,"index":1133},{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1136},{"krate":0,"index":1137}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\identifiers.rs","byte_start":194770,"byte_end":194780,"line_start":39,"line_end":39,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1157}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\prefix_sum.rs","byte_start":200182,"byte_end":200192,"line_start":22,"line_end":22,"column_start":38,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1184},{"krate":0,"index":1187}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lattice.rs","byte_start":228197,"byte_end":228204,"line_start":165,"line_end":165,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1410},{"krate":0,"index":1411},{"krate":0,"index":1412}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\cursor_pair.rs","byte_start":257093,"byte_end":257103,"line_start":18,"line_end":18,"column_start":49,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1434},{"krate":0,"index":1435},{"krate":0,"index":1436},{"krate":0,"index":1437},{"krate":0,"index":1439},{"krate":0,"index":1441},{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1447},{"krate":0,"index":1448},{"krate":0,"index":1449},{"krate":0,"index":1450}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\cursor_list.rs","byte_start":262684,"byte_end":262694,"line_start":17,"line_end":17,"column_start":41,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1459},{"krate":0,"index":1460},{"krate":0,"index":1461}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\cursor_list.rs","byte_start":265377,"byte_end":265387,"line_start":90,"line_end":90,"column_start":64,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":1468},{"krate":0,"index":1469},{"krate":0,"index":1470},{"krate":0,"index":1471},{"krate":0,"index":1473},{"krate":0,"index":1475},{"krate":0,"index":1478},{"krate":0,"index":1479},{"krate":0,"index":1480},{"krate":0,"index":1481},{"krate":0,"index":1482},{"krate":0,"index":1483}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\mod.rs","byte_start":256413,"byte_end":256414,"line_start":85,"line_end":85,"column_start":77,"column_end":78},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\description.rs","byte_start":271774,"byte_end":271785,"line_start":75,"line_end":75,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1525}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\description.rs","byte_start":272158,"byte_end":272169,"line_start":88,"line_end":88,"column_start":12,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1528},{"krate":0,"index":1529},{"krate":0,"index":1530}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\spine_fueled_neu.rs","byte_start":280965,"byte_end":280970,"line_start":102,"line_end":102,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1569},{"krate":0,"index":1570},{"krate":0,"index":1571},{"krate":0,"index":1572},{"krate":0,"index":1573},{"krate":0,"index":1574},{"krate":0,"index":1575},{"krate":0,"index":1580},{"krate":0,"index":1581},{"krate":0,"index":1582},{"krate":0,"index":1583},{"krate":0,"index":1584}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\spine_fueled_neu.rs","byte_start":286614,"byte_end":286619,"line_start":234,"line_end":234,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1592},{"krate":0,"index":1593},{"krate":0,"index":1595},{"krate":0,"index":1597}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\spine_fueled_neu.rs","byte_start":289295,"byte_end":289300,"line_start":309,"line_end":309,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1605},{"krate":0,"index":1606},{"krate":0,"index":1608},{"krate":0,"index":1609},{"krate":0,"index":1613},{"krate":0,"index":1614},{"krate":0,"index":1616},{"krate":0,"index":1617},{"krate":0,"index":1621},{"krate":0,"index":1623}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\spine_fueled_neu.rs","byte_start":307849,"byte_end":307859,"line_start":711,"line_end":711,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1644},{"krate":0,"index":1645},{"krate":0,"index":1646},{"krate":0,"index":1647},{"krate":0,"index":1648},{"krate":0,"index":1650},{"krate":0,"index":1651},{"krate":0,"index":1652},{"krate":0,"index":1653}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\spine_fueled_neu.rs","byte_start":311987,"byte_end":311999,"line_start":816,"line_end":816,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1675},{"krate":0,"index":1676}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\merge_batcher.rs","byte_start":313768,"byte_end":313780,"line_start":18,"line_end":18,"column_start":48,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1702},{"krate":0,"index":1703},{"krate":0,"index":1704},{"krate":0,"index":1706}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\merge_batcher.rs","byte_start":317000,"byte_end":317008,"line_start":120,"line_end":120,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1716},{"krate":0,"index":1717},{"krate":0,"index":1718},{"krate":0,"index":1719},{"krate":0,"index":1720},{"krate":0,"index":1721},{"krate":0,"index":1722},{"krate":0,"index":1723},{"krate":0,"index":1724}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\merge_batcher.rs","byte_start":318793,"byte_end":318804,"line_start":179,"line_end":179,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1737},{"krate":0,"index":1738},{"krate":0,"index":1740},{"krate":0,"index":1741},{"krate":0,"index":1742},{"krate":0,"index":1743},{"krate":0,"index":1744}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":327927,"byte_end":327938,"line_start":63,"line_end":63,"column_start":49,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1815},{"krate":0,"index":1816},{"krate":0,"index":1817},{"krate":0,"index":1818}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":328500,"byte_end":328511,"line_start":77,"line_end":77,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1825},{"krate":0,"index":1826},{"krate":0,"index":1827},{"krate":0,"index":1828}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":329001,"byte_end":329012,"line_start":94,"line_end":94,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1835}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":333549,"byte_end":333561,"line_start":215,"line_end":215,"column_start":72,"column_end":84},"value":"","parent":null,"children":[{"krate":0,"index":1854},{"krate":0,"index":1857},{"krate":0,"index":1858}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":337320,"byte_end":337332,"line_start":317,"line_end":317,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1865},{"krate":0,"index":1866},{"krate":0,"index":1868},{"krate":0,"index":1870},{"krate":0,"index":1872},{"krate":0,"index":1873},{"krate":0,"index":1874},{"krate":0,"index":1875},{"krate":0,"index":1876},{"krate":0,"index":1877},{"krate":0,"index":1878},{"krate":0,"index":1879}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":339384,"byte_end":339397,"line_start":359,"line_end":359,"column_start":73,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":1893},{"krate":0,"index":1894},{"krate":0,"index":1895},{"krate":0,"index":1896}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":340801,"byte_end":340812,"line_start":410,"line_end":410,"column_start":47,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1902},{"krate":0,"index":1903},{"krate":0,"index":1904},{"krate":0,"index":1905}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":341392,"byte_end":341403,"line_start":430,"line_end":430,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1911},{"krate":0,"index":1912},{"krate":0,"index":1913},{"krate":0,"index":1914}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":341838,"byte_end":341849,"line_start":446,"line_end":446,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1920}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":344904,"byte_end":344916,"line_start":535,"line_end":535,"column_start":67,"column_end":79},"value":"","parent":null,"children":[{"krate":0,"index":1937},{"krate":0,"index":1940},{"krate":0,"index":1941}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":348847,"byte_end":348859,"line_start":639,"line_end":639,"column_start":42,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1947},{"krate":0,"index":1948},{"krate":0,"index":1950},{"krate":0,"index":1952},{"krate":0,"index":1954},{"krate":0,"index":1955},{"krate":0,"index":1956},{"krate":0,"index":1957},{"krate":0,"index":1958},{"krate":0,"index":1959},{"krate":0,"index":1960},{"krate":0,"index":1961}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":350721,"byte_end":350734,"line_start":680,"line_end":680,"column_start":68,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":1973},{"krate":0,"index":1974},{"krate":0,"index":1975},{"krate":0,"index":1976}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":358556,"byte_end":358557,"line_start":14,"line_end":14,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":359422,"byte_end":359434,"line_start":39,"line_end":39,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2000},{"krate":0,"index":2001},{"krate":0,"index":2002},{"krate":0,"index":2003},{"krate":0,"index":2004},{"krate":0,"index":2005},{"krate":0,"index":2006}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":360622,"byte_end":360636,"line_start":88,"line_end":88,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2018},{"krate":0,"index":2019},{"krate":0,"index":2020}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":361274,"byte_end":361288,"line_start":111,"line_end":111,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2025},{"krate":0,"index":2026},{"krate":0,"index":2028}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":362905,"byte_end":362919,"line_start":157,"line_end":157,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2033}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":364680,"byte_end":364694,"line_start":204,"line_end":204,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2040},{"krate":0,"index":2041},{"krate":0,"index":2042},{"krate":0,"index":2043}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":366160,"byte_end":366173,"line_start":247,"line_end":247,"column_start":49,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2048},{"krate":0,"index":2049},{"krate":0,"index":2051},{"krate":0,"index":2052},{"krate":0,"index":2054},{"krate":0,"index":2055},{"krate":0,"index":2056}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered_leaf.rs","byte_start":368116,"byte_end":368127,"line_start":14,"line_end":14,"column_start":49,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2069},{"krate":0,"index":2070},{"krate":0,"index":2071},{"krate":0,"index":2072},{"krate":0,"index":2073},{"krate":0,"index":2074},{"krate":0,"index":2075}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered_leaf.rs","byte_start":368780,"byte_end":368798,"line_start":35,"line_end":35,"column_start":52,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":2083},{"krate":0,"index":2084},{"krate":0,"index":2085}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered_leaf.rs","byte_start":369025,"byte_end":369043,"line_start":41,"line_end":41,"column_start":57,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":2089},{"krate":0,"index":2090},{"krate":0,"index":2091}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered_leaf.rs","byte_start":371590,"byte_end":371608,"line_start":97,"line_end":97,"column_start":57,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":2097},{"krate":0,"index":2098},{"krate":0,"index":2099},{"krate":0,"index":2100}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered_leaf.rs","byte_start":372191,"byte_end":372208,"line_start":113,"line_end":113,"column_start":56,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":2104},{"krate":0,"index":2105},{"krate":0,"index":2107},{"krate":0,"index":2108},{"krate":0,"index":2109},{"krate":0,"index":2110},{"krate":0,"index":2111}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":373674,"byte_end":373684,"line_start":21,"line_end":21,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2168}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":373938,"byte_end":373948,"line_start":34,"line_end":34,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2172},{"krate":0,"index":2173},{"krate":0,"index":2174},{"krate":0,"index":2175},{"krate":0,"index":2176},{"krate":0,"index":2177},{"krate":0,"index":2178},{"krate":0,"index":2181},{"krate":0,"index":2182},{"krate":0,"index":2183},{"krate":0,"index":2184},{"krate":0,"index":2185}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":375959,"byte_end":375969,"line_start":97,"line_end":97,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2190}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":376537,"byte_end":376547,"line_start":121,"line_end":121,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2208}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":376843,"byte_end":376853,"line_start":131,"line_end":131,"column_start":62,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":2216},{"krate":0,"index":2217},{"krate":0,"index":2218},{"krate":0,"index":2219}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":377274,"byte_end":377284,"line_start":146,"line_end":146,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2227}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":378244,"byte_end":378255,"line_start":172,"line_end":172,"column_start":49,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2247}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":378487,"byte_end":378498,"line_start":181,"line_end":181,"column_start":57,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":2255},{"krate":0,"index":2256},{"krate":0,"index":2257},{"krate":0,"index":2258},{"krate":0,"index":2260},{"krate":0,"index":2262},{"krate":0,"index":2265},{"krate":0,"index":2266},{"krate":0,"index":2267},{"krate":0,"index":2268},{"krate":0,"index":2269},{"krate":0,"index":2270}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":380163,"byte_end":380179,"line_start":220,"line_end":220,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":2287}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":380449,"byte_end":380465,"line_start":229,"line_end":229,"column_start":82,"column_end":98},"value":"","parent":null,"children":[{"krate":0,"index":2295},{"krate":0,"index":2296},{"krate":0,"index":2297},{"krate":0,"index":2298},{"krate":0,"index":2300},{"krate":0,"index":2302},{"krate":0,"index":2305},{"krate":0,"index":2306},{"krate":0,"index":2307},{"krate":0,"index":2308},{"krate":0,"index":2309},{"krate":0,"index":2310}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":382395,"byte_end":382405,"line_start":21,"line_end":21,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2332}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":382716,"byte_end":382726,"line_start":36,"line_end":36,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2337},{"krate":0,"index":2338},{"krate":0,"index":2339},{"krate":0,"index":2340},{"krate":0,"index":2341},{"krate":0,"index":2342},{"krate":0,"index":2343},{"krate":0,"index":2346},{"krate":0,"index":2347},{"krate":0,"index":2348},{"krate":0,"index":2349},{"krate":0,"index":2350}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":384898,"byte_end":384908,"line_start":102,"line_end":102,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2356}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":385534,"byte_end":385544,"line_start":128,"line_end":128,"column_start":63,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":2377}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":385885,"byte_end":385895,"line_start":139,"line_end":139,"column_start":65,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":2386},{"krate":0,"index":2387},{"krate":0,"index":2388},{"krate":0,"index":2389}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":386385,"byte_end":386395,"line_start":155,"line_end":155,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2398}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":387401,"byte_end":387412,"line_start":183,"line_end":183,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2421}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":387671,"byte_end":387682,"line_start":193,"line_end":193,"column_start":60,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":2430},{"krate":0,"index":2431},{"krate":0,"index":2432},{"krate":0,"index":2433},{"krate":0,"index":2435},{"krate":0,"index":2437},{"krate":0,"index":2440},{"krate":0,"index":2441},{"krate":0,"index":2442},{"krate":0,"index":2443},{"krate":0,"index":2444},{"krate":0,"index":2445}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":389508,"byte_end":389524,"line_start":237,"line_end":237,"column_start":57,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":2465}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":389821,"byte_end":389837,"line_start":247,"line_end":247,"column_start":85,"column_end":101},"value":"","parent":null,"children":[{"krate":0,"index":2474},{"krate":0,"index":2475},{"krate":0,"index":2476},{"krate":0,"index":2477},{"krate":0,"index":2479},{"krate":0,"index":2481},{"krate":0,"index":2484},{"krate":0,"index":2485},{"krate":0,"index":2486},{"krate":0,"index":2487},{"krate":0,"index":2488},{"krate":0,"index":2489}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":392077,"byte_end":392090,"line_start":22,"line_end":22,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2504}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":392333,"byte_end":392346,"line_start":35,"line_end":35,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2507},{"krate":0,"index":2508},{"krate":0,"index":2509},{"krate":0,"index":2510},{"krate":0,"index":2511},{"krate":0,"index":2512},{"krate":0,"index":2513},{"krate":0,"index":2516},{"krate":0,"index":2517},{"krate":0,"index":2518},{"krate":0,"index":2519},{"krate":0,"index":2520}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":393634,"byte_end":393647,"line_start":69,"line_end":69,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2524}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":394135,"byte_end":394148,"line_start":91,"line_end":91,"column_start":45,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2540}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":394420,"byte_end":394433,"line_start":101,"line_end":101,"column_start":49,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2547},{"krate":0,"index":2548},{"krate":0,"index":2549},{"krate":0,"index":2550}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":394835,"byte_end":394848,"line_start":115,"line_end":115,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2557}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":395425,"byte_end":395439,"line_start":137,"line_end":137,"column_start":48,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2573}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":395702,"byte_end":395716,"line_start":147,"line_end":147,"column_start":44,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2580},{"krate":0,"index":2581},{"krate":0,"index":2582},{"krate":0,"index":2583},{"krate":0,"index":2585},{"krate":0,"index":2587},{"krate":0,"index":2590},{"krate":0,"index":2591},{"krate":0,"index":2592},{"krate":0,"index":2593},{"krate":0,"index":2594},{"krate":0,"index":2595}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":397489,"byte_end":397508,"line_start":190,"line_end":190,"column_start":53,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":2611}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":397809,"byte_end":397828,"line_start":200,"line_end":200,"column_start":69,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":2618},{"krate":0,"index":2619},{"krate":0,"index":2620},{"krate":0,"index":2621},{"krate":0,"index":2623},{"krate":0,"index":2625},{"krate":0,"index":2628},{"krate":0,"index":2629},{"krate":0,"index":2630},{"krate":0,"index":2631},{"krate":0,"index":2632},{"krate":0,"index":2633}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\rc.rs","byte_start":401140,"byte_end":401148,"line_start":41,"line_end":41,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2648},{"krate":0,"index":2651},{"krate":0,"index":2654}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\rc.rs","byte_start":403947,"byte_end":403954,"line_start":104,"line_end":104,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2664},{"krate":0,"index":2665},{"krate":0,"index":2666},{"krate":0,"index":2667},{"krate":0,"index":2668},{"krate":0,"index":2669},{"krate":0,"index":2670},{"krate":0,"index":2671},{"krate":0,"index":2672},{"krate":0,"index":2673},{"krate":0,"index":2674},{"krate":0,"index":2675}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\rc.rs","byte_start":405654,"byte_end":405661,"line_start":143,"line_end":143,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2679}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\rc.rs","byte_start":406248,"byte_end":406255,"line_start":163,"line_end":163,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2682}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\rc.rs","byte_start":406805,"byte_end":406812,"line_start":180,"line_end":180,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2685}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":407470,"byte_end":407481,"line_start":14,"line_end":14,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2701}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":407715,"byte_end":407726,"line_start":27,"line_end":27,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2705},{"krate":0,"index":2706},{"krate":0,"index":2707},{"krate":0,"index":2708},{"krate":0,"index":2709},{"krate":0,"index":2710},{"krate":0,"index":2711},{"krate":0,"index":2714},{"krate":0,"index":2715},{"krate":0,"index":2716},{"krate":0,"index":2717},{"krate":0,"index":2718}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":409050,"byte_end":409061,"line_start":62,"line_end":62,"column_start":13,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2723}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":409511,"byte_end":409522,"line_start":84,"line_end":84,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2741}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":409792,"byte_end":409803,"line_start":94,"line_end":94,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2749},{"krate":0,"index":2750},{"krate":0,"index":2751},{"krate":0,"index":2752}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":410243,"byte_end":410254,"line_start":109,"line_end":109,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2760}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":410785,"byte_end":410797,"line_start":131,"line_end":131,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2778}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":411036,"byte_end":411048,"line_start":141,"line_end":141,"column_start":47,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2786},{"krate":0,"index":2787},{"krate":0,"index":2788},{"krate":0,"index":2789},{"krate":0,"index":2791},{"krate":0,"index":2793},{"krate":0,"index":2795},{"krate":0,"index":2796},{"krate":0,"index":2797},{"krate":0,"index":2798},{"krate":0,"index":2799},{"krate":0,"index":2800}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":412746,"byte_end":412763,"line_start":183,"line_end":183,"column_start":49,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2818}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":413040,"byte_end":413057,"line_start":193,"line_end":193,"column_start":72,"column_end":89},"value":"","parent":null,"children":[{"krate":0,"index":2826},{"krate":0,"index":2827},{"krate":0,"index":2828},{"krate":0,"index":2829},{"krate":0,"index":2831},{"krate":0,"index":2833},{"krate":0,"index":2835},{"krate":0,"index":2836},{"krate":0,"index":2837},{"krate":0,"index":2838},{"krate":0,"index":2839},{"krate":0,"index":2840}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":416968,"byte_end":416979,"line_start":66,"line_end":66,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2865}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":417274,"byte_end":417285,"line_start":80,"line_end":80,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2869},{"krate":0,"index":2870},{"krate":0,"index":2871},{"krate":0,"index":2872},{"krate":0,"index":2873},{"krate":0,"index":2874},{"krate":0,"index":2875},{"krate":0,"index":2878},{"krate":0,"index":2879},{"krate":0,"index":2880},{"krate":0,"index":2881},{"krate":0,"index":2882}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":418686,"byte_end":418697,"line_start":118,"line_end":118,"column_start":13,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2887}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":419311,"byte_end":419322,"line_start":145,"line_end":145,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2905}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":419590,"byte_end":419601,"line_start":155,"line_end":155,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2913},{"krate":0,"index":2914},{"krate":0,"index":2915},{"krate":0,"index":2916}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":420028,"byte_end":420039,"line_start":170,"line_end":170,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2924}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":420609,"byte_end":420621,"line_start":193,"line_end":193,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2942}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":420876,"byte_end":420888,"line_start":203,"line_end":203,"column_start":47,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2950},{"krate":0,"index":2951},{"krate":0,"index":2952},{"krate":0,"index":2953},{"krate":0,"index":2955},{"krate":0,"index":2957},{"krate":0,"index":2960},{"krate":0,"index":2961},{"krate":0,"index":2962},{"krate":0,"index":2963},{"krate":0,"index":2964},{"krate":0,"index":2965}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":422587,"byte_end":422604,"line_start":244,"line_end":244,"column_start":49,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2983}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":422897,"byte_end":422914,"line_start":254,"line_end":254,"column_start":72,"column_end":89},"value":"","parent":null,"children":[{"krate":0,"index":2991},{"krate":0,"index":2992},{"krate":0,"index":2993},{"krate":0,"index":2994},{"krate":0,"index":2996},{"krate":0,"index":2998},{"krate":0,"index":3001},{"krate":0,"index":3002},{"krate":0,"index":3003},{"krate":0,"index":3004},{"krate":0,"index":3005},{"krate":0,"index":3006}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":243149,"byte_end":243151,"line_start":294,"line_end":294,"column_start":69,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":3104},{"krate":0,"index":3105},{"krate":0,"index":3106},{"krate":0,"index":3107}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":243855,"byte_end":243868,"line_start":315,"line_end":315,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":3122}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":244114,"byte_end":244127,"line_start":324,"line_end":324,"column_start":70,"column_end":83},"value":"","parent":null,"children":[{"krate":0,"index":3129},{"krate":0,"index":3130},{"krate":0,"index":3131},{"krate":0,"index":3132},{"krate":0,"index":3134},{"krate":0,"index":3136},{"krate":0,"index":3138},{"krate":0,"index":3139},{"krate":0,"index":3140},{"krate":0,"index":3141},{"krate":0,"index":3142},{"krate":0,"index":3143}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":245455,"byte_end":245457,"line_start":350,"line_end":350,"column_start":56,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3150},{"krate":0,"index":3151},{"krate":0,"index":3152}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":245844,"byte_end":245853,"line_start":360,"line_end":360,"column_start":64,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":3166},{"krate":0,"index":3167},{"krate":0,"index":3168},{"krate":0,"index":3169}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":246461,"byte_end":246470,"line_start":371,"line_end":371,"column_start":64,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":3183},{"krate":0,"index":3184},{"krate":0,"index":3185},{"krate":0,"index":3186}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":247114,"byte_end":247122,"line_start":382,"line_end":382,"column_start":63,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":3200},{"krate":0,"index":3201},{"krate":0,"index":3202}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":247834,"byte_end":247844,"line_start":400,"line_end":400,"column_start":81,"column_end":91},"value":"","parent":null,"children":[{"krate":0,"index":3223},{"krate":0,"index":3224},{"krate":0,"index":3225},{"krate":0,"index":3226}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":248581,"byte_end":248602,"line_start":421,"line_end":421,"column_start":47,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":3241}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":248868,"byte_end":248889,"line_start":430,"line_end":430,"column_start":82,"column_end":103},"value":"","parent":null,"children":[{"krate":0,"index":3248},{"krate":0,"index":3249},{"krate":0,"index":3250},{"krate":0,"index":3251},{"krate":0,"index":3253},{"krate":0,"index":3255},{"krate":0,"index":3257},{"krate":0,"index":3258},{"krate":0,"index":3259},{"krate":0,"index":3260},{"krate":0,"index":3261},{"krate":0,"index":3262}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":250246,"byte_end":250256,"line_start":456,"line_end":456,"column_start":68,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":3269},{"krate":0,"index":3270},{"krate":0,"index":3271}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":250712,"byte_end":250729,"line_start":466,"line_end":466,"column_start":92,"column_end":109},"value":"","parent":null,"children":[{"krate":0,"index":3285},{"krate":0,"index":3286},{"krate":0,"index":3287},{"krate":0,"index":3288}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":251580,"byte_end":251597,"line_start":482,"line_end":482,"column_start":92,"column_end":109},"value":"","parent":null,"children":[{"krate":0,"index":3302},{"krate":0,"index":3303},{"krate":0,"index":3304},{"krate":0,"index":3305}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":252492,"byte_end":252508,"line_start":498,"line_end":498,"column_start":91,"column_end":107},"value":"","parent":null,"children":[{"krate":0,"index":3319},{"krate":0,"index":3320},{"krate":0,"index":3321}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":428648,"byte_end":428649,"line_start":116,"line_end":116,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3345},{"krate":0,"index":3348},{"krate":0,"index":3351}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":431382,"byte_end":431394,"line_start":195,"line_end":195,"column_start":35,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3366},{"krate":0,"index":3367}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":432304,"byte_end":432316,"line_start":216,"line_end":216,"column_start":49,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":3372},{"krate":0,"index":3374},{"krate":0,"index":3375},{"krate":0,"index":3376},{"krate":0,"index":3377},{"krate":0,"index":3378},{"krate":0,"index":3379},{"krate":0,"index":3380},{"krate":0,"index":3381},{"krate":0,"index":3382}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":435594,"byte_end":435606,"line_start":304,"line_end":304,"column_start":58,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":3387}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":438926,"byte_end":438927,"line_start":101,"line_end":101,"column_start":48,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":439679,"byte_end":439686,"line_start":118,"line_end":118,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3430}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":439770,"byte_end":439777,"line_start":122,"line_end":122,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3433},{"krate":0,"index":3434}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":439871,"byte_end":439878,"line_start":129,"line_end":129,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3436}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":440715,"byte_end":440723,"line_start":154,"line_end":154,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3447}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":440953,"byte_end":440961,"line_start":164,"line_end":164,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3451}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":441166,"byte_end":441174,"line_start":170,"line_end":170,"column_start":93,"column_end":101},"value":"","parent":null,"children":[{"krate":0,"index":3456}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":441349,"byte_end":441357,"line_start":177,"line_end":177,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3460},{"krate":0,"index":3461}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":441616,"byte_end":441624,"line_start":187,"line_end":187,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3466},{"krate":0,"index":3467}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":442658,"byte_end":442668,"line_start":222,"line_end":222,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3477}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":442840,"byte_end":442850,"line_start":230,"line_end":230,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3480},{"krate":0,"index":3481},{"krate":0,"index":3482}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":443021,"byte_end":443031,"line_start":238,"line_end":238,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3485},{"krate":0,"index":3486}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":443155,"byte_end":443165,"line_start":245,"line_end":245,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3489}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":443286,"byte_end":443296,"line_start":251,"line_end":251,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3492}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":443463,"byte_end":443473,"line_start":257,"line_end":257,"column_start":71,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":3497}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":443933,"byte_end":443943,"line_start":274,"line_end":274,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3500},{"krate":0,"index":3501}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":444177,"byte_end":444187,"line_start":285,"line_end":285,"column_start":38,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3505},{"krate":0,"index":3506}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":446982,"byte_end":446992,"line_start":49,"line_end":49,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3530},{"krate":0,"index":3531},{"krate":0,"index":3535},{"krate":0,"index":3538},{"krate":0,"index":3543},{"krate":0,"index":3546},{"krate":0,"index":3547},{"krate":0,"index":3550},{"krate":0,"index":3557},{"krate":0,"index":3561},{"krate":0,"index":3567},{"krate":0,"index":3571},{"krate":0,"index":3573},{"krate":0,"index":3575},{"krate":0,"index":3576},{"krate":0,"index":3577},{"krate":0,"index":3580}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":463148,"byte_end":463158,"line_start":498,"line_end":498,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":3589}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":464155,"byte_end":464165,"line_start":535,"line_end":535,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3595},{"krate":0,"index":3597}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":466883,"byte_end":466889,"line_start":616,"line_end":616,"column_start":65,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":3607}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":469453,"byte_end":469470,"line_start":43,"line_end":43,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3621}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":469817,"byte_end":469834,"line_start":55,"line_end":55,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3623}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":470353,"byte_end":470370,"line_start":72,"line_end":72,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3625}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":470779,"byte_end":470796,"line_start":85,"line_end":85,"column_start":31,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3627}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":471157,"byte_end":471174,"line_start":96,"line_end":96,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3629}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":4298,"byte_end":4306,"line_start":104,"line_end":104,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":31}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":4316,"byte_end":4325,"line_start":105,"line_end":105,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":107}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\mod.rs","byte_start":11433,"byte_end":11440,"line_start":14,"line_end":14,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":119}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\mod.rs","byte_start":21641,"byte_end":21647,"line_start":65,"line_end":65,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":142}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\mod.rs","byte_start":21657,"byte_end":21662,"line_start":66,"line_end":66,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":171}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\mod.rs","byte_start":21672,"byte_end":21683,"line_start":67,"line_end":67,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":265}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\mod.rs","byte_start":11450,"byte_end":11456,"line_start":15,"line_end":15,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":436}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\mod.rs","byte_start":11466,"byte_end":11477,"line_start":16,"line_end":16,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":663}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\mod.rs","byte_start":11487,"byte_end":11494,"line_start":17,"line_end":17,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":697}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\mod.rs","byte_start":11504,"byte_end":11508,"line_start":18,"line_end":18,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":786}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\mod.rs","byte_start":11518,"byte_end":11523,"line_start":19,"line_end":19,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":963}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\mod.rs","byte_start":11533,"byte_end":11542,"line_start":20,"line_end":20,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1003}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":4335,"byte_end":4345,"line_start":106,"line_end":106,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":1138}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\mod.rs","byte_start":193500,"byte_end":193511,"line_start":3,"line_end":3,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":1139}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\mod.rs","byte_start":193521,"byte_end":193531,"line_start":4,"line_end":4,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":1165}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\mod.rs","byte_start":193541,"byte_end":193547,"line_start":5,"line_end":5,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1215}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\mod.rs","byte_start":205941,"byte_end":205944,"line_start":3,"line_end":3,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1216}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\mod.rs","byte_start":205954,"byte_end":205964,"line_start":4,"line_end":4,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":1250}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\mod.rs","byte_start":205974,"byte_end":205982,"line_start":5,"line_end":5,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1285}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\mod.rs","byte_start":205992,"byte_end":205995,"line_start":6,"line_end":6,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1334}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\graphs\\mod.rs","byte_start":206005,"byte_end":206014,"line_start":7,"line_end":7,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1356}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":4355,"byte_end":4362,"line_start":107,"line_end":107,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1397}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":4372,"byte_end":4377,"line_start":108,"line_end":108,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1415}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":230036,"byte_end":230042,"line_start":10,"line_end":10,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1416}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\mod.rs","byte_start":253593,"byte_end":253604,"line_start":9,"line_end":9,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":1417}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\mod.rs","byte_start":253614,"byte_end":253625,"line_start":10,"line_end":10,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":1451}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":230052,"byte_end":230063,"line_start":11,"line_end":11,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":1522}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":230073,"byte_end":230088,"line_start":12,"line_end":12,"column_start":9,"column_end":24},"ref_id":{"krate":0,"index":1531}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\mod.rs","byte_start":275130,"byte_end":275146,"line_start":42,"line_end":42,"column_start":9,"column_end":25},"ref_id":{"krate":0,"index":1532}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\mod.rs","byte_start":275280,"byte_end":275283,"line_start":49,"line_end":49,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1754}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":230098,"byte_end":230104,"line_start":13,"line_end":13,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1977}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":351815,"byte_end":351822,"line_start":7,"line_end":7,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1978}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":351832,"byte_end":351844,"line_start":8,"line_end":8,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":2057}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":230114,"byte_end":230122,"line_start":14,"line_end":14,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":2149}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\mod.rs","byte_start":373095,"byte_end":373100,"line_start":3,"line_end":3,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2150}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\mod.rs","byte_start":373110,"byte_end":373118,"line_start":4,"line_end":4,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":2311}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\mod.rs","byte_start":373128,"byte_end":373136,"line_start":5,"line_end":5,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":2490}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\mod.rs","byte_start":373146,"byte_end":373148,"line_start":6,"line_end":6,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":2634}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\mod.rs","byte_start":373159,"byte_end":373165,"line_start":8,"line_end":8,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2686}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\mod.rs","byte_start":373175,"byte_end":373181,"line_start":9,"line_end":9,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2841}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":4387,"byte_end":4392,"line_start":109,"line_end":109,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3322}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":4402,"byte_end":4412,"line_start":110,"line_end":110,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":3388}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":4422,"byte_end":4432,"line_start":111,"line_end":111,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":3508}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":4442,"byte_end":4449,"line_start":112,"line_end":112,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":3614}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":4459,"byte_end":4472,"line_start":113,"line_end":113,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":3630}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":3830,"byte_end":3834,"line_start":86,"line_end":86,"column_start":26,"column_end":30},"kind":"SuperTrait","from":{"krate":15,"index":2833},"to":{"krate":0,"index":18}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":3837,"byte_end":3840,"line_start":86,"line_end":86,"column_start":33,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":2065},"to":{"krate":0,"index":18}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":3843,"byte_end":3848,"line_start":86,"line_end":86,"column_start":39,"column_end":44},"kind":"SuperTrait","from":{"krate":2,"index":7486},"to":{"krate":0,"index":18}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":3898,"byte_end":3899,"line_start":87,"line_end":87,"column_start":46,"column_end":47},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":20},"to":{"krate":0,"index":18}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":3992,"byte_end":4004,"line_start":90,"line_end":90,"column_start":34,"column_end":46},"kind":"SuperTrait","from":{"krate":15,"index":2836},"to":{"krate":0,"index":21}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":4007,"byte_end":4010,"line_start":90,"line_end":90,"column_start":49,"column_end":52},"kind":"SuperTrait","from":{"krate":2,"index":2065},"to":{"krate":0,"index":21}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":4013,"byte_end":4018,"line_start":90,"line_end":90,"column_start":55,"column_end":60},"kind":"SuperTrait","from":{"krate":2,"index":7486},"to":{"krate":0,"index":21}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lib.rs","byte_start":4084,"byte_end":4085,"line_start":91,"line_end":91,"column_start":62,"column_end":63},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":23},"to":{"krate":0,"index":21}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":6206,"byte_end":6207,"line_start":36,"line_end":36,"column_start":41,"column_end":42},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":40},"to":{"krate":0,"index":36}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":6760,"byte_end":6763,"line_start":50,"line_end":50,"column_start":25,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":2065},"to":{"krate":0,"index":43}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":6764,"byte_end":6772,"line_start":50,"line_end":50,"column_start":29,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":36},"to":{"krate":0,"index":43}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":6815,"byte_end":6825,"line_start":51,"line_end":51,"column_start":39,"column_end":49},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":3655},"to":{"krate":0,"index":43}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":6871,"byte_end":6886,"line_start":52,"line_end":52,"column_start":39,"column_end":54},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":3674},"to":{"krate":0,"index":43}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":6933,"byte_end":6948,"line_start":53,"line_end":53,"column_start":40,"column_end":55},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":3710},"to":{"krate":0,"index":43}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":7170,"byte_end":7180,"line_start":57,"line_end":57,"column_start":51,"column_end":61},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":3655},"to":{"krate":17,"index":51}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":7733,"byte_end":7748,"line_start":70,"line_end":70,"column_start":47,"column_end":62},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":3674},"to":{"krate":17,"index":51}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":8153,"byte_end":8168,"line_start":82,"line_end":82,"column_start":61,"column_end":76},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":3710},"to":{"krate":17,"index":51}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":8810,"byte_end":8820,"line_start":103,"line_end":103,"column_start":38,"column_end":48},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":3655},"to":{"krate":2,"index":2076}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":9042,"byte_end":9052,"line_start":109,"line_end":109,"column_start":31,"column_end":41},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":3655},"to":{"krate":2,"index":2065}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":9256,"byte_end":9266,"line_start":116,"line_end":116,"column_start":36,"column_end":46},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":3655},"to":{"krate":0,"index":36}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":9393,"byte_end":9403,"line_start":121,"line_end":121,"column_start":33,"column_end":43},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":3655},"to":{"krate":2,"index":1703}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":9748,"byte_end":9763,"line_start":135,"line_end":135,"column_start":32,"column_end":47},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":3674},"to":{"krate":0,"index":36}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":9891,"byte_end":9906,"line_start":141,"line_end":141,"column_start":29,"column_end":44},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":3674},"to":{"krate":2,"index":1703}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":10021,"byte_end":10036,"line_start":147,"line_end":147,"column_start":31,"column_end":46},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":3674},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":10471,"byte_end":10486,"line_start":164,"line_end":164,"column_start":37,"column_end":52},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":3710},"to":{"krate":0,"index":36}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":10614,"byte_end":10629,"line_start":170,"line_end":170,"column_start":34,"column_end":49},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":3710},"to":{"krate":2,"index":1703}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\hashable.rs","byte_start":10749,"byte_end":10764,"line_start":176,"line_end":176,"column_start":36,"column_end":51},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":3710},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\writer.rs","byte_start":22891,"byte_end":22902,"line_start":35,"line_end":35,"column_start":10,"column_end":21},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":155},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\writer.rs","byte_start":25335,"byte_end":25346,"line_start":104,"line_end":104,"column_start":19,"column_end":30},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":155},"to":{"krate":2,"index":1725}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":26833,"byte_end":26843,"line_start":44,"line_end":44,"column_start":26,"column_end":36},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":200},"to":{"krate":0,"index":3011}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":28053,"byte_end":28063,"line_start":79,"line_end":79,"column_start":10,"column_end":20},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":200},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":30632,"byte_end":30642,"line_start":154,"line_end":154,"column_start":10,"column_end":20},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":200},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":43964,"byte_end":43978,"line_start":487,"line_end":487,"column_start":9,"column_end":23},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":244},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":44728,"byte_end":44744,"line_start":512,"line_end":512,"column_start":18,"column_end":34},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":253},"to":{"krate":2,"index":1725}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":44832,"byte_end":44842,"line_start":518,"line_end":518,"column_start":20,"column_end":30},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":200},"to":{"krate":2,"index":2179}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\agent.rs","byte_start":45657,"byte_end":45667,"line_start":546,"line_end":546,"column_start":19,"column_end":29},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":200},"to":{"krate":2,"index":1725}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":49591,"byte_end":49599,"line_start":68,"line_end":68,"column_start":30,"column_end":38},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":311},"to":{"krate":2,"index":2179}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":50075,"byte_end":50083,"line_start":86,"line_end":86,"column_start":20,"column_end":28},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":311},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":64415,"byte_end":64423,"line_start":410,"line_end":410,"column_start":24,"column_end":32},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":311},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":67985,"byte_end":67995,"line_start":489,"line_end":489,"column_start":42,"column_end":52},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":4232},"to":{"krate":0,"index":369}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":77254,"byte_end":77264,"line_start":668,"line_end":668,"column_start":94,"column_end":104},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":4232},"to":{"krate":0,"index":369}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":78738,"byte_end":78748,"line_start":699,"line_end":699,"column_start":115,"column_end":125},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":4232},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\arrange\\arrangement.rs","byte_start":79894,"byte_end":79904,"line_start":726,"line_end":726,"column_start":96,"column_end":106},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":4232},"to":{"krate":0,"index":416}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":83047,"byte_end":83057,"line_start":73,"line_end":73,"column_start":41,"column_end":51},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":4232},"to":{"krate":0,"index":467}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":83558,"byte_end":83566,"line_start":88,"line_end":88,"column_start":75,"column_end":83},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":311},"to":{"krate":0,"index":467}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":86605,"byte_end":86615,"line_start":169,"line_end":169,"column_start":94,"column_end":104},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":4232},"to":{"krate":0,"index":500}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":86932,"byte_end":86940,"line_start":177,"line_end":177,"column_start":68,"column_end":76},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":311},"to":{"krate":0,"index":500}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":88323,"byte_end":88333,"line_start":215,"line_end":215,"column_start":88,"column_end":98},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":4232},"to":{"krate":0,"index":531}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":88558,"byte_end":88566,"line_start":225,"line_end":225,"column_start":62,"column_end":70},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":311},"to":{"krate":0,"index":531}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":91962,"byte_end":91972,"line_start":305,"line_end":305,"column_start":45,"column_end":55},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":4232},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":92737,"byte_end":92745,"line_start":327,"line_end":327,"column_start":79,"column_end":87},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":311},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\reduce.rs","byte_start":114709,"byte_end":114724,"line_start":719,"line_end":719,"column_start":74,"column_end":89},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":616},"to":{"krate":0,"index":593}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\consolidate.rs","byte_start":135903,"byte_end":135908,"line_start":16,"line_end":16,"column_start":51,"column_end":56},"kind":"SuperTrait","from":{"krate":2,"index":1539},"to":{"krate":0,"index":671}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\consolidate.rs","byte_start":137001,"byte_end":137011,"line_start":51,"line_end":51,"column_start":41,"column_end":51},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":4232},"to":{"krate":0,"index":671}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\consolidate.rs","byte_start":138607,"byte_end":138617,"line_start":99,"line_end":99,"column_start":47,"column_end":57},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":4232},"to":{"krate":0,"index":683}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\iterate.rs","byte_start":143300,"byte_end":143310,"line_start":85,"line_end":85,"column_start":68,"column_end":78},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":4232},"to":{"krate":0,"index":718}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\iterate.rs","byte_start":144271,"byte_end":144272,"line_start":105,"line_end":105,"column_start":70,"column_end":71},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":734},"to":{"krate":0,"index":718}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\iterate.rs","byte_start":146859,"byte_end":146867,"line_start":174,"line_end":174,"column_start":37,"column_end":45},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":741},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\iterate.rs","byte_start":148045,"byte_end":148053,"line_start":203,"line_end":203,"column_start":47,"column_end":55},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":741},"to":{"krate":2,"index":1703}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\iterate.rs","byte_start":149742,"byte_end":149759,"line_start":254,"line_end":254,"column_start":39,"column_end":56},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":765},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\iterate.rs","byte_start":150504,"byte_end":150521,"line_start":274,"line_end":274,"column_start":49,"column_end":66},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":765},"to":{"krate":2,"index":1703}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\join.rs","byte_start":156547,"byte_end":156557,"line_start":154,"line_end":154,"column_start":39,"column_end":49},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":4232},"to":{"krate":0,"index":817}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\join.rs","byte_start":157786,"byte_end":157794,"line_start":182,"line_end":182,"column_start":50,"column_end":58},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":311},"to":{"krate":0,"index":817}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\join.rs","byte_start":161818,"byte_end":161828,"line_start":270,"line_end":270,"column_start":43,"column_end":53},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":4232},"to":{"krate":0,"index":866}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\join.rs","byte_start":162699,"byte_end":162707,"line_start":296,"line_end":296,"column_start":54,"column_end":62},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":311},"to":{"krate":0,"index":866}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\join.rs","byte_start":173096,"byte_end":173104,"line_start":490,"line_end":490,"column_start":46,"column_end":54},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":901},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\join.rs","byte_start":177060,"byte_end":177071,"line_start":596,"line_end":596,"column_start":92,"column_end":103},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":942},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\count.rs","byte_start":182299,"byte_end":182309,"line_start":54,"line_end":54,"column_start":93,"column_end":103},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":4232},"to":{"krate":0,"index":982}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\count.rs","byte_start":182544,"byte_end":182552,"line_start":62,"line_end":62,"column_start":54,"column_end":62},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":311},"to":{"krate":0,"index":982}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\threshold.rs","byte_start":189063,"byte_end":189073,"line_start":93,"line_end":93,"column_start":97,"column_end":107},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":4232},"to":{"krate":0,"index":1024}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\threshold.rs","byte_start":189437,"byte_end":189445,"line_start":105,"line_end":105,"column_start":58,"column_end":66},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":311},"to":{"krate":0,"index":1024}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\mod.rs","byte_start":11784,"byte_end":11792,"line_start":32,"line_end":32,"column_start":22,"column_end":30},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1061},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\mod.rs","byte_start":14128,"byte_end":14140,"line_start":92,"line_end":92,"column_start":75,"column_end":87},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1086},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\operators\\mod.rs","byte_start":16407,"byte_end":16420,"line_start":165,"line_end":165,"column_start":35,"column_end":48},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1113},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\identifiers.rs","byte_start":194770,"byte_end":194780,"line_start":39,"line_end":39,"column_start":40,"column_end":50},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":4232},"to":{"krate":0,"index":1148}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\algorithms\\prefix_sum.rs","byte_start":200182,"byte_end":200192,"line_start":22,"line_end":22,"column_start":38,"column_end":48},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":4232},"to":{"krate":0,"index":1172}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lattice.rs","byte_start":223358,"byte_end":223370,"line_start":10,"line_end":10,"column_start":21,"column_end":33},"kind":"SuperTrait","from":{"krate":15,"index":2620},"to":{"krate":0,"index":1399}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\lattice.rs","byte_start":228197,"byte_end":228204,"line_start":165,"line_end":165,"column_start":44,"column_end":51},"kind":{"Impl":{"id":67}},"from":{"krate":15,"index":3688},"to":{"krate":0,"index":1399}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\cursor_pair.rs","byte_start":257093,"byte_end":257103,"line_start":18,"line_end":18,"column_start":49,"column_end":59},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1420},"to":{"krate":0,"index":1485}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\cursor_list.rs","byte_start":262684,"byte_end":262694,"line_start":17,"line_end":17,"column_start":41,"column_end":51},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":3783},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\cursor_list.rs","byte_start":265377,"byte_end":265387,"line_start":90,"line_end":90,"column_start":64,"column_end":74},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":3783},"to":{"krate":0,"index":1485}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\mod.rs","byte_start":255746,"byte_end":255752,"line_start":64,"line_end":64,"column_start":65,"column_end":71},"kind":"SuperTrait","from":{"krate":0,"index":1485},"to":{"krate":0,"index":1509}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\cursor\\mod.rs","byte_start":256413,"byte_end":256414,"line_start":85,"line_end":85,"column_start":77,"column_end":78},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1517},"to":{"krate":0,"index":1509}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\description.rs","byte_start":271774,"byte_end":271785,"line_start":75,"line_end":75,"column_start":19,"column_end":30},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":3800},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\description.rs","byte_start":272158,"byte_end":272169,"line_start":88,"line_end":88,"column_start":12,"column_end":23},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":3800},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\spine_fueled_neu.rs","byte_start":280965,"byte_end":280970,"line_start":102,"line_end":102,"column_start":37,"column_end":42},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1547},"to":{"krate":0,"index":3011}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\spine_fueled_neu.rs","byte_start":286614,"byte_end":286619,"line_start":234,"line_end":234,"column_start":31,"column_end":36},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1547},"to":{"krate":0,"index":3030}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\spine_fueled_neu.rs","byte_start":289295,"byte_end":289300,"line_start":309,"line_end":309,"column_start":21,"column_end":26},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1547},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\spine_fueled_neu.rs","byte_start":307849,"byte_end":307859,"line_start":711,"line_end":711,"column_start":44,"column_end":54},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1624},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\spine_fueled_neu.rs","byte_start":311987,"byte_end":311999,"line_start":816,"line_end":816,"column_start":40,"column_end":52},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1654},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\merge_batcher.rs","byte_start":313768,"byte_end":313780,"line_start":18,"line_end":18,"column_start":48,"column_end":60},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1686},"to":{"krate":0,"index":3057}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\merge_batcher.rs","byte_start":317000,"byte_end":317008,"line_start":120,"line_end":120,"column_start":9,"column_end":17},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1709},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\merge_batcher.rs","byte_start":318793,"byte_end":318804,"line_start":179,"line_end":179,"column_start":36,"column_end":47},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1727},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":327927,"byte_end":327938,"line_start":63,"line_end":63,"column_start":49,"column_end":60},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":3823},"to":{"krate":0,"index":3035}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":328500,"byte_end":328511,"line_start":77,"line_end":77,"column_start":43,"column_end":54},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":3823},"to":{"krate":0,"index":3047}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":329001,"byte_end":329012,"line_start":94,"line_end":94,"column_start":21,"column_end":32},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":3823},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":333549,"byte_end":333561,"line_start":215,"line_end":215,"column_start":72,"column_end":84},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1836},"to":{"krate":0,"index":3079}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":337320,"byte_end":337332,"line_start":317,"line_end":317,"column_start":44,"column_end":56},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":3852},"to":{"krate":0,"index":1485}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":339384,"byte_end":339397,"line_start":359,"line_end":359,"column_start":73,"column_end":86},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1880},"to":{"krate":0,"index":3067}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":340801,"byte_end":340812,"line_start":410,"line_end":410,"column_start":47,"column_end":58},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":3864},"to":{"krate":0,"index":3035}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":341392,"byte_end":341403,"line_start":430,"line_end":430,"column_start":41,"column_end":52},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":3864},"to":{"krate":0,"index":3047}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":341838,"byte_end":341849,"line_start":446,"line_end":446,"column_start":18,"column_end":29},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":3864},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":344904,"byte_end":344916,"line_start":535,"line_end":535,"column_start":67,"column_end":79},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1921},"to":{"krate":0,"index":3079}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":348847,"byte_end":348859,"line_start":639,"line_end":639,"column_start":42,"column_end":54},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":3890},"to":{"krate":0,"index":1485}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\implementations\\ord.rs","byte_start":350721,"byte_end":350734,"line_start":680,"line_end":680,"column_start":68,"column_end":81},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1962},"to":{"krate":0,"index":3067}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":358441,"byte_end":358445,"line_start":11,"line_end":11,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1542},"to":{"krate":0,"index":1993}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":358448,"byte_end":358457,"line_start":11,"line_end":11,"column_start":29,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":2039},"to":{"krate":0,"index":1993}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":358460,"byte_end":358463,"line_start":11,"line_end":11,"column_start":41,"column_end":44},"kind":"SuperTrait","from":{"krate":2,"index":1595},"to":{"krate":0,"index":1993}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":358479,"byte_end":358482,"line_start":11,"line_end":11,"column_start":60,"column_end":63},"kind":"SuperTrait","from":{"krate":2,"index":1600},"to":{"krate":0,"index":1993}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":358498,"byte_end":358505,"line_start":11,"line_end":11,"column_start":79,"column_end":86},"kind":"SuperTrait","from":{"krate":2,"index":2228},"to":{"krate":0,"index":1993}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":358515,"byte_end":358522,"line_start":11,"line_end":11,"column_start":96,"column_end":103},"kind":"SuperTrait","from":{"krate":2,"index":2224},"to":{"krate":0,"index":1993}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":358556,"byte_end":358557,"line_start":14,"line_end":14,"column_start":23,"column_end":24},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1995},"to":{"krate":0,"index":1993}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":359422,"byte_end":359434,"line_start":39,"line_end":39,"column_start":24,"column_end":36},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":3903},"to":{"krate":0,"index":2112}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":360622,"byte_end":360636,"line_start":88,"line_end":88,"column_start":27,"column_end":41},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2007},"to":{"krate":0,"index":2122}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":361274,"byte_end":361288,"line_start":111,"line_end":111,"column_start":32,"column_end":46},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2007},"to":{"krate":0,"index":2126}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":362905,"byte_end":362919,"line_start":157,"line_end":157,"column_start":15,"column_end":29},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":2007},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":364680,"byte_end":364694,"line_start":204,"line_end":204,"column_start":32,"column_end":46},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":2007},"to":{"krate":0,"index":2130}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered.rs","byte_start":366160,"byte_end":366173,"line_start":247,"line_end":247,"column_start":49,"column_end":62},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":3943},"to":{"krate":0,"index":2135}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered_leaf.rs","byte_start":368116,"byte_end":368127,"line_start":14,"line_end":14,"column_start":49,"column_end":60},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":3951},"to":{"krate":0,"index":2112}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered_leaf.rs","byte_start":368780,"byte_end":368798,"line_start":35,"line_end":35,"column_start":52,"column_end":70},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2076},"to":{"krate":0,"index":2122}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered_leaf.rs","byte_start":369025,"byte_end":369043,"line_start":41,"line_end":41,"column_start":57,"column_end":75},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2076},"to":{"krate":0,"index":2126}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered_leaf.rs","byte_start":371590,"byte_end":371608,"line_start":97,"line_end":97,"column_start":57,"column_end":75},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":2076},"to":{"krate":0,"index":2130}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\ordered_leaf.rs","byte_start":372191,"byte_end":372208,"line_start":113,"line_end":113,"column_start":56,"column_end":73},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":3983},"to":{"krate":0,"index":2135}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":352257,"byte_end":352262,"line_start":18,"line_end":18,"column_start":34,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":1539},"to":{"krate":0,"index":2112}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":354501,"byte_end":354508,"line_start":66,"line_end":66,"column_start":26,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":2122},"to":{"krate":0,"index":2126}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\layers\\mod.rs","byte_start":355098,"byte_end":355105,"line_start":76,"line_end":76,"column_start":26,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":2122},"to":{"krate":0,"index":2130}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":373674,"byte_end":373684,"line_start":21,"line_end":21,"column_start":27,"column_end":37},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2159},"to":{"krate":2,"index":2179}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":373938,"byte_end":373948,"line_start":34,"line_end":34,"column_start":34,"column_end":44},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2159},"to":{"krate":0,"index":3011}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":375959,"byte_end":375969,"line_start":97,"line_end":97,"column_start":18,"column_end":28},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2159},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":376537,"byte_end":376547,"line_start":121,"line_end":121,"column_start":53,"column_end":63},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2191},"to":{"krate":2,"index":2179}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":376843,"byte_end":376853,"line_start":131,"line_end":131,"column_start":62,"column_end":72},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2191},"to":{"krate":0,"index":3035}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":377274,"byte_end":377284,"line_start":146,"line_end":146,"column_start":29,"column_end":39},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2191},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":378244,"byte_end":378255,"line_start":172,"line_end":172,"column_start":49,"column_end":60},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":378487,"byte_end":378498,"line_start":181,"line_end":181,"column_start":57,"column_end":68},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2231},"to":{"krate":0,"index":1485}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":380163,"byte_end":380179,"line_start":220,"line_end":220,"column_start":54,"column_end":70},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2271},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter.rs","byte_start":380449,"byte_end":380465,"line_start":229,"line_end":229,"column_start":82,"column_end":98},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2271},"to":{"krate":0,"index":1485}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":382395,"byte_end":382405,"line_start":21,"line_end":21,"column_start":29,"column_end":39},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2320},"to":{"krate":2,"index":2179}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":382716,"byte_end":382726,"line_start":36,"line_end":36,"column_start":36,"column_end":46},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":2320},"to":{"krate":0,"index":3011}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":384898,"byte_end":384908,"line_start":102,"line_end":102,"column_start":21,"column_end":31},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":2320},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":385534,"byte_end":385544,"line_start":128,"line_end":128,"column_start":63,"column_end":73},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2357},"to":{"krate":2,"index":2179}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":385885,"byte_end":385895,"line_start":139,"line_end":139,"column_start":65,"column_end":75},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":2357},"to":{"krate":0,"index":3035}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":386385,"byte_end":386395,"line_start":155,"line_end":155,"column_start":32,"column_end":42},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":2357},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":387401,"byte_end":387412,"line_start":183,"line_end":183,"column_start":52,"column_end":63},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":2402},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":387671,"byte_end":387682,"line_start":193,"line_end":193,"column_start":60,"column_end":71},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":2402},"to":{"krate":0,"index":1485}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":389508,"byte_end":389524,"line_start":237,"line_end":237,"column_start":57,"column_end":73},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":2446},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\enter_at.rs","byte_start":389821,"byte_end":389837,"line_start":247,"line_end":247,"column_start":85,"column_end":101},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":2446},"to":{"krate":0,"index":1485}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":392077,"byte_end":392090,"line_start":22,"line_end":22,"column_start":20,"column_end":33},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":2498},"to":{"krate":2,"index":2179}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":392333,"byte_end":392346,"line_start":35,"line_end":35,"column_start":26,"column_end":39},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":2498},"to":{"krate":0,"index":3011}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":393634,"byte_end":393647,"line_start":69,"line_end":69,"column_start":10,"column_end":23},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":2498},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":394135,"byte_end":394148,"line_start":91,"line_end":91,"column_start":45,"column_end":58},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":2525},"to":{"krate":2,"index":2179}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":394420,"byte_end":394433,"line_start":101,"line_end":101,"column_start":49,"column_end":62},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":2525},"to":{"krate":0,"index":3035}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":394835,"byte_end":394848,"line_start":115,"line_end":115,"column_start":21,"column_end":34},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":2525},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":395425,"byte_end":395439,"line_start":137,"line_end":137,"column_start":48,"column_end":62},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":2558},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":395702,"byte_end":395716,"line_start":147,"line_end":147,"column_start":44,"column_end":58},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":2558},"to":{"krate":0,"index":1485}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":397489,"byte_end":397508,"line_start":190,"line_end":190,"column_start":53,"column_end":72},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":2596},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\frontier.rs","byte_start":397809,"byte_end":397828,"line_start":200,"line_end":200,"column_start":69,"column_end":88},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":2596},"to":{"krate":0,"index":1485}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\rc.rs","byte_start":401140,"byte_end":401148,"line_start":41,"line_end":41,"column_start":10,"column_end":18},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":2641},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\rc.rs","byte_start":403947,"byte_end":403954,"line_start":104,"line_end":104,"column_start":26,"column_end":33},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":2657},"to":{"krate":0,"index":3011}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\rc.rs","byte_start":405654,"byte_end":405661,"line_start":143,"line_end":143,"column_start":10,"column_end":17},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":2657},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\rc.rs","byte_start":406248,"byte_end":406255,"line_start":163,"line_end":163,"column_start":20,"column_end":27},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":2657},"to":{"krate":2,"index":2179}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\rc.rs","byte_start":406805,"byte_end":406812,"line_start":180,"line_end":180,"column_start":19,"column_end":26},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":2657},"to":{"krate":2,"index":1725}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":407470,"byte_end":407481,"line_start":14,"line_end":14,"column_start":22,"column_end":33},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":2693},"to":{"krate":2,"index":2179}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":407715,"byte_end":407726,"line_start":27,"line_end":27,"column_start":29,"column_end":40},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":2693},"to":{"krate":0,"index":3011}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":409050,"byte_end":409061,"line_start":62,"line_end":62,"column_start":13,"column_end":24},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":2693},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":409511,"byte_end":409522,"line_start":84,"line_end":84,"column_start":48,"column_end":59},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":2724},"to":{"krate":2,"index":2179}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":409792,"byte_end":409803,"line_start":94,"line_end":94,"column_start":52,"column_end":63},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":2724},"to":{"krate":0,"index":3035}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":410243,"byte_end":410254,"line_start":109,"line_end":109,"column_start":24,"column_end":35},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":2724},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":410785,"byte_end":410797,"line_start":131,"line_end":131,"column_start":44,"column_end":56},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":2761},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":411036,"byte_end":411048,"line_start":141,"line_end":141,"column_start":47,"column_end":59},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":2761},"to":{"krate":0,"index":1485}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":412746,"byte_end":412763,"line_start":183,"line_end":183,"column_start":49,"column_end":66},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":2801},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\filter.rs","byte_start":413040,"byte_end":413057,"line_start":193,"line_end":193,"column_start":72,"column_end":89},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":2801},"to":{"krate":0,"index":1485}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":416968,"byte_end":416979,"line_start":66,"line_end":66,"column_start":22,"column_end":33},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":2857},"to":{"krate":2,"index":2179}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":417274,"byte_end":417285,"line_start":80,"line_end":80,"column_start":29,"column_end":40},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":2857},"to":{"krate":0,"index":3011}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":418686,"byte_end":418697,"line_start":118,"line_end":118,"column_start":13,"column_end":24},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":2857},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":419311,"byte_end":419322,"line_start":145,"line_end":145,"column_start":48,"column_end":59},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":2888},"to":{"krate":2,"index":2179}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":419590,"byte_end":419601,"line_start":155,"line_end":155,"column_start":52,"column_end":63},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":2888},"to":{"krate":0,"index":3035}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":420028,"byte_end":420039,"line_start":170,"line_end":170,"column_start":24,"column_end":35},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":2888},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":420609,"byte_end":420621,"line_start":193,"line_end":193,"column_start":44,"column_end":56},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":2925},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":420876,"byte_end":420888,"line_start":203,"line_end":203,"column_start":47,"column_end":59},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":2925},"to":{"krate":0,"index":1485}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":422587,"byte_end":422604,"line_start":244,"line_end":244,"column_start":49,"column_end":66},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":2966},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\wrappers\\freeze.rs","byte_start":422897,"byte_end":422914,"line_start":254,"line_end":254,"column_start":72,"column_end":89},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":2966},"to":{"krate":0,"index":1485}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":237489,"byte_end":237500,"line_start":163,"line_end":163,"column_start":19,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":3011},"to":{"krate":0,"index":3030}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":240157,"byte_end":240168,"line_start":219,"line_end":219,"column_start":31,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":3035},"to":{"krate":0,"index":3047}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":243149,"byte_end":243151,"line_start":294,"line_end":294,"column_start":69,"column_end":71},"kind":{"Impl":{"id":174}},"from":{"krate":5,"index":2702},"to":{"krate":0,"index":3035}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":243855,"byte_end":243868,"line_start":315,"line_end":315,"column_start":47,"column_end":60},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":3108},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":244114,"byte_end":244127,"line_start":324,"line_end":324,"column_start":70,"column_end":83},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":3108},"to":{"krate":0,"index":1485}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":245455,"byte_end":245457,"line_start":350,"line_end":350,"column_start":56,"column_end":58},"kind":{"Impl":{"id":177}},"from":{"krate":5,"index":2702},"to":{"krate":0,"index":3047}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":245844,"byte_end":245853,"line_start":360,"line_end":360,"column_start":64,"column_end":73},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":3153},"to":{"krate":0,"index":3057}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":246461,"byte_end":246470,"line_start":371,"line_end":371,"column_start":64,"column_end":73},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":3170},"to":{"krate":0,"index":3067}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":247114,"byte_end":247122,"line_start":382,"line_end":382,"column_start":63,"column_end":71},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":3187},"to":{"krate":0,"index":3079}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":247834,"byte_end":247844,"line_start":400,"line_end":400,"column_start":81,"column_end":91},"kind":{"Impl":{"id":181}},"from":{"krate":17,"index":26},"to":{"krate":0,"index":3035}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":248581,"byte_end":248602,"line_start":421,"line_end":421,"column_start":47,"column_end":68},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":3227},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":248868,"byte_end":248889,"line_start":430,"line_end":430,"column_start":82,"column_end":103},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":3227},"to":{"krate":0,"index":1485}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":250246,"byte_end":250256,"line_start":456,"line_end":456,"column_start":68,"column_end":78},"kind":{"Impl":{"id":184}},"from":{"krate":17,"index":26},"to":{"krate":0,"index":3047}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":250712,"byte_end":250729,"line_start":466,"line_end":466,"column_start":92,"column_end":109},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":3272},"to":{"krate":0,"index":3057}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":251580,"byte_end":251597,"line_start":482,"line_end":482,"column_start":92,"column_end":109},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":3289},"to":{"krate":0,"index":3067}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\trace\\mod.rs","byte_start":252492,"byte_end":252508,"line_start":498,"line_end":498,"column_start":91,"column_end":107},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":3306},"to":{"krate":0,"index":3079}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":425272,"byte_end":425283,"line_start":19,"line_end":19,"column_start":19,"column_end":30},"kind":"SuperTrait","from":{"krate":15,"index":705},"to":{"krate":0,"index":3332}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":428648,"byte_end":428649,"line_start":116,"line_end":116,"column_start":32,"column_end":33},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":3344},"to":{"krate":0,"index":3332}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":431382,"byte_end":431394,"line_start":195,"line_end":195,"column_start":35,"column_end":47},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":3356},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":432304,"byte_end":432316,"line_start":216,"line_end":216,"column_start":49,"column_end":61},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":3356},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\input.rs","byte_start":435594,"byte_end":435606,"line_start":304,"line_end":304,"column_start":58,"column_end":70},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":3356},"to":{"krate":2,"index":1725}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":437058,"byte_end":437067,"line_start":27,"line_end":27,"column_start":31,"column_end":40},"kind":"SuperTrait","from":{"krate":2,"index":1628},"to":{"krate":0,"index":3394}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":437095,"byte_end":437100,"line_start":27,"line_end":27,"column_start":68,"column_end":73},"kind":"SuperTrait","from":{"krate":2,"index":1539},"to":{"krate":0,"index":3394}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":437103,"byte_end":437107,"line_start":27,"line_end":27,"column_start":76,"column_end":80},"kind":"SuperTrait","from":{"krate":0,"index":18},"to":{"krate":0,"index":3394}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":437110,"byte_end":437115,"line_start":27,"line_end":27,"column_start":83,"column_end":88},"kind":"SuperTrait","from":{"krate":2,"index":2179},"to":{"krate":0,"index":3394}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":438107,"byte_end":438116,"line_start":65,"line_end":65,"column_start":20,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":3394},"to":{"krate":0,"index":3409}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":438849,"byte_end":438855,"line_start":100,"line_end":100,"column_start":21,"column_end":27},"kind":"SuperTrait","from":{"krate":0,"index":3409},"to":{"krate":0,"index":3423}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":438858,"byte_end":438861,"line_start":100,"line_end":100,"column_start":30,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":1622},"to":{"krate":0,"index":3423}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":438926,"byte_end":438927,"line_start":101,"line_end":101,"column_start":48,"column_end":49},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":3425},"to":{"krate":0,"index":3423}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":439679,"byte_end":439686,"line_start":118,"line_end":118,"column_start":45,"column_end":52},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":3988},"to":{"krate":2,"index":1628}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":439770,"byte_end":439777,"line_start":122,"line_end":122,"column_start":31,"column_end":38},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":3988},"to":{"krate":2,"index":1605}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":439871,"byte_end":439878,"line_start":129,"line_end":129,"column_start":28,"column_end":35},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":3988},"to":{"krate":0,"index":3394}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":440715,"byte_end":440723,"line_start":154,"line_end":154,"column_start":15,"column_end":23},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":4036},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":440953,"byte_end":440961,"line_start":164,"line_end":164,"column_start":51,"column_end":59},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":4036},"to":{"krate":0,"index":3394}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":441166,"byte_end":441174,"line_start":170,"line_end":170,"column_start":93,"column_end":101},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":4036},"to":{"krate":2,"index":1628}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":441349,"byte_end":441357,"line_start":177,"line_end":177,"column_start":33,"column_end":41},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":4036},"to":{"krate":2,"index":1622}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":441616,"byte_end":441624,"line_start":187,"line_end":187,"column_start":51,"column_end":59},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":4036},"to":{"krate":2,"index":1605}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":442658,"byte_end":442668,"line_start":222,"line_end":222,"column_start":10,"column_end":20},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":4145},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":442840,"byte_end":442850,"line_start":230,"line_end":230,"column_start":27,"column_end":37},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":4145},"to":{"krate":2,"index":3808}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":443021,"byte_end":443031,"line_start":238,"line_end":238,"column_start":30,"column_end":40},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":4145},"to":{"krate":2,"index":1703}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":443155,"byte_end":443165,"line_start":245,"line_end":245,"column_start":33,"column_end":43},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":4145},"to":{"krate":2,"index":1714}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":443286,"byte_end":443296,"line_start":251,"line_end":251,"column_start":35,"column_end":45},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":4145},"to":{"krate":0,"index":3394}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":443463,"byte_end":443473,"line_start":257,"line_end":257,"column_start":71,"column_end":81},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":4145},"to":{"krate":2,"index":1628}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":443933,"byte_end":443943,"line_start":274,"line_end":274,"column_start":39,"column_end":49},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":4145},"to":{"krate":2,"index":1622}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\difference.rs","byte_start":444177,"byte_end":444187,"line_start":285,"line_end":285,"column_start":38,"column_end":48},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":4145},"to":{"krate":2,"index":1605}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":446982,"byte_end":446992,"line_start":49,"line_end":49,"column_start":39,"column_end":49},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":4232},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":463148,"byte_end":463158,"line_start":498,"line_end":498,"column_start":57,"column_end":67},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":4232},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":464155,"byte_end":464165,"line_start":535,"line_end":535,"column_start":37,"column_end":47},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":4232},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\collection.rs","byte_start":466883,"byte_end":466889,"line_start":616,"line_end":616,"column_start":65,"column_end":71},"kind":{"Impl":{"id":233}},"from":{"krate":15,"index":3622},"to":{"krate":0,"index":3598}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":469453,"byte_end":469470,"line_start":43,"line_end":43,"column_start":27,"column_end":44},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":4242},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":469817,"byte_end":469834,"line_start":55,"line_end":55,"column_start":26,"column_end":43},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":4242},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":470353,"byte_end":470370,"line_start":72,"line_end":72,"column_start":27,"column_end":44},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":4242},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":470779,"byte_end":470796,"line_start":85,"line_end":85,"column_start":31,"column_end":48},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":4242},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\differential-dataflow-0.11.0\\src\\logging.rs","byte_start":471157,"byte_end":471174,"line_start":96,"line_end":96,"column_start":27,"column_end":44},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":4242},"to":{"krate":2,"index":2221}}]}