{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3","program":"C:\\Users\\xhimi\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--edition=2018","--crate-name","synstructure","C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"proc-macro\"","-C","metadata=79ce69216113e03e","-C","extra-filename=-79ce69216113e03e","--out-dir","c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps","--extern","proc_macro2=c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps\\libproc_macro2-c6f8430a80ef3b3d.rmeta","--extern","quote=c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps\\libquote-39a748fda729a47c.rmeta","--extern","syn=c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps\\libsyn-85ed372b2351c624.rmeta","--extern","unicode_xid=c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps\\libunicode_xid-511b5df6752f62d1.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\xhimi\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps\\libsynstructure-79ce69216113e03e.rmeta"},"prelude":{"crate_id":{"name":"synstructure","disambiguator":[5478997797093546671,15749516144037673141]},"crate_root":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src","external_crates":[{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12578048494495979596,2047601184299498072]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[9458200224090790355,13573932773036415113]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17212932621614837670,6562776948220383497]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[760535750034822653,11118367618612043106]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9863315158332858256,17125058067034963864]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[4687805557387852666,9943473115938981341]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[11895006708321731812,14562333644307237348]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[3795917533932740915,1352930594861700352]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[14246119625412523820,1488400038702589601]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[301469929213911528,4015090225475952437]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[2057170103176572375,2047842178592089941]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5373388065014169986,7291481803049279744]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[11217907578908536000,17992819105755382748]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","num":14,"id":{"name":"proc_macro","disambiguator":[10729352378666065678,10044175282915293931]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","num":15,"id":{"name":"syn","disambiguator":[11174818971018005431,1935807697398526678]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","num":16,"id":{"name":"proc_macro2","disambiguator":[1561624961482981002,17614139826988748976]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","num":17,"id":{"name":"unicode_xid","disambiguator":[11594923260645546290,10614941037087216369]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","num":18,"id":{"name":"quote","disambiguator":[11687411484556905501,1833886221850335919]}}],"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":0,"byte_end":77208,"line_start":1,"line_end":2365,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":18,"index":260},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":5842,"byte_end":5847,"line_start":172,"line_end":172,"column_start":16,"column_end":21},"alias_span":null,"name":"quote","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":724},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\macros.rs","byte_start":77500,"byte_end":77511,"line_start":6,"line_end":6,"column_start":22,"column_end":33},"alias_span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\macros.rs","byte_start":77515,"byte_end":77527,"line_start":6,"line_end":6,"column_start":37,"column_end":49},"name":"TokenStream2","value":"","parent":{"krate":0,"index":56}},{"kind":"Use","ref_id":{"krate":15,"index":2224},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\macros.rs","byte_start":77543,"byte_end":77552,"line_start":7,"line_end":7,"column_start":15,"column_end":24},"alias_span":null,"name":"parse_str","value":"","parent":{"krate":0,"index":56}},{"kind":"Use","ref_id":{"krate":15,"index":6937},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\macros.rs","byte_start":77554,"byte_end":77565,"line_start":7,"line_end":7,"column_start":26,"column_end":37},"alias_span":null,"name":"DeriveInput","value":"","parent":{"krate":0,"index":56}},{"kind":"Use","ref_id":{"krate":14,"index":2879},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\macros.rs","byte_start":77717,"byte_end":77728,"line_start":13,"line_end":13,"column_start":21,"column_end":32},"alias_span":null,"name":"TokenStream","value":"","parent":{"krate":0,"index":56}},{"kind":"Use","ref_id":{"krate":15,"index":1970},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\macros.rs","byte_start":77871,"byte_end":77876,"line_start":18,"line_end":18,"column_start":14,"column_end":19},"alias_span":null,"name":"parse","value":"","parent":{"krate":0,"index":56}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":0,"byte_end":77208,"line_start":1,"line_end":2365,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":46},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":56},{"krate":0,"index":198},{"krate":0,"index":219},{"krate":0,"index":218},{"krate":0,"index":216},{"krate":0,"index":214},{"krate":0,"index":212},{"krate":0,"index":209},{"krate":0,"index":221},{"krate":0,"index":240},{"krate":0,"index":239},{"krate":0,"index":237},{"krate":0,"index":235},{"krate":0,"index":233},{"krate":0,"index":230},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":242},{"krate":0,"index":263},{"krate":0,"index":260},{"krate":0,"index":256},{"krate":0,"index":253},{"krate":0,"index":249},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":266},{"krate":0,"index":288},{"krate":0,"index":286},{"krate":0,"index":283},{"krate":0,"index":279},{"krate":0,"index":276},{"krate":0,"index":272},{"krate":0,"index":291},{"krate":0,"index":312},{"krate":0,"index":309},{"krate":0,"index":305},{"krate":0,"index":302},{"krate":0,"index":298},{"krate":0,"index":84},{"krate":0,"index":93},{"krate":0,"index":315},{"krate":0,"index":337},{"krate":0,"index":334},{"krate":0,"index":330},{"krate":0,"index":327},{"krate":0,"index":323},{"krate":0,"index":126},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":190},{"krate":0,"index":193},{"krate":0,"index":195}],"decl_id":null,"docs":" This crate provides helper types for matching against enum variants, and\n extracting bindings to each of the fields in the deriving Struct or Enum in\n a generic way.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\macros.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"macros","qualname":"::macros","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\macros.rs","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65}],"decl_id":null,"docs":" This module provides two utility macros for testing custom derives. They can\n be used together to eliminate some of the boilerplate required in order to\n declare and test custom derive implementations.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":199},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":6309,"byte_end":6313,"line_start":188,"line_end":188,"column_start":5,"column_end":9},"name":"Both","qualname":"::AddBounds::Both","value":"AddBounds::Both","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Add for fields and generics\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":201},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":6339,"byte_end":6345,"line_start":190,"line_end":190,"column_start":5,"column_end":11},"name":"Fields","qualname":"::AddBounds::Fields","value":"AddBounds::Fields","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Fields only\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":203},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":6373,"byte_end":6381,"line_start":192,"line_end":192,"column_start":5,"column_end":13},"name":"Generics","qualname":"::AddBounds::Generics","value":"AddBounds::Generics","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" Generics only\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":205},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":6400,"byte_end":6404,"line_start":194,"line_end":194,"column_start":5,"column_end":9},"name":"None","qualname":"::AddBounds::None","value":"AddBounds::None","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":" None\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":207},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":6429,"byte_end":6444,"line_start":196,"line_end":196,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::AddBounds::__Nonexhaustive","value":"AddBounds::__Nonexhaustive","parent":{"krate":0,"index":198},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":198},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":6257,"byte_end":6266,"line_start":186,"line_end":186,"column_start":10,"column_end":19},"name":"AddBounds","qualname":"::AddBounds","value":"AddBounds::{Both, Fields, Generics, None, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":201},{"krate":0,"index":203},{"krate":0,"index":205},{"krate":0,"index":207}],"decl_id":null,"docs":" Changes how bounds are added\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":222},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":6595,"byte_end":6599,"line_start":203,"line_end":203,"column_start":5,"column_end":9},"name":"Move","qualname":"::BindStyle::Move","value":"BindStyle::Move","parent":{"krate":0,"index":221},"children":[],"decl_id":null,"docs":" `x`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":224},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":6621,"byte_end":6628,"line_start":205,"line_end":205,"column_start":5,"column_end":12},"name":"MoveMut","qualname":"::BindStyle::MoveMut","value":"BindStyle::MoveMut","parent":{"krate":0,"index":221},"children":[],"decl_id":null,"docs":" `mut x`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":6650,"byte_end":6653,"line_start":207,"line_end":207,"column_start":5,"column_end":8},"name":"Ref","qualname":"::BindStyle::Ref","value":"BindStyle::Ref","parent":{"krate":0,"index":221},"children":[],"decl_id":null,"docs":" `ref x`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":6679,"byte_end":6685,"line_start":209,"line_end":209,"column_start":5,"column_end":11},"name":"RefMut","qualname":"::BindStyle::RefMut","value":"BindStyle::RefMut","parent":{"krate":0,"index":221},"children":[],"decl_id":null,"docs":" `ref mut x`\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":221},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":6567,"byte_end":6576,"line_start":201,"line_end":201,"column_start":10,"column_end":19},"name":"BindStyle","qualname":"::BindStyle","value":"BindStyle::{Move, MoveMut, Ref, RefMut}","parent":null,"children":[{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228}],"decl_id":null,"docs":" The type of binding to use when generating a pattern.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":242},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":11064,"byte_end":11075,"line_start":337,"line_end":337,"column_start":12,"column_end":23},"name":"BindingInfo","qualname":"::BindingInfo","value":"BindingInfo { binding, style }","parent":null,"children":[{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248}],"decl_id":null,"docs":" Information about a specific binding. This contains both an `Ident`\n reference to the given field, and the syn `&'a Field` descriptor for that\n field.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":244},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":11144,"byte_end":11151,"line_start":339,"line_end":339,"column_start":9,"column_end":16},"name":"binding","qualname":"::BindingInfo::binding","value":"proc_macro2::Ident","parent":{"krate":0,"index":242},"children":[],"decl_id":null,"docs":" The name which this BindingInfo will bind to.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":245},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":11233,"byte_end":11238,"line_start":342,"line_end":342,"column_start":9,"column_end":14},"name":"style","qualname":"::BindingInfo::style","value":"BindStyle","parent":{"krate":0,"index":242},"children":[],"decl_id":null,"docs":" The type of binding which this BindingInfo will create.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":11692,"byte_end":11695,"line_start":360,"line_end":360,"column_start":12,"column_end":15},"name":"ast","qualname":"<BindingInfo>::ast","value":"fn (&self) -> &'a Field","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying `syn` AST node which this\n `BindingInfo` references\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":12277,"byte_end":12280,"line_start":384,"line_end":384,"column_start":12,"column_end":15},"name":"pat","qualname":"<BindingInfo>::pat","value":"fn (&self) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Generates the pattern fragment for this field binding.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":13170,"byte_end":13190,"line_start":414,"line_end":414,"column_start":12,"column_end":32},"name":"referenced_ty_params","qualname":"<BindingInfo>::referenced_ty_params","value":"fn (&self) -> Vec<&'a Ident>","parent":null,"children":[],"decl_id":null,"docs":" Returns a list of the type parameters which are referenced in this\n field's type.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":266},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":13652,"byte_end":13662,"line_start":424,"line_end":424,"column_start":12,"column_end":22},"name":"VariantAst","qualname":"::VariantAst","value":"VariantAst { attrs, ident, fields, discriminant }","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271}],"decl_id":null,"docs":" This type is similar to `syn`'s `Variant` type, however each of the fields\n are references rather than owned. When this is used as the AST for a real\n variant, this struct simply borrows the fields of the `syn::Variant`,\n however this type may also be used as the sole variant for a struct.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":268},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":13677,"byte_end":13682,"line_start":425,"line_end":425,"column_start":9,"column_end":14},"name":"attrs","qualname":"::VariantAst::attrs","value":"&'a [syn::attr::Attribute]","parent":{"krate":0,"index":266},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":269},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":13709,"byte_end":13714,"line_start":426,"line_end":426,"column_start":9,"column_end":14},"name":"ident","qualname":"::VariantAst::ident","value":"&'a proc_macro2::Ident","parent":{"krate":0,"index":266},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":270},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":13735,"byte_end":13741,"line_start":427,"line_end":427,"column_start":9,"column_end":15},"name":"fields","qualname":"::VariantAst::fields","value":"&'a syn::data::Fields","parent":{"krate":0,"index":266},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":271},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":13763,"byte_end":13775,"line_start":428,"line_end":428,"column_start":9,"column_end":21},"name":"discriminant","qualname":"::VariantAst::discriminant","value":"&'a std::option::Option<(syn::token::Eq, syn::expr::Expr)>","parent":{"krate":0,"index":266},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":14003,"byte_end":14014,"line_start":434,"line_end":434,"column_start":12,"column_end":23},"name":"VariantInfo","qualname":"::VariantInfo","value":"VariantInfo { prefix }","parent":null,"children":[{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297}],"decl_id":null,"docs":" A wrapper around a `syn::DeriveInput`'s variant which provides utilities\n for destructuring `Variant`s with `match` expressions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":14029,"byte_end":14035,"line_start":435,"line_end":435,"column_start":9,"column_end":15},"name":"prefix","qualname":"::VariantInfo::prefix","value":"std::option::Option<&'a proc_macro2::Ident>","parent":{"krate":0,"index":291},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":16943,"byte_end":16951,"line_start":522,"line_end":522,"column_start":12,"column_end":20},"name":"bindings","qualname":"<VariantInfo>::bindings","value":"fn (&self) -> &[BindingInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice of the bindings in this Variant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":17085,"byte_end":17097,"line_start":527,"line_end":527,"column_start":12,"column_end":24},"name":"bindings_mut","qualname":"<VariantInfo>::bindings_mut","value":"fn (&mut self) -> &mut [BindingInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a mut slice of the bindings in this Variant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":17326,"byte_end":17329,"line_start":533,"line_end":533,"column_start":12,"column_end":15},"name":"ast","qualname":"<VariantInfo>::ast","value":"fn (&self) -> VariantAst<'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `VariantAst` object which contains references to the\n underlying `syn` AST node which this `Variant` was created from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":17458,"byte_end":17474,"line_start":538,"line_end":538,"column_start":12,"column_end":28},"name":"omitted_bindings","qualname":"<VariantInfo>::omitted_bindings","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if any bindings were omitted due to a `filter` call.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":18089,"byte_end":18092,"line_start":562,"line_end":562,"column_start":12,"column_end":15},"name":"pat","qualname":"<VariantInfo>::pat","value":"fn (&self) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Generates the match-arm pattern which could be used to match against this Variant.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":20217,"byte_end":20226,"line_start":629,"line_end":629,"column_start":12,"column_end":21},"name":"construct","qualname":"<VariantInfo>::construct","value":"fn <F, T> (&self, mut func: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Generates the token stream required to construct the current variant.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":22334,"byte_end":22338,"line_start":692,"line_end":692,"column_start":12,"column_end":16},"name":"each","qualname":"<VariantInfo>::each","value":"fn <F, R> (&self, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in a `BindingInfo`.\n and generating a `match` arm which evaluates the returned tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":23648,"byte_end":23652,"line_start":735,"line_end":735,"column_start":12,"column_end":16},"name":"fold","qualname":"<VariantInfo>::fold","value":"fn <F, I, R> (&self, init: I, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in the\n result of the previous call, and a `BindingInfo`. generating a `match`\n arm which evaluates to the resulting tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":25256,"byte_end":25262,"line_start":786,"line_end":786,"column_start":12,"column_end":18},"name":"filter","qualname":"<VariantInfo>::filter","value":"fn <F> (&mut self, f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Filter the bindings created by this `Variant` object. This has 2 effects:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":25688,"byte_end":25702,"line_start":803,"line_end":803,"column_start":12,"column_end":26},"name":"remove_binding","qualname":"<VariantInfo>::remove_binding","value":"fn (&mut self, idx: usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Remove the binding at the given index.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":26793,"byte_end":26802,"line_start":839,"line_end":839,"column_start":12,"column_end":21},"name":"bind_with","qualname":"<VariantInfo>::bind_with","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the `BindStyle` for each of the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":28198,"byte_end":28210,"line_start":885,"line_end":885,"column_start":12,"column_end":24},"name":"binding_name","qualname":"<VariantInfo>::binding_name","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the binding name for each fo the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":29227,"byte_end":29247,"line_start":920,"line_end":920,"column_start":12,"column_end":32},"name":"referenced_ty_params","qualname":"<VariantInfo>::referenced_ty_params","value":"fn (&self) -> Vec<&'a Ident>","parent":null,"children":[],"decl_id":null,"docs":" Returns a list of the type parameters which are referenced in this\n field's type.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":315},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":29656,"byte_end":29665,"line_start":932,"line_end":932,"column_start":12,"column_end":21},"name":"Structure","qualname":"::Structure","value":"Structure {  }","parent":null,"children":[{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322}],"decl_id":null,"docs":" A wrapper around a `syn::DeriveInput` which provides utilities for creating\n custom derive trait implementations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":30137,"byte_end":30140,"line_start":949,"line_end":949,"column_start":12,"column_end":15},"name":"new","qualname":"<Structure>::new","value":"fn (ast: &'a DeriveInput) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Structure` with the variants and fields from the passed-in\n `DeriveInput`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":30504,"byte_end":30511,"line_start":958,"line_end":958,"column_start":12,"column_end":19},"name":"try_new","qualname":"<Structure>::try_new","value":"fn (ast: &'a DeriveInput) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Structure` with the variants and fields from the passed-in\n `DeriveInput`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":32632,"byte_end":32640,"line_start":1015,"line_end":1015,"column_start":12,"column_end":20},"name":"variants","qualname":"<Structure>::variants","value":"fn (&self) -> &[VariantInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice of the variants in this Structure.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":32776,"byte_end":32788,"line_start":1020,"line_end":1020,"column_start":12,"column_end":24},"name":"variants_mut","qualname":"<Structure>::variants_mut","value":"fn (&mut self) -> &mut [VariantInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a mut slice of the variants in this Structure.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":32983,"byte_end":32986,"line_start":1026,"line_end":1026,"column_start":12,"column_end":15},"name":"ast","qualname":"<Structure>::ast","value":"fn (&self) -> &'a DeriveInput","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying `syn` AST node which this\n `Structure` was created from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":33125,"byte_end":33141,"line_start":1031,"line_end":1031,"column_start":12,"column_end":28},"name":"omitted_variants","qualname":"<Structure>::omitted_variants","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if any variants were omitted due to a `filter_variants` call.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":34242,"byte_end":34246,"line_start":1066,"line_end":1066,"column_start":12,"column_end":16},"name":"each","qualname":"<Structure>::each","value":"fn <F, R> (&self, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in a `BindingInfo`.\n and generating `match` arms which evaluate the returned tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":35714,"byte_end":35718,"line_start":1114,"line_end":1114,"column_start":12,"column_end":16},"name":"fold","qualname":"<Structure>::fold","value":"fn <F, I, R> (&self, init: I, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in the\n result of the previous call, and a `BindingInfo`. generating `match`\n arms which evaluate to the resulting tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":37220,"byte_end":37232,"line_start":1164,"line_end":1164,"column_start":12,"column_end":24},"name":"each_variant","qualname":"<Structure>::each_variant","value":"fn <F, R> (&self, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each variant, passing in a\n `VariantInfo`. and generating `match` arms which evaluate the returned\n tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":38898,"byte_end":38904,"line_start":1218,"line_end":1218,"column_start":12,"column_end":18},"name":"filter","qualname":"<Structure>::filter","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Filter the bindings created by this `Structure` object. This has 2 effects:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":40433,"byte_end":40452,"line_start":1267,"line_end":1267,"column_start":12,"column_end":31},"name":"add_where_predicate","qualname":"<Structure>::add_where_predicate","value":"fn (&mut self, pred: WherePredicate) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Specify additional where predicate bounds which should be generated by\n impl-generating functions such as `gen_impl`, `bound_impl`, and\n `unsafe_bound_impl`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":41822,"byte_end":41832,"line_start":1311,"line_end":1311,"column_start":12,"column_end":22},"name":"add_bounds","qualname":"<Structure>::add_bounds","value":"fn (&mut self, mode: AddBounds) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Specify which bounds should be generated by impl-generating functions\n such as `gen_impl`, `bound_impl`, and `unsafe_bound_impl`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":42995,"byte_end":43010,"line_start":1350,"line_end":1350,"column_start":12,"column_end":27},"name":"filter_variants","qualname":"<Structure>::filter_variants","value":"fn <F> (&mut self, f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Filter the variants matched by this `Structure` object. This has 2 effects:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":43438,"byte_end":43452,"line_start":1367,"line_end":1367,"column_start":12,"column_end":26},"name":"remove_variant","qualname":"<Structure>::remove_variant","value":"fn (&mut self, idx: usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Remove the variant at the given index.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":44531,"byte_end":44540,"line_start":1403,"line_end":1403,"column_start":12,"column_end":21},"name":"bind_with","qualname":"<Structure>::bind_with","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the `BindStyle` for each of the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":45896,"byte_end":45908,"line_start":1449,"line_end":1449,"column_start":12,"column_end":24},"name":"binding_name","qualname":"<Structure>::binding_name","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the binding name for each fo the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":46953,"byte_end":46973,"line_start":1486,"line_end":1486,"column_start":12,"column_end":32},"name":"referenced_ty_params","qualname":"<Structure>::referenced_ty_params","value":"fn (&self) -> Vec<&'a Ident>","parent":null,"children":[],"decl_id":null,"docs":" Returns a list of the type parameters which are refrenced in the types\n of non-filtered fields / variants.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":48586,"byte_end":48602,"line_start":1534,"line_end":1534,"column_start":12,"column_end":28},"name":"add_impl_generic","qualname":"<Structure>::add_impl_generic","value":"fn (&mut self, param: GenericParam) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Adds an `impl<>` generic parameter.\n This can be used when the trait to be derived needs some extra generic parameters.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":49089,"byte_end":49105,"line_start":1547,"line_end":1547,"column_start":12,"column_end":28},"name":"add_trait_bounds","qualname":"<Structure>::add_trait_bounds","value":"fn (&self, bound: &TraitBound, where_clause: &mut Option<WhereClause>, mode: AddBounds) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add trait bounds for a trait with the given path for each type parmaeter\n referenced in the types of non-filtered fields.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":53726,"byte_end":53736,"line_start":1675,"line_end":1675,"column_start":12,"column_end":22},"name":"bound_impl","qualname":"<Structure>::bound_impl","value":"fn <P, B> (&self, path: P, body: B) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" > NOTE: This methods' features are superceded by `Structure::gen_impl`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":56211,"byte_end":56228,"line_start":1745,"line_end":1745,"column_start":12,"column_end":29},"name":"unsafe_bound_impl","qualname":"<Structure>::unsafe_bound_impl","value":"fn <P, B> (&self, path: P, body: B) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" > NOTE: This methods' features are superceded by `Structure::gen_impl`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":58261,"byte_end":58273,"line_start":1805,"line_end":1805,"column_start":12,"column_end":24},"name":"unbound_impl","qualname":"<Structure>::unbound_impl","value":"fn <P, B> (&self, path: P, body: B) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" > NOTE: This methods' features are superceded by `Structure::gen_impl`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":60356,"byte_end":60375,"line_start":1866,"line_end":1866,"column_start":12,"column_end":31},"name":"unsafe_unbound_impl","qualname":"<Structure>::unsafe_unbound_impl","value":"fn <P, B> (&self, path: P, body: B) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" > NOTE: This methods' features are superceded by `Structure::gen_impl`.","sig":null,"attributes":[{"value":"deprecated","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":60331,"byte_end":60344,"line_start":1865,"line_end":1865,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":69739,"byte_end":69747,"line_start":2126,"line_end":2126,"column_start":12,"column_end":20},"name":"gen_impl","qualname":"<Structure>::gen_impl","value":"fn (&self, cfg: TokenStream) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Generate an impl block for the given struct. This impl block will\n automatically use hygiene tricks to avoid polluting the caller's\n namespace, and will automatically add trait bounds for generic type\n parameters.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":184},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":74601,"byte_end":74615,"line_start":2278,"line_end":2278,"column_start":8,"column_end":22},"name":"unpretty_print","qualname":"::unpretty_print","value":"fn <T> (ts: T) -> String","parent":null,"children":[],"decl_id":null,"docs":" Dumps an unpretty version of a tokenstream. Takes any type which implements\n `Display`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":187},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":75636,"byte_end":75647,"line_start":2311,"line_end":2311,"column_start":11,"column_end":22},"name":"MacroResult","qualname":"::MacroResult","value":"MacroResult","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189}],"decl_id":null,"docs":" Helper trait describing values which may be returned by macro implementation\n methods used by this crate's macros.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":75738,"byte_end":75749,"line_start":2313,"line_end":2313,"column_start":8,"column_end":19},"name":"into_result","qualname":"::MacroResult::into_result","value":"fn (self) -> Result<TokenStream>","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":" Convert this result into a `Result` for further processing / validation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":76332,"byte_end":76343,"line_start":2327,"line_end":2327,"column_start":8,"column_end":19},"name":"into_stream","qualname":"::MacroResult::into_stream","value":"fn (self) -> proc_macro::TokenStream","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":" Convert this result into a `proc_macro::TokenStream`, ready to return\n from a native `proc_macro` implementation.","sig":null,"attributes":[{"value":"cfg(all\n      (not\n       (all\n        (target_arch = \"wasm32\", any\n         (target_os = \"unknown\", target_os = \"wasi\"))), feature =\n       \"proc-macro\"))","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":76185,"byte_end":76324,"line_start":2323,"line_end":2326,"column_start":5,"column_end":8}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":6708,"byte_end":6717,"line_start":212,"line_end":212,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":11430,"byte_end":11441,"line_start":351,"line_end":351,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":11558,"byte_end":11569,"line_start":357,"line_end":357,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":14675,"byte_end":14691,"line_start":453,"line_end":453,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":15673,"byte_end":15684,"line_start":486,"line_end":486,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":109},{"krate":0,"index":113},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":123},{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":29879,"byte_end":29888,"line_start":941,"line_end":941,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":143},{"krate":0,"index":147},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":159},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":167},{"krate":0,"index":170},{"krate":0,"index":173},{"krate":0,"index":176},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":31642,"byte_end":31656,"line_start":982,"line_end":982,"column_start":38,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":76717,"byte_end":76728,"line_start":2342,"line_end":2342,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":76909,"byte_end":76920,"line_start":2352,"line_end":2352,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":77036,"byte_end":77042,"line_start":2358,"line_end":2358,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":6155,"byte_end":6161,"line_start":182,"line_end":182,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":56}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":6708,"byte_end":6717,"line_start":212,"line_end":212,"column_start":19,"column_end":28},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":221},"to":{"krate":18,"index":81}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":11430,"byte_end":11441,"line_start":351,"line_end":351,"column_start":23,"column_end":34},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":242},"to":{"krate":18,"index":81}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":11558,"byte_end":11569,"line_start":357,"line_end":357,"column_start":10,"column_end":21},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":242},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":14675,"byte_end":14691,"line_start":453,"line_end":453,"column_start":28,"column_end":44},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":85},"to":{"krate":15,"index":7760}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":15673,"byte_end":15684,"line_start":486,"line_end":486,"column_start":10,"column_end":21},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":291},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":29879,"byte_end":29888,"line_start":941,"line_end":941,"column_start":10,"column_end":19},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":31642,"byte_end":31656,"line_start":982,"line_end":982,"column_start":38,"column_end":52},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":131},"to":{"krate":2,"index":1544}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":76717,"byte_end":76728,"line_start":2342,"line_end":2342,"column_start":34,"column_end":45},"kind":{"Impl":{"id":7}},"from":{"krate":14,"index":2879},"to":{"krate":0,"index":187}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":76909,"byte_end":76920,"line_start":2352,"line_end":2352,"column_start":22,"column_end":33},"kind":{"Impl":{"id":8}},"from":{"krate":16,"index":724},"to":{"krate":0,"index":187}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.12.3\\src\\lib.rs","byte_start":77036,"byte_end":77042,"line_start":2358,"line_end":2358,"column_start":38,"column_end":44},"kind":{"Impl":{"id":9}},"from":{"krate":15,"index":2161},"to":{"krate":0,"index":187}}]}