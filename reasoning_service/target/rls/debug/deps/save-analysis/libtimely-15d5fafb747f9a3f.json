{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1","program":"C:\\Users\\xhimi\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--edition=2018","--crate-name","timely","C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=15d5fafb747f9a3f","-C","extra-filename=-15d5fafb747f9a3f","--out-dir","c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps","--extern","abomonation=c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps\\libabomonation-4994e37535bf254d.rmeta","--extern","abomonation_derive=c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps\\abomonation_derive-d20833f4ff0265da.dll","--extern","serde=c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps\\libserde-32c7d6d8c78f7a57.rmeta","--extern","serde_derive=c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps\\serde_derive-43a3a674d35ef987.dll","--extern","timely_bytes=c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps\\libtimely_bytes-ccfe23c50218f5eb.rmeta","--extern","timely_communication=c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps\\libtimely_communication-c747ce239509c893.rmeta","--extern","timely_logging=c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps\\libtimely_logging-8b7fdd3f53a94bd4.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\xhimi\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps\\libtimely-15d5fafb747f9a3f.rmeta"},"prelude":{"crate_id":{"name":"timely","disambiguator":[1876936098390023678,9490187523360399285]},"crate_root":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src","external_crates":[{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12578048494495979596,2047601184299498072]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[9458200224090790355,13573932773036415113]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17212932621614837670,6562776948220383497]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[760535750034822653,11118367618612043106]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9863315158332858256,17125058067034963864]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[4687805557387852666,9943473115938981341]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[11895006708321731812,14562333644307237348]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[3795917533932740915,1352930594861700352]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[14246119625412523820,1488400038702589601]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[301469929213911528,4015090225475952437]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[2057170103176572375,2047842178592089941]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5373388065014169986,7291481803049279744]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[11217907578908536000,17992819105755382748]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","num":14,"id":{"name":"abomonation_derive","disambiguator":[3523809365183474922,9018333872222355160]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","num":15,"id":{"name":"abomonation","disambiguator":[5067963308425919729,7869182709402404211]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","num":16,"id":{"name":"serde","disambiguator":[18442179213228461454,5861988084607929491]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","num":17,"id":{"name":"serde_derive","disambiguator":[15755826455441470639,11902243448297350401]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","num":18,"id":{"name":"timely_communication","disambiguator":[17189714604167910384,16708398788651708991]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","num":19,"id":{"name":"getopts","disambiguator":[15466764957536115585,7665105578343663632]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","num":20,"id":{"name":"unicode_width","disambiguator":[616746393377064855,2116196829730866866]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","num":21,"id":{"name":"timely_bytes","disambiguator":[13775071027184502895,4083296700090095132]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","num":22,"id":{"name":"timely_logging","disambiguator":[16998090917265264956,17588111901250771042]}}],"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":0,"byte_end":4325,"line_start":1,"line_end":113,"column_start":1,"column_end":59}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":2595},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":3099,"byte_end":3106,"line_start":70,"line_end":70,"column_start":19,"column_end":26},"alias_span":null,"name":"execute","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2592},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":3108,"byte_end":3124,"line_start":70,"line_end":70,"column_start":28,"column_end":44},"alias_span":null,"name":"execute_directly","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2610},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":3126,"byte_end":3143,"line_start":70,"line_end":70,"column_start":46,"column_end":63},"alias_span":null,"name":"execute_from_args","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2587},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":3145,"byte_end":3152,"line_start":70,"line_end":70,"column_start":65,"column_end":72},"alias_span":null,"name":"example","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2620},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":3170,"byte_end":3182,"line_start":71,"line_end":71,"column_start":16,"column_end":28},"alias_span":null,"name":"PartialOrder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":656},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":3215,"byte_end":3228,"line_start":73,"line_end":73,"column_start":31,"column_end":44},"alias_span":null,"name":"Configuration","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":3340,"byte_end":3341,"line_start":77,"line_end":77,"column_start":35,"column_end":36},"alias_span":null,"name":"*","value":"Push, message, allocator, Pull, WorkerGuards, Data, initialize_from, Configuration, Message, Allocate, Allocator","parent":{"krate":0,"index":26}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":3340,"byte_end":3341,"line_start":77,"line_end":77,"column_start":35,"column_end":36},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":28}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":3340,"byte_end":3341,"line_start":77,"line_end":77,"column_start":35,"column_end":36},"alias_span":null,"name":"*","value":"Logger, Registry","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":23279,"byte_end":23286,"line_start":3,"line_end":3,"column_start":24,"column_end":31},"alias_span":null,"name":"Operate","value":"","parent":{"krate":0,"index":139}},{"kind":"Use","ref_id":{"krate":0,"index":458},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":23313,"byte_end":23321,"line_start":4,"line_end":4,"column_start":26,"column_end":34},"alias_span":null,"name":"Subgraph","value":"","parent":{"krate":0,"index":139}},{"kind":"Use","ref_id":{"krate":0,"index":433},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":23323,"byte_end":23338,"line_start":4,"line_end":4,"column_start":36,"column_end":51},"alias_span":null,"name":"SubgraphBuilder","value":"","parent":{"krate":0,"index":139}},{"kind":"Use","ref_id":{"krate":0,"index":259},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":23367,"byte_end":23376,"line_start":5,"line_end":5,"column_start":27,"column_end":36},"alias_span":null,"name":"Timestamp","value":"","parent":{"krate":0,"index":139}},{"kind":"Use","ref_id":{"krate":0,"index":261},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":23378,"byte_end":23389,"line_start":5,"line_end":5,"column_start":38,"column_end":49},"alias_span":null,"name":"PathSummary","value":"","parent":{"krate":0,"index":139}},{"kind":"Use","ref_id":{"krate":0,"index":2839},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":23420,"byte_end":23431,"line_start":6,"line_end":6,"column_start":29,"column_end":40},"alias_span":null,"name":"ChangeBatch","value":"","parent":{"krate":0,"index":139}},{"kind":"Use","ref_id":{"krate":0,"index":2919},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":23457,"byte_end":23466,"line_start":7,"line_end":7,"column_start":25,"column_end":34},"alias_span":null,"name":"Antichain","value":"","parent":{"krate":0,"index":139}},{"kind":"Use","ref_id":{"krate":0,"index":274},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":58053,"byte_end":58060,"line_start":85,"line_end":85,"column_start":24,"column_end":31},"alias_span":null,"name":"Refines","value":"","parent":{"krate":0,"index":252}},{"kind":"Use","ref_id":{"krate":0,"index":3622},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\mod.rs","byte_start":130169,"byte_end":130175,"line_start":16,"line_end":16,"column_start":23,"column_end":29},"alias_span":null,"name":"Stream","value":"","parent":{"krate":0,"index":555}},{"kind":"Use","ref_id":{"krate":0,"index":2468},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\mod.rs","byte_start":130200,"byte_end":130205,"line_start":17,"line_end":17,"column_start":24,"column_end":29},"alias_span":null,"name":"Scope","value":"","parent":{"krate":0,"index":555}},{"kind":"Use","ref_id":{"krate":0,"index":2463},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\mod.rs","byte_start":130207,"byte_end":130218,"line_start":17,"line_end":17,"column_start":31,"column_end":42},"alias_span":null,"name":"ScopeParent","value":"","parent":{"krate":0,"index":555}},{"kind":"Use","ref_id":{"krate":0,"index":736},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\mod.rs","byte_start":130254,"byte_end":130260,"line_start":19,"line_end":19,"column_start":33,"column_end":39},"alias_span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\mod.rs","byte_start":130264,"byte_end":130275,"line_start":19,"line_end":19,"column_start":43,"column_end":54},"name":"InputHandle","value":"","parent":{"krate":0,"index":555}},{"kind":"Use","ref_id":{"krate":0,"index":1164},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\mod.rs","byte_start":130309,"byte_end":130315,"line_start":20,"line_end":20,"column_start":33,"column_end":39},"alias_span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\mod.rs","byte_start":130319,"byte_end":130330,"line_start":20,"line_end":20,"column_start":43,"column_end":54},"name":"ProbeHandle","value":"","parent":{"krate":0,"index":555}},{"kind":"Use","ref_id":{"krate":0,"index":619},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131043,"byte_end":131048,"line_start":11,"line_end":11,"column_start":28,"column_end":33},"alias_span":null,"name":"Enter","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":626},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131050,"byte_end":131057,"line_start":11,"line_end":11,"column_start":35,"column_end":42},"alias_span":null,"name":"EnterAt","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":648},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131059,"byte_end":131064,"line_start":11,"line_end":11,"column_start":44,"column_end":49},"alias_span":null,"name":"Leave","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":705},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131115,"byte_end":131120,"line_start":13,"line_end":13,"column_start":22,"column_end":27},"alias_span":null,"name":"Input","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":818},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131153,"byte_end":131167,"line_start":14,"line_end":14,"column_start":32,"column_end":46},"alias_span":null,"name":"UnorderedInput","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":879},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131194,"byte_end":131202,"line_start":15,"line_end":15,"column_start":26,"column_end":34},"alias_span":null,"name":"Feedback","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":883},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131204,"byte_end":131216,"line_start":15,"line_end":15,"column_start":36,"column_end":48},"alias_span":null,"name":"LoopVariable","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":899},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131218,"byte_end":131229,"line_start":15,"line_end":15,"column_start":50,"column_end":61},"alias_span":null,"name":"ConnectLoop","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":922},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131255,"byte_end":131261,"line_start":16,"line_end":16,"column_start":24,"column_end":30},"alias_span":null,"name":"Concat","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":930},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131263,"byte_end":131274,"line_start":16,"line_end":16,"column_start":32,"column_end":43},"alias_span":null,"name":"Concatenate","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":957},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131302,"byte_end":131311,"line_start":17,"line_end":17,"column_start":26,"column_end":35},"alias_span":null,"name":"Partition","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":981},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131332,"byte_end":131335,"line_start":18,"line_end":18,"column_start":20,"column_end":23},"alias_span":null,"name":"Map","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":1021},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131360,"byte_end":131367,"line_start":19,"line_end":19,"column_start":24,"column_end":31},"alias_span":null,"name":"Inspect","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":1047},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131391,"byte_end":131397,"line_start":20,"line_end":20,"column_start":23,"column_end":29},"alias_span":null,"name":"Filter","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":1071},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131420,"byte_end":131425,"line_start":21,"line_end":21,"column_start":22,"column_end":27},"alias_span":null,"name":"Delay","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":1104},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131451,"byte_end":131459,"line_start":22,"line_end":22,"column_start":25,"column_end":33},"alias_span":null,"name":"Exchange","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":1125},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131486,"byte_end":131495,"line_start":23,"line_end":23,"column_start":26,"column_end":35},"alias_span":null,"name":"Broadcast","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":1152},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131518,"byte_end":131523,"line_start":24,"line_end":24,"column_start":22,"column_end":27},"alias_span":null,"name":"Probe","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":1187},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131550,"byte_end":131558,"line_start":25,"line_end":25,"column_start":26,"column_end":34},"alias_span":null,"name":"ToStream","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":1222},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131583,"byte_end":131590,"line_start":26,"line_end":26,"column_start":24,"column_end":31},"alias_span":null,"name":"Capture","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":1364},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131615,"byte_end":131621,"line_start":27,"line_end":27,"column_start":24,"column_end":30},"alias_span":null,"name":"Branch","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":1377},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131623,"byte_end":131633,"line_start":27,"line_end":27,"column_start":32,"column_end":42},"alias_span":null,"name":"BranchWhen","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":1481},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131660,"byte_end":131668,"line_start":29,"line_end":29,"column_start":24,"column_end":32},"alias_span":null,"name":"Operator","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":1838},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131694,"byte_end":131705,"line_start":30,"line_end":30,"column_start":25,"column_end":36},"alias_span":null,"name":"Notificator","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":1860},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131707,"byte_end":131726,"line_start":30,"line_end":30,"column_start":38,"column_end":57},"alias_span":null,"name":"FrontierNotificator","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":1923},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131753,"byte_end":131760,"line_start":32,"line_end":32,"column_start":24,"column_end":31},"alias_span":null,"name":"Reclock","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":1945},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131783,"byte_end":131793,"line_start":33,"line_end":33,"column_start":22,"column_end":32},"alias_span":null,"name":"Accumulate","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":1222},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\mod.rs","byte_start":208884,"byte_end":208891,"line_start":76,"line_end":76,"column_start":24,"column_end":31},"alias_span":null,"name":"Capture","value":"","parent":{"krate":0,"index":1199}},{"kind":"Use","ref_id":{"krate":0,"index":1246},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\mod.rs","byte_start":208915,"byte_end":208921,"line_start":77,"line_end":77,"column_start":23,"column_end":29},"alias_span":null,"name":"Replay","value":"","parent":{"krate":0,"index":1199}},{"kind":"Use","ref_id":{"krate":0,"index":1262},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\mod.rs","byte_start":208946,"byte_end":208953,"line_start":78,"line_end":78,"column_start":24,"column_end":31},"alias_span":null,"name":"Extract","value":"","parent":{"krate":0,"index":1199}},{"kind":"Use","ref_id":{"krate":0,"index":3464},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\mod.rs","byte_start":208977,"byte_end":208982,"line_start":79,"line_end":79,"column_start":23,"column_end":28},"alias_span":null,"name":"Event","value":"","parent":{"krate":0,"index":1199}},{"kind":"Use","ref_id":{"krate":0,"index":1277},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\mod.rs","byte_start":208984,"byte_end":208995,"line_start":79,"line_end":79,"column_start":30,"column_end":41},"alias_span":null,"name":"EventPusher","value":"","parent":{"krate":0,"index":1199}},{"kind":"Use","ref_id":{"krate":0,"index":1292},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\mod.rs","byte_start":209025,"byte_end":209034,"line_start":80,"line_end":80,"column_start":28,"column_end":37},"alias_span":null,"name":"EventLink","value":"","parent":{"krate":0,"index":1199}},{"kind":"Use","ref_id":{"krate":0,"index":1336},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\mod.rs","byte_start":209065,"byte_end":209076,"line_start":81,"line_end":81,"column_start":30,"column_end":41},"alias_span":null,"name":"EventReader","value":"","parent":{"krate":0,"index":1199}},{"kind":"Use","ref_id":{"krate":0,"index":1320},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\mod.rs","byte_start":209107,"byte_end":209118,"line_start":82,"line_end":82,"column_start":30,"column_end":41},"alias_span":null,"name":"EventWriter","value":"","parent":{"krate":0,"index":1199}},{"kind":"Use","ref_id":{"krate":0,"index":1439},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\aggregation\\mod.rs","byte_start":235634,"byte_end":235643,"line_start":14,"line_end":14,"column_start":26,"column_end":35},"alias_span":null,"name":"Aggregate","value":"","parent":{"krate":0,"index":1390}},{"kind":"Use","ref_id":{"krate":0,"index":1404},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\aggregation\\mod.rs","byte_start":235674,"byte_end":235686,"line_start":15,"line_end":15,"column_start":30,"column_end":42},"alias_span":null,"name":"StateMachine","value":"","parent":{"krate":0,"index":1390}},{"kind":"Use","ref_id":{"krate":0,"index":1754},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\mod.rs","byte_start":245538,"byte_end":245549,"line_start":13,"line_end":13,"column_start":25,"column_end":36},"alias_span":null,"name":"InputHandle","value":"","parent":{"krate":0,"index":1463}},{"kind":"Use","ref_id":{"krate":0,"index":1761},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\mod.rs","byte_start":245551,"byte_end":245572,"line_start":13,"line_end":13,"column_start":38,"column_end":59},"alias_span":null,"name":"FrontieredInputHandle","value":"","parent":{"krate":0,"index":1463}},{"kind":"Use","ref_id":{"krate":0,"index":1810},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\mod.rs","byte_start":245574,"byte_end":245586,"line_start":13,"line_end":13,"column_start":61,"column_end":73},"alias_span":null,"name":"OutputHandle","value":"","parent":{"krate":0,"index":1463}},{"kind":"Use","ref_id":{"krate":0,"index":1798},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\mod.rs","byte_start":245588,"byte_end":245601,"line_start":13,"line_end":13,"column_start":75,"column_end":88},"alias_span":null,"name":"OutputWrapper","value":"","parent":{"krate":0,"index":1463}},{"kind":"Use","ref_id":{"krate":0,"index":1838},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\mod.rs","byte_start":245632,"byte_end":245643,"line_start":14,"line_end":14,"column_start":29,"column_end":40},"alias_span":null,"name":"Notificator","value":"","parent":{"krate":0,"index":1463}},{"kind":"Use","ref_id":{"krate":0,"index":1860},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\mod.rs","byte_start":245645,"byte_end":245664,"line_start":14,"line_end":14,"column_start":42,"column_end":61},"alias_span":null,"name":"FrontierNotificator","value":"","parent":{"krate":0,"index":1463}},{"kind":"Use","ref_id":{"krate":0,"index":1481},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\mod.rs","byte_start":245757,"byte_end":245765,"line_start":18,"line_end":18,"column_start":26,"column_end":34},"alias_span":null,"name":"Operator","value":"","parent":{"krate":0,"index":1463}},{"kind":"Use","ref_id":{"krate":0,"index":1579},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\mod.rs","byte_start":245767,"byte_end":245773,"line_start":18,"line_end":18,"column_start":36,"column_end":42},"alias_span":null,"name":"source","value":"","parent":{"krate":0,"index":1463}},{"kind":"Use","ref_id":{"krate":0,"index":3533},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\mod.rs","byte_start":245805,"byte_end":245817,"line_start":19,"line_end":19,"column_start":30,"column_end":42},"alias_span":null,"name":"OperatorInfo","value":"","parent":{"krate":0,"index":1463}},{"kind":"Use","ref_id":{"krate":0,"index":1989},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":132245,"byte_end":132255,"line_start":61,"line_end":61,"column_start":28,"column_end":38},"alias_span":null,"name":"Capability","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":2029},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":132257,"byte_end":132270,"line_start":61,"line_end":61,"column_start":40,"column_end":53},"alias_span":null,"name":"CapabilityRef","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":2060},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":132272,"byte_end":132285,"line_start":61,"line_end":61,"column_start":55,"column_end":68},"alias_span":null,"name":"CapabilitySet","value":"","parent":{"krate":0,"index":562}},{"kind":"Use","ref_id":{"krate":0,"index":2092},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\mod.rs","byte_start":337146,"byte_end":337149,"line_start":1,"line_end":1,"column_start":21,"column_end":24},"alias_span":null,"name":"Tee","value":"","parent":{"krate":0,"index":2078}},{"kind":"Use","ref_id":{"krate":0,"index":2109},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\mod.rs","byte_start":337151,"byte_end":337160,"line_start":1,"line_end":1,"column_start":26,"column_end":35},"alias_span":null,"name":"TeeHelper","value":"","parent":{"krate":0,"index":2078}},{"kind":"Use","ref_id":{"krate":0,"index":2128},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\mod.rs","byte_start":337187,"byte_end":337195,"line_start":2,"line_end":2,"column_start":25,"column_end":33},"alias_span":null,"name":"Exchange","value":"","parent":{"krate":0,"index":2078}},{"kind":"Use","ref_id":{"krate":0,"index":2157},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\mod.rs","byte_start":337220,"byte_end":337227,"line_start":3,"line_end":3,"column_start":24,"column_end":31},"alias_span":null,"name":"Counter","value":"","parent":{"krate":0,"index":2078}},{"kind":"Use","ref_id":{"krate":0,"index":2248},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pullers\\mod.rs","byte_start":350466,"byte_end":350473,"line_start":1,"line_end":1,"column_start":24,"column_end":31},"alias_span":null,"name":"Counter","value":"","parent":{"krate":0,"index":2240}},{"kind":"Use","ref_id":{"krate":0,"index":2408},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\mod.rs","byte_start":359006,"byte_end":359011,"line_start":11,"line_end":11,"column_start":22,"column_end":27},"alias_span":null,"name":"Child","value":"","parent":{"krate":0,"index":2368}},{"kind":"Use","ref_id":{"krate":0,"index":2511},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\mod.rs","byte_start":372368,"byte_end":372375,"line_start":6,"line_end":6,"column_start":24,"column_end":31},"alias_span":null,"name":"Barrier","value":"","parent":{"krate":0,"index":2504}},{"kind":"Use","ref_id":{"krate":0,"index":2548},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\mod.rs","byte_start":372401,"byte_end":372410,"line_start":7,"line_end":7,"column_start":25,"column_end":34},"alias_span":null,"name":"Sequencer","value":"","parent":{"krate":0,"index":2504}},{"kind":"Use","ref_id":{"krate":0,"index":2746},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\mod.rs","byte_start":410394,"byte_end":410405,"line_start":8,"line_end":8,"column_start":26,"column_end":37},"alias_span":null,"name":"Activations","value":"","parent":{"krate":0,"index":2731}},{"kind":"Use","ref_id":{"krate":0,"index":2782},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\mod.rs","byte_start":410407,"byte_end":410416,"line_start":8,"line_end":8,"column_start":39,"column_end":48},"alias_span":null,"name":"Activator","value":"","parent":{"krate":0,"index":2731}},{"kind":"Use","ref_id":{"krate":0,"index":2799},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\mod.rs","byte_start":410418,"byte_end":410432,"line_start":8,"line_end":8,"column_start":50,"column_end":64},"alias_span":null,"name":"ActivateOnDrop","value":"","parent":{"krate":0,"index":2731}},{"kind":"Use","ref_id":{"krate":0,"index":2789},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\mod.rs","byte_start":410434,"byte_end":410447,"line_start":8,"line_end":8,"column_start":66,"column_end":79},"alias_span":null,"name":"SyncActivator","value":"","parent":{"krate":0,"index":2731}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":0,"byte_end":4325,"line_start":1,"line_end":113,"column_start":1,"column_end":59},"name":"","qualname":"::","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":139},{"krate":0,"index":555},{"krate":0,"index":2504},{"krate":0,"index":2578},{"krate":0,"index":2619},{"krate":0,"index":2672},{"krate":0,"index":2731},{"krate":0,"index":2833},{"krate":0,"index":2834},{"krate":0,"index":2836},{"krate":0,"index":2837}],"decl_id":null,"docs":" Timely dataflow is framework for managing and executing data-parallel dataflow computations.","sig":null,"attributes":[{"value":"forbid(missing_docs)","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":2831,"byte_end":2855,"line_start":58,"line_end":58,"column_start":1,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":26},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":3290,"byte_end":3303,"line_start":76,"line_end":76,"column_start":9,"column_end":22},"name":"communication","qualname":"::communication","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":27}],"decl_id":null,"docs":" Re-export of the `timely_communication` crate.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":3397,"byte_end":3402,"line_start":81,"line_end":81,"column_start":9,"column_end":14},"name":"bytes","qualname":"::bytes","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":29}],"decl_id":null,"docs":" Re-export of the `timely_bytes` crate.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":3490,"byte_end":3502,"line_start":86,"line_end":86,"column_start":9,"column_end":21},"name":"logging_core","qualname":"::logging_core","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":31}],"decl_id":null,"docs":" Re-export of the `timely_logging` crate.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"worker","qualname":"::worker","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":55},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":71},{"krate":0,"index":83},{"krate":0,"index":93},{"krate":0,"index":96},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":128},{"krate":0,"index":134},{"krate":0,"index":137}],"decl_id":null,"docs":" The root of each single-threaded worker.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":5070,"byte_end":5078,"line_start":22,"line_end":22,"column_start":11,"column_end":19},"name":"AsWorker","qualname":"::worker::AsWorker","value":"AsWorker: Scheduler","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70}],"decl_id":null,"docs":" Methods provided by the root Worker.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":5146,"byte_end":5151,"line_start":25,"line_end":25,"column_start":8,"column_end":13},"name":"index","qualname":"::worker::AsWorker::index","value":"fn (&self) -> usize","parent":{"krate":0,"index":61},"children":[],"decl_id":null,"docs":" Index of the worker among its peers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":5208,"byte_end":5213,"line_start":27,"line_end":27,"column_start":8,"column_end":13},"name":"peers","qualname":"::worker::AsWorker::peers","value":"fn (&self) -> usize","parent":{"krate":0,"index":61},"children":[],"decl_id":null,"docs":" Number of peer workers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":5766,"byte_end":5774,"line_start":38,"line_end":38,"column_start":8,"column_end":16},"name":"allocate","qualname":"::worker::AsWorker::allocate","value":"fn <T> (&mut self, identifier: usize, address: &[usize]) -> (Vec<Box<dyn Push<Message<T>>>>, Box<dyn Pull<Message<T>>>)","parent":{"krate":0,"index":61},"children":[],"decl_id":null,"docs":" Allocates a new channel from a supplied identifier and address.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":6144,"byte_end":6152,"line_start":43,"line_end":43,"column_start":8,"column_end":16},"name":"pipeline","qualname":"::worker::AsWorker::pipeline","value":"fn <T> (&mut self, identifier: usize, address: &[usize]) -> (ThreadPusher<Message<T>>, ThreadPuller<Message<T>>)","parent":{"krate":0,"index":61},"children":[],"decl_id":null,"docs":" Constructs a pipeline channel from the worker to itself.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":6329,"byte_end":6343,"line_start":46,"line_end":46,"column_start":8,"column_end":22},"name":"new_identifier","qualname":"::worker::AsWorker::new_identifier","value":"fn (&mut self) -> usize","parent":{"krate":0,"index":61},"children":[],"decl_id":null,"docs":" Allocates a new worker-unique identifier.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":6422,"byte_end":6434,"line_start":48,"line_end":48,"column_start":8,"column_end":20},"name":"log_register","qualname":"::worker::AsWorker::log_register","value":"fn (&self) -> ::std::cell::RefMut<crate::logging_core::Registry<crate::logging::WorkerIdentifier>>","parent":{"krate":0,"index":61},"children":[],"decl_id":null,"docs":" Provides access to named logging streams.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":6592,"byte_end":6599,"line_start":50,"line_end":50,"column_start":8,"column_end":15},"name":"logging","qualname":"::worker::AsWorker::logging","value":"fn (&self) -> Option<crate::logging::TimelyLogger>","parent":{"krate":0,"index":61},"children":[],"decl_id":null,"docs":" Provides access to the timely logging stream.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":6839,"byte_end":6845,"line_start":55,"line_end":55,"column_start":12,"column_end":18},"name":"Worker","qualname":"::worker::Worker","value":"Worker {  }","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82}],"decl_id":null,"docs":" A `Worker` is the entry point to a timely dataflow computation. It wraps a `Allocate`,\n and has a list of dataflows that it manages.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":9018,"byte_end":9021,"line_start":105,"line_end":105,"column_start":12,"column_end":15},"name":"new","qualname":"<Worker<A>>::new","value":"fn (c: A) -> Worker<A>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new `Worker` bound to a channel allocator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":10315,"byte_end":10319,"line_start":143,"line_end":143,"column_start":12,"column_end":16},"name":"step","qualname":"<Worker<A>>::step","value":"fn (&mut self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Performs one step of the computation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":11418,"byte_end":11430,"line_start":174,"line_end":174,"column_start":12,"column_end":24},"name":"step_or_park","qualname":"<Worker<A>>::step_or_park","value":"fn (&mut self, duration: Option<Duration>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Performs one step of the computation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":15148,"byte_end":15158,"line_start":272,"line_end":272,"column_start":12,"column_end":22},"name":"step_while","qualname":"<Worker<A>>::step_while","value":"fn <F> (&mut self, mut func: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Calls `self.step()` as long as `func` evaluates to true.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":15659,"byte_end":15664,"line_start":290,"line_end":290,"column_start":12,"column_end":17},"name":"index","qualname":"<Worker<A>>::index","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The index of the worker out of its peers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":16120,"byte_end":16125,"line_start":305,"line_end":305,"column_start":12,"column_end":17},"name":"peers","qualname":"<Worker<A>>::peers","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The total number of peer workers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":16609,"byte_end":16614,"line_start":321,"line_end":321,"column_start":12,"column_end":17},"name":"timer","qualname":"<Worker<A>>::timer","value":"fn (&self) -> Instant","parent":null,"children":[],"decl_id":null,"docs":" A timer started at the initiation of the timely computation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":16839,"byte_end":16853,"line_start":327,"line_end":327,"column_start":12,"column_end":26},"name":"new_identifier","qualname":"<Worker<A>>::new_identifier","value":"fn (&mut self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new worker-unique identifier.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":17350,"byte_end":17362,"line_start":345,"line_end":345,"column_start":12,"column_end":24},"name":"log_register","qualname":"<Worker<A>>::log_register","value":"fn (&self) -> ::std::cell::RefMut<crate::logging_core::Registry<crate::logging::WorkerIdentifier>>","parent":null,"children":[],"decl_id":null,"docs":" Access to named loggers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":17949,"byte_end":17957,"line_start":364,"line_end":364,"column_start":12,"column_end":20},"name":"dataflow","qualname":"<Worker<A>>::dataflow","value":"fn <T, R, F> (&mut self, func: F) -> R","parent":null,"children":[],"decl_id":null,"docs":" Construct a new dataflow.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":19315,"byte_end":19328,"line_start":398,"line_end":398,"column_start":12,"column_end":25},"name":"dataflow_core","qualname":"<Worker<A>>::dataflow_core","value":"fn <T, R, F, V> (&mut self, name: &str, mut logging: Option<TimelyLogger>, mut resources: V, func: F) -> R","parent":null,"children":[],"decl_id":null,"docs":" Construct a new dataflow with specific configurations.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":139},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"progress","qualname":"::progress","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":172},{"krate":0,"index":252},{"krate":0,"index":285},{"krate":0,"index":304},{"krate":0,"index":337},{"krate":0,"index":408},{"krate":0,"index":3238},{"krate":0,"index":3323},{"krate":0,"index":3321},{"krate":0,"index":3319},{"krate":0,"index":3316},{"krate":0,"index":3314},{"krate":0,"index":3304},{"krate":0,"index":3301},{"krate":0,"index":3299},{"krate":0,"index":3290},{"krate":0,"index":3284},{"krate":0,"index":3241},{"krate":0,"index":542},{"krate":0,"index":547},{"krate":0,"index":549},{"krate":0,"index":3324},{"krate":0,"index":3405},{"krate":0,"index":3403},{"krate":0,"index":3401},{"krate":0,"index":3398},{"krate":0,"index":3396},{"krate":0,"index":3390},{"krate":0,"index":3387},{"krate":0,"index":3385},{"krate":0,"index":3376},{"krate":0,"index":3370},{"krate":0,"index":3331},{"krate":0,"index":3406},{"krate":0,"index":3430},{"krate":0,"index":3428},{"krate":0,"index":3426},{"krate":0,"index":3423},{"krate":0,"index":3421},{"krate":0,"index":3411},{"krate":0,"index":3409},{"krate":0,"index":551},{"krate":0,"index":3431},{"krate":0,"index":3455},{"krate":0,"index":3453},{"krate":0,"index":3451},{"krate":0,"index":3448},{"krate":0,"index":3446},{"krate":0,"index":3436},{"krate":0,"index":3434},{"krate":0,"index":553}],"decl_id":null,"docs":" Progress tracking mechanisms to support notification in timely dataflow\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"change_batch","qualname":"::progress::change_batch","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","parent":null,"children":[{"krate":0,"index":2839},{"krate":0,"index":2916},{"krate":0,"index":2913},{"krate":0,"index":2910},{"krate":0,"index":2906},{"krate":0,"index":2896},{"krate":0,"index":2889},{"krate":0,"index":2843},{"krate":0,"index":150}],"decl_id":null,"docs":" A collection of updates of the form `(T, i64)`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2839},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":27065,"byte_end":27076,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"ChangeBatch","qualname":"::progress::change_batch::ChangeBatch","value":"ChangeBatch {  }","parent":null,"children":[{"krate":0,"index":2841},{"krate":0,"index":2842}],"decl_id":null,"docs":" A collection of updates of the form `(T, i64)`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":27529,"byte_end":27532,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"new","qualname":"<ChangeBatch<T>>::new","value":"fn () -> ChangeBatch<T>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new empty `ChangeBatch`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":27925,"byte_end":27933,"line_start":49,"line_end":49,"column_start":12,"column_end":20},"name":"new_from","qualname":"<ChangeBatch<T>>::new_from","value":"fn (key: T, val: i64) -> ChangeBatch<T>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new `ChangeBatch` with a single entry.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":28151,"byte_end":28159,"line_start":56,"line_end":56,"column_start":12,"column_end":20},"name":"is_dirty","qualname":"<ChangeBatch<T>>::is_dirty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the change batch is not guaranteed compact.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":28884,"byte_end":28890,"line_start":77,"line_end":77,"column_start":12,"column_end":18},"name":"update","qualname":"<ChangeBatch<T>>::update","value":"fn (&mut self, item: T, value: i64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds a new update, for `item` with `value`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":28863,"byte_end":28872,"line_start":76,"line_end":76,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":29351,"byte_end":29357,"line_start":94,"line_end":94,"column_start":12,"column_end":18},"name":"extend","qualname":"<ChangeBatch<T>>::extend","value":"fn <I> (&mut self, iterator: I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs a sequence of updates described by `iterator`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":29330,"byte_end":29339,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":29788,"byte_end":29798,"line_start":109,"line_end":109,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ChangeBatch<T>>::into_inner","value":"fn (mut self) -> Vec<(T, i64)>","parent":null,"children":[],"decl_id":null,"docs":" Extracts the `Vec<(T, i64)>` from the map, consuming it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":30361,"byte_end":30365,"line_start":130,"line_end":130,"column_start":12,"column_end":16},"name":"iter","qualname":"<ChangeBatch<T>>::iter","value":"fn (&mut self) -> ::std::slice::Iter<(T, i64)>","parent":null,"children":[],"decl_id":null,"docs":" Iterates over the contents of the map.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":30340,"byte_end":30349,"line_start":129,"line_end":129,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":31080,"byte_end":31085,"line_start":154,"line_end":154,"column_start":12,"column_end":17},"name":"drain","qualname":"<ChangeBatch<T>>::drain","value":"fn (&mut self) -> ::std::vec::Drain<(T, i64)>","parent":null,"children":[],"decl_id":null,"docs":" Drains the set of updates.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":31059,"byte_end":31068,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":31494,"byte_end":31499,"line_start":172,"line_end":172,"column_start":12,"column_end":17},"name":"clear","qualname":"<ChangeBatch<T>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the map.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":31473,"byte_end":31482,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":32294,"byte_end":32302,"line_start":194,"line_end":194,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<ChangeBatch<T>>::is_empty","value":"fn (&mut self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True iff all keys have value zero.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":32273,"byte_end":32282,"line_start":193,"line_end":193,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":32672,"byte_end":32684,"line_start":206,"line_end":206,"column_start":12,"column_end":24},"name":"canonicalize","qualname":"<ChangeBatch<T>>::canonicalize","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compact and sort data, so that two instances can be compared without false negatives.\n","sig":null,"attributes":[{"value":"deprecated(since = \"0.9.0\", note = \"please use `compact` instead\")","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":32595,"byte_end":32660,"line_start":205,"line_end":205,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":33479,"byte_end":33489,"line_start":231,"line_end":231,"column_start":12,"column_end":22},"name":"drain_into","qualname":"<ChangeBatch<T>>::drain_into","value":"fn (&mut self, other: &mut ChangeBatch<T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Drains `self` into `other`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":33458,"byte_end":33467,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":34044,"byte_end":34051,"line_start":247,"line_end":247,"column_start":12,"column_end":19},"name":"compact","qualname":"<ChangeBatch<T>>::compact","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compact the internal representation.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":34023,"byte_end":34032,"line_start":246,"line_end":246,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":34604,"byte_end":34629,"line_start":262,"line_end":262,"column_start":12,"column_end":37},"name":"unstable_internal_updates","qualname":"<ChangeBatch<T>>::unstable_internal_updates","value":"fn (&self) -> &Vec<(T, i64)>","parent":null,"children":[],"decl_id":null,"docs":" Expose the internal vector of updates.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":34731,"byte_end":34754,"line_start":265,"line_end":265,"column_start":12,"column_end":35},"name":"unstable_internal_clean","qualname":"<ChangeBatch<T>>::unstable_internal_clean","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Expose the internal value of `clean`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":172},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"frontier","qualname":"::progress::frontier","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":2919},{"krate":0,"index":2996},{"krate":0,"index":2993},{"krate":0,"index":2990},{"krate":0,"index":2987},{"krate":0,"index":2983},{"krate":0,"index":2973},{"krate":0,"index":2966},{"krate":0,"index":2922},{"krate":0,"index":175},{"krate":0,"index":2999},{"krate":0,"index":3075},{"krate":0,"index":3072},{"krate":0,"index":3062},{"krate":0,"index":3055},{"krate":0,"index":3005},{"krate":0,"index":194},{"krate":0,"index":222},{"krate":0,"index":225},{"krate":0,"index":3078},{"krate":0,"index":3086},{"krate":0,"index":3082},{"krate":0,"index":229},{"krate":0,"index":241},{"krate":0,"index":246}],"decl_id":null,"docs":" Tracks minimal sets of mutually incomparable elements of a partial order.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2919},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":35864,"byte_end":35873,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"Antichain","qualname":"::progress::frontier::Antichain","value":"Antichain {  }","parent":null,"children":[{"krate":0,"index":2921}],"decl_id":null,"docs":" A set of mutually incomparable elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":36348,"byte_end":36354,"line_start":31,"line_end":31,"column_start":12,"column_end":18},"name":"insert","qualname":"<Antichain<T>>::insert","value":"fn (&mut self, element: T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Updates the `Antichain` if the element is not greater than or equal to some present element.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":37024,"byte_end":37030,"line_start":54,"line_end":54,"column_start":12,"column_end":18},"name":"extend","qualname":"<Antichain<T>>::extend","value":"fn <I> (&mut self, iterator: I) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Performs a sequence of insertion and return true iff any insertion does.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":37457,"byte_end":37460,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"new","qualname":"<Antichain<T>>::new","value":"fn () -> Antichain<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty `Antichain`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":37743,"byte_end":37752,"line_start":82,"line_end":82,"column_start":12,"column_end":21},"name":"from_elem","qualname":"<Antichain<T>>::from_elem","value":"fn (element: T) -> Antichain<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new singleton `Antichain`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":38124,"byte_end":38129,"line_start":95,"line_end":95,"column_start":12,"column_end":17},"name":"clear","qualname":"<Antichain<T>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the contents of the antichain.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":38258,"byte_end":38262,"line_start":98,"line_end":98,"column_start":12,"column_end":16},"name":"sort","qualname":"<Antichain<T>>::sort","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sorts the elements so that comparisons between antichains can be made.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":38793,"byte_end":38802,"line_start":116,"line_end":116,"column_start":12,"column_end":21},"name":"less_than","qualname":"<Antichain<T>>::less_than","value":"fn (&self, time: &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if any item in the antichain is strictly less than the argument.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":38772,"byte_end":38781,"line_start":115,"line_end":115,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":39379,"byte_end":39389,"line_start":136,"line_end":136,"column_start":12,"column_end":22},"name":"less_equal","qualname":"<Antichain<T>>::less_equal","value":"fn (&self, time: &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if any item in the antichain is less than or equal to the argument.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":39358,"byte_end":39367,"line_start":135,"line_end":135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":39602,"byte_end":39611,"line_start":142,"line_end":142,"column_start":12,"column_end":21},"name":"dominates","qualname":"<Antichain<T>>::dominates","value":"fn (&self, other: &Antichain<T>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if every element of `other` is greater or equal to some element of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":39581,"byte_end":39590,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":40034,"byte_end":40042,"line_start":156,"line_end":156,"column_start":22,"column_end":30},"name":"elements","qualname":"<Antichain<T>>::elements","value":"fn (&self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Reveals the elements in the antichain.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":40017,"byte_end":40026,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2999},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":41560,"byte_end":41576,"line_start":179,"line_end":179,"column_start":12,"column_end":28},"name":"MutableAntichain","qualname":"::progress::frontier::MutableAntichain","value":"MutableAntichain {  }","parent":null,"children":[{"krate":0,"index":3001},{"krate":0,"index":3002},{"krate":0,"index":3003},{"krate":0,"index":3004}],"decl_id":null,"docs":" An antichain based on a multiset whose elements frequencies can be updated.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":42045,"byte_end":42048,"line_start":198,"line_end":198,"column_start":12,"column_end":15},"name":"new","qualname":"<MutableAntichain<T>>::new","value":"fn () -> MutableAntichain<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty `MutableAntichain`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":42024,"byte_end":42033,"line_start":197,"line_end":197,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":42554,"byte_end":42559,"line_start":219,"line_end":219,"column_start":12,"column_end":17},"name":"clear","qualname":"<MutableAntichain<T>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes all elements.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":42533,"byte_end":42542,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":42784,"byte_end":42789,"line_start":227,"line_end":227,"column_start":12,"column_end":17},"name":"empty","qualname":"<MutableAntichain<T>>::empty","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" This method deletes the contents. Unlike `clear` it records doing so.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":43243,"byte_end":43251,"line_start":243,"line_end":243,"column_start":12,"column_end":20},"name":"frontier","qualname":"<MutableAntichain<T>>::frontier","value":"fn (&self) -> AntichainRef<T>","parent":null,"children":[],"decl_id":null,"docs":" Reveals the minimal elements with positive count.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":43222,"byte_end":43231,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":43717,"byte_end":43727,"line_start":259,"line_end":259,"column_start":12,"column_end":22},"name":"new_bottom","qualname":"<MutableAntichain<T>>::new_bottom","value":"fn (bottom: T) -> MutableAntichain<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new singleton `MutableAntichain`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":43696,"byte_end":43705,"line_start":258,"line_end":258,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":44275,"byte_end":44283,"line_start":279,"line_end":279,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<MutableAntichain<T>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if there are no elements in the `MutableAntichain`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":44254,"byte_end":44263,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":44813,"byte_end":44822,"line_start":297,"line_end":297,"column_start":12,"column_end":21},"name":"less_than","qualname":"<MutableAntichain<T>>::less_than","value":"fn (&self, time: &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if any item in the `MutableAntichain` is strictly less than the argument.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":44792,"byte_end":44801,"line_start":296,"line_end":296,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":45374,"byte_end":45384,"line_start":315,"line_end":315,"column_start":12,"column_end":22},"name":"less_equal","qualname":"<MutableAntichain<T>>::less_equal","value":"fn (&self, time: &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if any item in the `MutableAntichain` is less than or equal to the argument.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":45353,"byte_end":45362,"line_start":314,"line_end":314,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":46006,"byte_end":46018,"line_start":327,"line_end":327,"column_start":12,"column_end":24},"name":"update_dirty","qualname":"<MutableAntichain<T>>::update_dirty","value":"fn (&mut self, time: T, delta: i64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Allows a single-element push, but dirties the antichain and prevents inspection until cleaned.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":45985,"byte_end":45994,"line_start":326,"line_end":326,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":46668,"byte_end":46679,"line_start":349,"line_end":349,"column_start":12,"column_end":23},"name":"update_iter","qualname":"<MutableAntichain<T>>::update_iter","value":"fn <'a, I> (&'a mut self, updates: I) -> ::std::vec::Drain<'a, (T, i64)>","parent":null,"children":[],"decl_id":null,"docs":" Applies updates to the antichain and enumerates any changes.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":46647,"byte_end":46656,"line_start":348,"line_end":348,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":48817,"byte_end":48832,"line_start":404,"line_end":404,"column_start":12,"column_end":27},"name":"update_iter_and","qualname":"<MutableAntichain<T>>::update_iter_and","value":"fn <I, A> (&mut self, updates: I, mut action: A) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Applies updates to the antichain and applies `action` to each frontier change.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":48706,"byte_end":48715,"line_start":402,"line_end":402,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"0.8.0\", note =\n             \"`update_iter` now provides an iterator as output\")","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":48720,"byte_end":48805,"line_start":403,"line_end":403,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":50599,"byte_end":50608,"line_start":450,"line_end":450,"column_start":12,"column_end":21},"name":"count_for","qualname":"<MutableAntichain<T>>::count_for","value":"fn (&self, query_time: &T) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Reports the count for a queried time.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":222},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":50861,"byte_end":50883,"line_start":460,"line_end":460,"column_start":11,"column_end":33},"name":"MutableAntichainFilter","qualname":"::progress::frontier::MutableAntichainFilter","value":"MutableAntichainFilter<T: PartialOrder + Ord + Clone>","parent":null,"children":[{"krate":0,"index":224}],"decl_id":null,"docs":" Extension trait for filtering time changes through antichains.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":51371,"byte_end":51385,"line_start":476,"line_end":476,"column_start":8,"column_end":22},"name":"filter_through","qualname":"::progress::frontier::MutableAntichainFilter::filter_through","value":"fn (self, antichain: &mut MutableAntichain<T>) -> ::std::vec::Drain<(T, i64)>","parent":{"krate":0,"index":222},"children":[],"decl_id":null,"docs":" Filters time changes through an antichain.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3078},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":51794,"byte_end":51806,"line_start":487,"line_end":487,"column_start":12,"column_end":24},"name":"AntichainRef","qualname":"::progress::frontier::AntichainRef","value":"AntichainRef {  }","parent":null,"children":[{"krate":0,"index":3081}],"decl_id":null,"docs":" A wrapper for elements of an antichain.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":52064,"byte_end":52067,"line_start":494,"line_end":494,"column_start":12,"column_end":15},"name":"new","qualname":"<AntichainRef>::new","value":"fn (frontier: &'a [T]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `AntichainRef` from a reference to a slice of elements forming the frontier.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":52458,"byte_end":52466,"line_start":511,"line_end":511,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<AntichainRef>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if there are no elements in the `AntichainRef`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":52437,"byte_end":52446,"line_start":510,"line_end":510,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":52899,"byte_end":52903,"line_start":527,"line_end":527,"column_start":12,"column_end":16},"name":"iter","qualname":"<AntichainRef>::iter","value":"fn (&self) -> ::std::slice::Iter<T>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator over the elements in this `AntichainRef`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":53385,"byte_end":53394,"line_start":544,"line_end":544,"column_start":12,"column_end":21},"name":"less_than","qualname":"<AntichainRef>::less_than","value":"fn (&self, time: &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if any item in the `AntichainRef` is strictly less than the argument.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":53364,"byte_end":53373,"line_start":543,"line_end":543,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":53892,"byte_end":53902,"line_start":561,"line_end":561,"column_start":12,"column_end":22},"name":"less_equal","qualname":"<AntichainRef>::less_equal","value":"fn (&self, time: &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if any item in the `AntichainRef` is less than or equal to the argument.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":53574,"byte_end":53583,"line_start":549,"line_end":549,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":54059,"byte_end":54062,"line_start":566,"line_end":566,"column_start":12,"column_end":15},"name":"len","qualname":"<AntichainRef>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in this `AntichainRef`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":54167,"byte_end":54173,"line_start":571,"line_end":571,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<AntichainRef>::to_vec","value":"fn (&self) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Copies `self` into a new `Vec`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"timestamp","qualname":"::progress::timestamp","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","parent":null,"children":[{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":261},{"krate":0,"index":265},{"krate":0,"index":267},{"krate":0,"index":270},{"krate":0,"index":3091},{"krate":0,"index":3093},{"krate":0,"index":3096},{"krate":0,"index":3098},{"krate":0,"index":3101},{"krate":0,"index":3103},{"krate":0,"index":3106},{"krate":0,"index":3108},{"krate":0,"index":3111},{"krate":0,"index":3113},{"krate":0,"index":3116},{"krate":0,"index":3118},{"krate":0,"index":3121},{"krate":0,"index":3123},{"krate":0,"index":3126},{"krate":0,"index":3128},{"krate":0,"index":3131},{"krate":0,"index":3133},{"krate":0,"index":3136},{"krate":0,"index":3138},{"krate":0,"index":3141},{"krate":0,"index":3143},{"krate":0,"index":3146},{"krate":0,"index":3148},{"krate":0,"index":3151},{"krate":0,"index":3153},{"krate":0,"index":271},{"krate":0,"index":272}],"decl_id":null,"docs":" A partially ordered measure of progress at each timely dataflow location.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":259},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":54958,"byte_end":54967,"line_start":12,"line_end":12,"column_start":11,"column_end":20},"name":"Timestamp","qualname":"::progress::timestamp::Timestamp","value":"Timestamp: Clone + Eq + PartialOrder + Default + Debug + Send + Any + Data + Hash + Ord","parent":null,"children":[{"krate":0,"index":260}],"decl_id":null,"docs":" A composite trait for types that serve as timestamps in timely dataflow.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":55111,"byte_end":55118,"line_start":14,"line_end":14,"column_start":10,"column_end":17},"name":"Summary","qualname":"::progress::timestamp::Timestamp::Summary","value":"type Summary : PathSummary<Self> + 'static;","parent":{"krate":0,"index":259},"children":[],"decl_id":null,"docs":" A type summarizing action on a timestamp along a dataflow path.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":261},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":55235,"byte_end":55246,"line_start":18,"line_end":18,"column_start":11,"column_end":22},"name":"PathSummary","qualname":"::progress::timestamp::PathSummary","value":"PathSummary<T>: Clone + 'static + Eq + PartialOrder + Debug + Default","parent":null,"children":[{"krate":0,"index":263},{"krate":0,"index":264}],"decl_id":null,"docs":" A summary of how a timestamp advances along a timely dataflow path.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":56259,"byte_end":56269,"line_start":41,"line_end":41,"column_start":8,"column_end":18},"name":"results_in","qualname":"::progress::timestamp::PathSummary::results_in","value":"fn (&self, src: &T) -> Option<T>","parent":{"krate":0,"index":261},"children":[],"decl_id":null,"docs":" Advances a timestamp according to the timestamp actions on the path.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":57036,"byte_end":57047,"line_start":59,"line_end":59,"column_start":8,"column_end":19},"name":"followed_by","qualname":"::progress::timestamp::PathSummary::followed_by","value":"fn (&self, other: &Self) -> Option<Self>","parent":{"krate":0,"index":261},"children":[],"decl_id":null,"docs":" Composes this path summary with another path summary.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":274},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":58568,"byte_end":58575,"line_start":98,"line_end":98,"column_start":15,"column_end":22},"name":"Refines","qualname":"::progress::timestamp::refines::Refines","value":"Refines<T: Timestamp>: Timestamp","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278}],"decl_id":null,"docs":" Conversion between pointstamp types.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":58679,"byte_end":58687,"line_start":100,"line_end":100,"column_start":12,"column_end":20},"name":"to_inner","qualname":"::progress::timestamp::refines::Refines::to_inner","value":"fn (other: T) -> Self","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" Converts the outer timestamp to an inner timestamp.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":58782,"byte_end":58790,"line_start":102,"line_end":102,"column_start":12,"column_end":20},"name":"to_outer","qualname":"::progress::timestamp::refines::Refines::to_outer","value":"fn (self) -> T","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" Converts the inner timestamp to an outer timestamp.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":59151,"byte_end":59160,"line_start":108,"line_end":108,"column_start":12,"column_end":21},"name":"summarize","qualname":"::progress::timestamp::refines::Refines::summarize","value":"fn (path: <Self as Timestamp>::Summary) -> <T as Timestamp>::Summary","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" Summarizes an inner path summary as an outer path summary.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":285},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\operate.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"operate","qualname":"::progress::operate","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\operate.rs","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":293},{"krate":0,"index":3208},{"krate":0,"index":3214},{"krate":0,"index":301}],"decl_id":null,"docs":" Methods which describe an operators topology, and the progress it makes.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\operate.rs","byte_start":60571,"byte_end":60578,"line_start":10,"line_end":10,"column_start":11,"column_end":18},"name":"Operate","qualname":"::progress::operate::Operate","value":"Operate<T: Timestamp>: Schedule","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300}],"decl_id":null,"docs":" Methods for describing an operators topology, and the progress it makes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\operate.rs","byte_start":61929,"byte_end":61934,"line_start":29,"line_end":29,"column_start":8,"column_end":13},"name":"local","qualname":"::progress::operate::Operate::local","value":"fn (&self) -> bool","parent":{"krate":0,"index":293},"children":[],"decl_id":null,"docs":" Indicates if the operator is strictly local to this worker.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\operate.rs","byte_start":61997,"byte_end":62003,"line_start":32,"line_end":32,"column_start":8,"column_end":14},"name":"inputs","qualname":"::progress::operate::Operate::inputs","value":"fn (&self) -> usize","parent":{"krate":0,"index":293},"children":[],"decl_id":null,"docs":" The number of inputs.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\operate.rs","byte_start":62059,"byte_end":62066,"line_start":34,"line_end":34,"column_start":8,"column_end":15},"name":"outputs","qualname":"::progress::operate::Operate::outputs","value":"fn (&self) -> usize","parent":{"krate":0,"index":293},"children":[],"decl_id":null,"docs":" The number of outputs.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\operate.rs","byte_start":62801,"byte_end":62821,"line_start":47,"line_end":47,"column_start":8,"column_end":28},"name":"get_internal_summary","qualname":"::progress::operate::Operate::get_internal_summary","value":"fn (&mut self) -> (Vec<Vec<Antichain<T::Summary>>>, Rc<RefCell<SharedProgress<T>>>)","parent":{"krate":0,"index":293},"children":[],"decl_id":null,"docs":" Fetches summary information about internal structure of the operator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\operate.rs","byte_start":63297,"byte_end":63317,"line_start":55,"line_end":55,"column_start":8,"column_end":28},"name":"set_external_summary","qualname":"::progress::operate::Operate::set_external_summary","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":293},"children":[],"decl_id":null,"docs":" Signals that external frontiers have been set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\operate.rs","byte_start":63437,"byte_end":63446,"line_start":58,"line_end":58,"column_start":8,"column_end":17},"name":"notify_me","qualname":"::progress::operate::Operate::notify_me","value":"fn (&self) -> bool","parent":{"krate":0,"index":293},"children":[],"decl_id":null,"docs":" Indicates of whether the operator requires `push_external_progress` information or not.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3208},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\operate.rs","byte_start":63560,"byte_end":63574,"line_start":63,"line_end":63,"column_start":12,"column_end":26},"name":"SharedProgress","qualname":"::progress::operate::SharedProgress","value":"SharedProgress { frontiers, consumeds, internals, produceds }","parent":null,"children":[{"krate":0,"index":3210},{"krate":0,"index":3211},{"krate":0,"index":3212},{"krate":0,"index":3213}],"decl_id":null,"docs":" Progress information shared between parent and child.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3210},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\operate.rs","byte_start":63665,"byte_end":63674,"line_start":65,"line_end":65,"column_start":9,"column_end":18},"name":"frontiers","qualname":"::progress::operate::SharedProgress::frontiers","value":"std::vec::Vec<progress::change_batch::ChangeBatch<T>>","parent":{"krate":0,"index":3208},"children":[],"decl_id":null,"docs":" Frontier capability changes reported by the parent scope.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3211},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\operate.rs","byte_start":63770,"byte_end":63779,"line_start":67,"line_end":67,"column_start":9,"column_end":18},"name":"consumeds","qualname":"::progress::operate::SharedProgress::consumeds","value":"std::vec::Vec<progress::change_batch::ChangeBatch<T>>","parent":{"krate":0,"index":3208},"children":[],"decl_id":null,"docs":" Consumed message changes reported by the child operator.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3212},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\operate.rs","byte_start":63878,"byte_end":63887,"line_start":69,"line_end":69,"column_start":9,"column_end":18},"name":"internals","qualname":"::progress::operate::SharedProgress::internals","value":"std::vec::Vec<progress::change_batch::ChangeBatch<T>>","parent":{"krate":0,"index":3208},"children":[],"decl_id":null,"docs":" Internal capability changes reported by the child operator.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3213},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\operate.rs","byte_start":63983,"byte_end":63992,"line_start":71,"line_end":71,"column_start":9,"column_end":18},"name":"produceds","qualname":"::progress::operate::SharedProgress::produceds","value":"std::vec::Vec<progress::change_batch::ChangeBatch<T>>","parent":{"krate":0,"index":3208},"children":[],"decl_id":null,"docs":" Produced message changes reported by the child operator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\operate.rs","byte_start":64119,"byte_end":64122,"line_start":76,"line_end":76,"column_start":12,"column_end":15},"name":"new","qualname":"<SharedProgress<T>>::new","value":"fn (inputs: usize, outputs: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new shared progress structure.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":304},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\broadcast.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"broadcast","qualname":"::progress::broadcast","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\broadcast.rs","parent":null,"children":[{"krate":0,"index":305},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":328}],"decl_id":null,"docs":" Broadcasts progress information among workers.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":314},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\broadcast.rs","byte_start":64770,"byte_end":64781,"line_start":9,"line_end":9,"column_start":10,"column_end":21},"name":"ProgressVec","qualname":"::progress::broadcast::ProgressVec","value":"Vec<((Location, T), i64)>","parent":null,"children":[],"decl_id":null,"docs":" A list of progress updates corresponding to `((child_scope, [in/out]_port, timestamp), delta)`\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":316},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\broadcast.rs","byte_start":64947,"byte_end":64958,"line_start":12,"line_end":12,"column_start":10,"column_end":21},"name":"ProgressMsg","qualname":"::progress::broadcast::ProgressMsg","value":"Message<(usize, usize, ProgressVec<T>)>","parent":null,"children":[],"decl_id":null,"docs":" A progress update message consisting of source worker id, sequence number and lists of\n message and internal updates\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":318},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\broadcast.rs","byte_start":65101,"byte_end":65111,"line_start":15,"line_end":15,"column_start":12,"column_end":22},"name":"Progcaster","qualname":"::progress::broadcast::Progcaster","value":"Progcaster {  }","parent":null,"children":[{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327}],"decl_id":null,"docs":" Manages broadcasting of progress updates to and receiving updates from workers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\broadcast.rs","byte_start":65705,"byte_end":65708,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"new","qualname":"<Progcaster<T>>::new","value":"fn <A> (worker: &mut A, path: &Vec<usize>, mut logging: Option<Logger>) -> Progcaster<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Progcaster` using a channel from the supplied worker.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\broadcast.rs","byte_start":66523,"byte_end":66527,"line_start":56,"line_end":56,"column_start":12,"column_end":16},"name":"send","qualname":"<Progcaster<T>>::send","value":"fn (&mut self, changes: &mut ChangeBatch<(Location, T)>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sends pointstamp changes to all workers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\broadcast.rs","byte_start":68111,"byte_end":68115,"line_start":101,"line_end":101,"column_start":12,"column_end":16},"name":"recv","qualname":"<Progcaster<T>>::recv","value":"fn (&mut self, changes: &mut ChangeBatch<(Location, T)>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Receives pointstamp changes from all workers.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"reachability","qualname":"::progress::reachability","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","parent":null,"children":[{"krate":0,"index":338},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":351},{"krate":0,"index":354},{"krate":0,"index":3217},{"krate":0,"index":3225},{"krate":0,"index":3222},{"krate":0,"index":355},{"krate":0,"index":362},{"krate":0,"index":373},{"krate":0,"index":377},{"krate":0,"index":3228},{"krate":0,"index":3233},{"krate":0,"index":380},{"krate":0,"index":385},{"krate":0,"index":403}],"decl_id":null,"docs":" Manages pointstamp reachability within a timely dataflow graph.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3217},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":74036,"byte_end":74043,"line_start":129,"line_end":129,"column_start":12,"column_end":19},"name":"Builder","qualname":"::progress::reachability::Builder","value":"Builder { nodes, edges, shape }","parent":null,"children":[{"krate":0,"index":3219},{"krate":0,"index":3220},{"krate":0,"index":3221}],"decl_id":null,"docs":" A topology builder, which can summarize reachability along paths.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3219},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":74344,"byte_end":74349,"line_start":135,"line_end":135,"column_start":9,"column_end":14},"name":"nodes","qualname":"::progress::reachability::Builder::nodes","value":"std::vec::Vec<std::vec::Vec<std::vec::Vec<progress::frontier::Antichain<<T as progress::timestamp::Timestamp>::Summary>>>>","parent":{"krate":0,"index":3217},"children":[],"decl_id":null,"docs":" Internal connections within hosted operators.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3220},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":74591,"byte_end":74596,"line_start":140,"line_end":140,"column_start":9,"column_end":14},"name":"edges","qualname":"::progress::reachability::Builder::edges","value":"std::vec::Vec<std::vec::Vec<std::vec::Vec<progress::Target>>>","parent":{"krate":0,"index":3217},"children":[],"decl_id":null,"docs":" Direct connections from sources to targets.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3221},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":74682,"byte_end":74687,"line_start":142,"line_end":142,"column_start":9,"column_end":14},"name":"shape","qualname":"::progress::reachability::Builder::shape","value":"std::vec::Vec<(usize, usize)>","parent":{"krate":0,"index":3217},"children":[],"decl_id":null,"docs":" Numbers of inputs and outputs for each node.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":357},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":74802,"byte_end":74805,"line_start":148,"line_end":148,"column_start":12,"column_end":15},"name":"new","qualname":"<Builder<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty topology builder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":75099,"byte_end":75107,"line_start":159,"line_end":159,"column_start":12,"column_end":20},"name":"add_node","qualname":"<Builder<T>>::add_node","value":"fn (&mut self, index: usize, inputs: usize, outputs: usize, summary: Vec<Vec<Antichain<T::Summary>>>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add links internal to operators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":75961,"byte_end":75969,"line_start":182,"line_end":182,"column_start":12,"column_end":20},"name":"add_edge","qualname":"<Builder<T>>::add_edge","value":"fn (&mut self, source: Source, target: Target) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add links between operators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":76611,"byte_end":76616,"line_start":196,"line_end":196,"column_start":12,"column_end":17},"name":"build","qualname":"<Builder<T>>::build","value":"fn (&self) -> (Tracker<T>, Vec<Vec<Antichain<T::Summary>>>)","parent":null,"children":[],"decl_id":null,"docs":" Compiles the current nodes and edges into immutable path summaries.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":79265,"byte_end":79275,"line_start":264,"line_end":264,"column_start":12,"column_end":22},"name":"is_acyclic","qualname":"<Builder<T>>::is_acyclic","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the graph a cycle of default path summaries.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":81852,"byte_end":81859,"line_start":330,"line_end":330,"column_start":12,"column_end":19},"name":"Tracker","qualname":"::progress::reachability::Tracker","value":"Tracker {  }","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372}],"decl_id":null,"docs":" An interactive tracker of propagated reachability information.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":373},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":84465,"byte_end":84476,"line_start":381,"line_end":381,"column_start":12,"column_end":23},"name":"PerOperator","qualname":"::progress::reachability::PerOperator","value":"PerOperator { targets, sources }","parent":null,"children":[{"krate":0,"index":375},{"krate":0,"index":376}],"decl_id":null,"docs":" Target and source information for each operator.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":375},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":84543,"byte_end":84550,"line_start":383,"line_end":383,"column_start":9,"column_end":16},"name":"targets","qualname":"::progress::reachability::PerOperator::targets","value":"std::vec::Vec<progress::reachability::PortInformation<T>>","parent":{"krate":0,"index":373},"children":[],"decl_id":null,"docs":" Port information for each target.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":376},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":84627,"byte_end":84634,"line_start":385,"line_end":385,"column_start":9,"column_end":16},"name":"sources","qualname":"::progress::reachability::PerOperator::sources","value":"std::vec::Vec<progress::reachability::PortInformation<T>>","parent":{"krate":0,"index":373},"children":[],"decl_id":null,"docs":" Port information for each source.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":84784,"byte_end":84787,"line_start":390,"line_end":390,"column_start":12,"column_end":15},"name":"new","qualname":"<PerOperator<T>>::new","value":"fn (inputs: usize, outputs: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" A new PerOperator bundle from numbers of input and output ports.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3228},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":85061,"byte_end":85076,"line_start":400,"line_end":400,"column_start":12,"column_end":27},"name":"PortInformation","qualname":"::progress::reachability::PortInformation","value":"PortInformation { pointstamps, implications, output_summaries }","parent":null,"children":[{"krate":0,"index":3230},{"krate":0,"index":3231},{"krate":0,"index":3232}],"decl_id":null,"docs":" Per-port progress-tracking information.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3230},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":85147,"byte_end":85158,"line_start":402,"line_end":402,"column_start":9,"column_end":20},"name":"pointstamps","qualname":"::progress::reachability::PortInformation::pointstamps","value":"progress::frontier::MutableAntichain<T>","parent":{"krate":0,"index":3228},"children":[],"decl_id":null,"docs":" Current counts of active pointstamps.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3231},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":85261,"byte_end":85273,"line_start":404,"line_end":404,"column_start":9,"column_end":21},"name":"implications","qualname":"::progress::reachability::PortInformation::implications","value":"progress::frontier::MutableAntichain<T>","parent":{"krate":0,"index":3228},"children":[],"decl_id":null,"docs":" Current implications of active pointstamps across the dataflow.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3232},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":85357,"byte_end":85373,"line_start":406,"line_end":406,"column_start":9,"column_end":25},"name":"output_summaries","qualname":"::progress::reachability::PortInformation::output_summaries","value":"std::vec::Vec<progress::frontier::Antichain<<T as progress::timestamp::Timestamp>::Summary>>","parent":{"krate":0,"index":3228},"children":[],"decl_id":null,"docs":" Path summaries to each of the scope outputs.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":85497,"byte_end":85500,"line_start":411,"line_end":411,"column_start":12,"column_end":15},"name":"new","qualname":"<PortInformation<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates empty port information.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":86183,"byte_end":86192,"line_start":427,"line_end":427,"column_start":12,"column_end":21},"name":"is_global","qualname":"<PortInformation<T>>::is_global","value":"fn (&self, time: &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if updates at this pointstamp uniquely block progress.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":86162,"byte_end":86171,"line_start":426,"line_end":426,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":86522,"byte_end":86528,"line_start":438,"line_end":438,"column_start":12,"column_end":18},"name":"update","qualname":"<Tracker<T>>::update","value":"fn (&mut self, location: Location, time: T, value: i64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Updates the count for a time at a location.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":86501,"byte_end":86510,"line_start":437,"line_end":437,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":86939,"byte_end":86952,"line_start":447,"line_end":447,"column_start":12,"column_end":25},"name":"update_target","qualname":"<Tracker<T>>::update_target","value":"fn (&mut self, target: Target, time: T, value: i64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Updates the count for a time at a target (operator input, scope output).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":86918,"byte_end":86927,"line_start":446,"line_end":446,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":87174,"byte_end":87187,"line_start":452,"line_end":452,"column_start":12,"column_end":25},"name":"update_source","qualname":"<Tracker<T>>::update_source","value":"fn (&mut self, source: Source, time: T, value: i64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Updates the count for a time at a source (operator output, scope input).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":87153,"byte_end":87162,"line_start":451,"line_end":451,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":87373,"byte_end":87390,"line_start":457,"line_end":457,"column_start":12,"column_end":29},"name":"tracking_anything","qualname":"<Tracker<T>>::tracking_anything","value":"fn (&mut self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates if any pointstamps have positive count.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":87730,"byte_end":87743,"line_start":467,"line_end":467,"column_start":12,"column_end":25},"name":"allocate_from","qualname":"<Tracker<T>>::allocate_from","value":"fn (builder: &Builder<T>) -> (Self, Vec<Vec<Antichain<T::Summary>>>)","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new `Tracker` using the shape from `summaries`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":90066,"byte_end":90079,"line_start":528,"line_end":528,"column_start":12,"column_end":25},"name":"propagate_all","qualname":"<Tracker<T>>::propagate_all","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Propagates all pending updates.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":95506,"byte_end":95519,"line_start":641,"line_end":641,"column_start":12,"column_end":25},"name":"pushed_output","qualname":"<Tracker<T>>::pushed_output","value":"fn (&mut self) -> &mut [ChangeBatch<T>]","parent":null,"children":[],"decl_id":null,"docs":" Implications of maintained capabilities projected to each output.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":95675,"byte_end":95681,"line_start":646,"line_end":646,"column_start":12,"column_end":18},"name":"pushed","qualname":"<Tracker<T>>::pushed","value":"fn (&mut self) -> &mut ChangeBatch<(Location, T)>","parent":null,"children":[],"decl_id":null,"docs":" A mutable reference to the pushed results of changes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":95826,"byte_end":95836,"line_start":651,"line_end":651,"column_start":12,"column_end":22},"name":"node_state","qualname":"<Tracker<T>>::node_state","value":"fn (&self, index: usize) -> &PerOperator<T>","parent":null,"children":[],"decl_id":null,"docs":" Reveals per-operator frontier state.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":96324,"byte_end":96333,"line_start":661,"line_end":661,"column_start":12,"column_end":21},"name":"is_global","qualname":"<Tracker<T>>::is_global","value":"fn (&self, location: Location, time: &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates if pointstamp is in the scope-wide frontier.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":408},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"subgraph","qualname":"::progress::subgraph","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","parent":null,"children":[{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":420},{"krate":0,"index":424},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":445},{"krate":0,"index":458},{"krate":0,"index":479},{"krate":0,"index":486},{"krate":0,"index":499},{"krate":0,"index":509},{"krate":0,"index":523},{"krate":0,"index":539}],"decl_id":null,"docs":" A dataflow subgraph","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":433},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","byte_start":101594,"byte_end":101609,"line_start":36,"line_end":36,"column_start":12,"column_end":27},"name":"SubgraphBuilder","qualname":"::progress::subgraph::SubgraphBuilder","value":"SubgraphBuilder { name, path }","parent":null,"children":[{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444}],"decl_id":null,"docs":" A builder for interactively initializing a `Subgraph`.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":436},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","byte_start":101723,"byte_end":101727,"line_start":42,"line_end":42,"column_start":9,"column_end":13},"name":"name","qualname":"::progress::subgraph::SubgraphBuilder::name","value":"std::string::String","parent":{"krate":0,"index":433},"children":[],"decl_id":null,"docs":" The name of this subgraph.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","byte_start":101812,"byte_end":101816,"line_start":45,"line_end":45,"column_start":9,"column_end":13},"name":"path","qualname":"::progress::subgraph::SubgraphBuilder::path","value":"std::vec::Vec<usize>","parent":{"krate":0,"index":433},"children":[],"decl_id":null,"docs":" A sequence of integers uniquely identifying the subgraph.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","byte_start":102689,"byte_end":102698,"line_start":72,"line_end":72,"column_start":12,"column_end":21},"name":"new_input","qualname":"<SubgraphBuilder<TOuter, TInner>>::new_input","value":"fn (&mut self, shared_counts: Rc<RefCell<ChangeBatch<TInner>>>) -> Target","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new input to the subgraph and returns the target to that input in the outer graph.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","byte_start":103008,"byte_end":103018,"line_start":78,"line_end":78,"column_start":12,"column_end":22},"name":"new_output","qualname":"<SubgraphBuilder<TOuter, TInner>>::new_output","value":"fn (&mut self) -> Source","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new output from the subgraph and returns the source of that output in the outer graph.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","byte_start":103463,"byte_end":103470,"line_start":87,"line_end":87,"column_start":12,"column_end":19},"name":"connect","qualname":"<SubgraphBuilder<TOuter, TInner>>::connect","value":"fn (&mut self, source: Source, target: Target) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Introduces a dependence from the source to the target.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","byte_start":103665,"byte_end":103673,"line_start":92,"line_end":92,"column_start":12,"column_end":20},"name":"new_from","qualname":"<SubgraphBuilder<TOuter, TInner>>::new_from","value":"fn (index: usize, mut path: Vec<usize>, logging: Option<Logger>, name: &str) -> SubgraphBuilder<TOuter, TInner>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Subgraph from a channel allocator and \"descriptive\" indices.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","byte_start":104368,"byte_end":104385,"line_start":119,"line_end":119,"column_start":12,"column_end":29},"name":"allocate_child_id","qualname":"<SubgraphBuilder<TOuter, TInner>>::allocate_child_id","value":"fn (&mut self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new child identifier, for later use.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","byte_start":104528,"byte_end":104537,"line_start":125,"line_end":125,"column_start":12,"column_end":21},"name":"add_child","qualname":"<SubgraphBuilder<TOuter, TInner>>::add_child","value":"fn (&mut self, child: Box<dyn Operate<TInner>>, index: usize, identifier: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds a new child to the subgraph.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","byte_start":105142,"byte_end":105147,"line_start":139,"line_end":139,"column_start":12,"column_end":17},"name":"build","qualname":"<SubgraphBuilder<TOuter, TInner>>::build","value":"fn <A> (mut self, worker: &mut A) -> Subgraph<TOuter, TInner>","parent":null,"children":[],"decl_id":null,"docs":" Now that initialization is complete, actually build a subgraph.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":458},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","byte_start":108018,"byte_end":108026,"line_start":211,"line_end":211,"column_start":12,"column_end":20},"name":"Subgraph","qualname":"::progress::subgraph::Subgraph","value":"Subgraph { path }","parent":null,"children":[{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478}],"decl_id":null,"docs":" A dataflow subgraph.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":462},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","byte_start":108216,"byte_end":108220,"line_start":218,"line_end":218,"column_start":9,"column_end":13},"name":"path","qualname":"::progress::subgraph::Subgraph::path","value":"std::vec::Vec<usize>","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Path of identifiers from the root.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3238},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":23753,"byte_end":23761,"line_start":19,"line_end":19,"column_start":12,"column_end":20},"name":"Location","qualname":"::progress::Location","value":"Location { node, port }","parent":null,"children":[{"krate":0,"index":3239},{"krate":0,"index":3240}],"decl_id":null,"docs":" A timely dataflow location.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3239},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":23815,"byte_end":23819,"line_start":21,"line_end":21,"column_start":9,"column_end":13},"name":"node","qualname":"::progress::Location::node","value":"usize","parent":{"krate":0,"index":3238},"children":[],"decl_id":null,"docs":" A scope-local operator identifier.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3240},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":23874,"byte_end":23878,"line_start":23,"line_end":23,"column_start":9,"column_end":13},"name":"port","qualname":"::progress::Location::port","value":"progress::Port","parent":{"krate":0,"index":3238},"children":[],"decl_id":null,"docs":" An operator port identifier.`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":23988,"byte_end":23998,"line_start":28,"line_end":28,"column_start":12,"column_end":22},"name":"new_target","qualname":"<Location>::new_target","value":"fn (node: usize, port: usize) -> Location","parent":null,"children":[],"decl_id":null,"docs":" Creates a new target location (operator input or scope output).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":24180,"byte_end":24190,"line_start":32,"line_end":32,"column_start":12,"column_end":22},"name":"new_source","qualname":"<Location>::new_source","value":"fn (node: usize, port: usize) -> Location","parent":null,"children":[],"decl_id":null,"docs":" Creates a new source location (operator output or scope input).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":24337,"byte_end":24346,"line_start":36,"line_end":36,"column_start":12,"column_end":21},"name":"is_target","qualname":"<Location>::is_target","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If the location is a target.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":24473,"byte_end":24482,"line_start":38,"line_end":38,"column_start":12,"column_end":21},"name":"is_source","qualname":"<Location>::is_source","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If the location is a source.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3325},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":25108,"byte_end":25114,"line_start":63,"line_end":63,"column_start":5,"column_end":11},"name":"Target","qualname":"::progress::Port::Target","value":"Port::Target(usize)","parent":{"krate":0,"index":3324},"children":[],"decl_id":null,"docs":" An operator input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3328},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":25155,"byte_end":25161,"line_start":65,"line_end":65,"column_start":5,"column_end":11},"name":"Source","qualname":"::progress::Port::Source","value":"Port::Source(usize)","parent":{"krate":0,"index":3324},"children":[],"decl_id":null,"docs":" An operator output.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3324},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":25070,"byte_end":25074,"line_start":61,"line_end":61,"column_start":10,"column_end":14},"name":"Port","qualname":"::progress::Port","value":"Port::{Target, Source}","parent":null,"children":[{"krate":0,"index":3325},{"krate":0,"index":3328}],"decl_id":null,"docs":" An operator port.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3406},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":25420,"byte_end":25426,"line_start":73,"line_end":73,"column_start":12,"column_end":18},"name":"Source","qualname":"::progress::Source","value":"Source { node, port }","parent":null,"children":[{"krate":0,"index":3407},{"krate":0,"index":3408}],"decl_id":null,"docs":" Names a source of a data stream.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3407},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":25475,"byte_end":25479,"line_start":75,"line_end":75,"column_start":9,"column_end":13},"name":"node","qualname":"::progress::Source::node","value":"usize","parent":{"krate":0,"index":3406},"children":[],"decl_id":null,"docs":" Index of the source operator.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3408},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":25549,"byte_end":25553,"line_start":77,"line_end":77,"column_start":9,"column_end":13},"name":"port","qualname":"::progress::Source::port","value":"usize","parent":{"krate":0,"index":3406},"children":[],"decl_id":null,"docs":" Number of the output port from the operator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":25651,"byte_end":25654,"line_start":82,"line_end":82,"column_start":12,"column_end":15},"name":"new","qualname":"<Source>::new","value":"fn (node: usize, port: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new source from node and port identifiers.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3431},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":25974,"byte_end":25980,"line_start":92,"line_end":92,"column_start":12,"column_end":18},"name":"Target","qualname":"::progress::Target","value":"Target { node, port }","parent":null,"children":[{"krate":0,"index":3432},{"krate":0,"index":3433}],"decl_id":null,"docs":" Names a target of a data stream.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3432},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":26029,"byte_end":26033,"line_start":94,"line_end":94,"column_start":9,"column_end":13},"name":"node","qualname":"::progress::Target::node","value":"usize","parent":{"krate":0,"index":3431},"children":[],"decl_id":null,"docs":" Index of the target operator.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3433},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":26100,"byte_end":26104,"line_start":96,"line_end":96,"column_start":9,"column_end":13},"name":"port","qualname":"::progress::Target::port","value":"usize","parent":{"krate":0,"index":3431},"children":[],"decl_id":null,"docs":" Number of the input port to the operator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":26202,"byte_end":26205,"line_start":101,"line_end":101,"column_start":12,"column_end":15},"name":"new","qualname":"<Target>::new","value":"fn (node: usize, port: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new target from node and port identifiers.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":555},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dataflow","qualname":"::dataflow","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\mod.rs","parent":null,"children":[{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":2076},{"krate":0,"index":2368},{"krate":0,"index":2487}],"decl_id":null,"docs":" Abstractions for timely dataflow programming.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":562},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"operators","qualname":"::dataflow::operators","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","parent":null,"children":[{"krate":0,"index":563},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":573},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":680},{"krate":0,"index":764},{"krate":0,"index":791},{"krate":0,"index":864},{"krate":0,"index":916},{"krate":0,"index":950},{"krate":0,"index":974},{"krate":0,"index":1014},{"krate":0,"index":1040},{"krate":0,"index":1060},{"krate":0,"index":1097},{"krate":0,"index":1117},{"krate":0,"index":1136},{"krate":0,"index":1179},{"krate":0,"index":1199},{"krate":0,"index":1357},{"krate":0,"index":1390},{"krate":0,"index":1463},{"krate":0,"index":1915},{"krate":0,"index":1936},{"krate":0,"index":1963},{"krate":0,"index":2072}],"decl_id":null,"docs":" Extension traits for `Stream` implementing various operators.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":595},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\enterleave.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"enterleave","qualname":"::dataflow::operators::enterleave","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\enterleave.rs","parent":null,"children":[{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":608},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":615},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":633},{"krate":0,"index":642},{"krate":0,"index":648},{"krate":0,"index":652},{"krate":0,"index":658},{"krate":0,"index":664},{"krate":0,"index":669},{"krate":0,"index":675}],"decl_id":null,"docs":" Extension traits to move a `Stream` between an outer `Scope` and inner `Scope`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":619},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\enterleave.rs","byte_start":133698,"byte_end":133703,"line_start":41,"line_end":41,"column_start":11,"column_end":16},"name":"Enter","qualname":"::dataflow::operators::enterleave::Enter","value":"Enter<G: Scope, T: Timestamp + Refines<G::Timestamp>, D: Data>","parent":null,"children":[{"krate":0,"index":623}],"decl_id":null,"docs":" Extension trait to move a `Stream` into a child of its current `Scope`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\enterleave.rs","byte_start":134216,"byte_end":134221,"line_start":56,"line_end":56,"column_start":8,"column_end":13},"name":"enter","qualname":"::dataflow::operators::enterleave::Enter::enter","value":"fn <'a> (&self, _: &Child<'a, G, T>) -> Stream<Child<'a, G, T>, D>","parent":{"krate":0,"index":619},"children":[],"decl_id":null,"docs":" Moves the `Stream` argument into a child of its current `Scope`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":626},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\enterleave.rs","byte_start":134461,"byte_end":134468,"line_start":62,"line_end":62,"column_start":11,"column_end":18},"name":"EnterAt","qualname":"::dataflow::operators::enterleave::EnterAt","value":"EnterAt<G: Scope, T: Timestamp, D: Data>","parent":null,"children":[{"krate":0,"index":630}],"decl_id":null,"docs":" Extension trait to move a `Stream` into a child of its current `Scope` setting the timestamp for each element.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\enterleave.rs","byte_start":135030,"byte_end":135038,"line_start":77,"line_end":77,"column_start":8,"column_end":16},"name":"enter_at","qualname":"::dataflow::operators::enterleave::EnterAt::enter_at","value":"fn <'a, F> (&self, scope: &Iterative<'a, G, T>, initial: F) -> Stream<Iterative<'a, G, T>, D>","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Moves the `Stream` argument into a child of its current `Scope` setting the timestamp for each element by `initial`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":648},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\enterleave.rs","byte_start":136282,"byte_end":136287,"line_start":103,"line_end":103,"column_start":11,"column_end":16},"name":"Leave","qualname":"::dataflow::operators::enterleave::Leave","value":"Leave<G: Scope, D: Data>","parent":null,"children":[{"krate":0,"index":651}],"decl_id":null,"docs":" Extension trait to move a `Stream` to the parent of its current `Scope`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\enterleave.rs","byte_start":136754,"byte_end":136759,"line_start":118,"line_end":118,"column_start":8,"column_end":13},"name":"leave","qualname":"::dataflow::operators::enterleave::Leave::leave","value":"fn (&self) -> Stream<G, D>","parent":{"krate":0,"index":648},"children":[],"decl_id":null,"docs":" Moves a `Stream` to the parent of its current `Scope`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":680},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"input","qualname":"::dataflow::operators::input","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":700},{"krate":0,"index":705},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":717},{"krate":0,"index":725},{"krate":0,"index":730},{"krate":0,"index":736},{"krate":0,"index":745},{"krate":0,"index":760}],"decl_id":null,"docs":" Create new `Streams` connected to external inputs.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":705},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","byte_start":140424,"byte_end":140429,"line_start":26,"line_end":26,"column_start":11,"column_end":16},"name":"Input","qualname":"::dataflow::operators::input::Input","value":"Input: Scope","parent":null,"children":[{"krate":0,"index":706},{"krate":0,"index":708}],"decl_id":null,"docs":" Create a new `Stream` and `Handle` through which to supply input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","byte_start":141735,"byte_end":141744,"line_start":60,"line_end":60,"column_start":8,"column_end":17},"name":"new_input","qualname":"::dataflow::operators::input::Input::new_input","value":"fn <D> (&mut self) -> (Handle<<Self as ScopeParent>::Timestamp, D>, Stream<Self, D>)","parent":{"krate":0,"index":705},"children":[],"decl_id":null,"docs":" Create a new `Stream` and `Handle` through which to supply input.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","byte_start":142986,"byte_end":142996,"line_start":92,"line_end":92,"column_start":8,"column_end":18},"name":"input_from","qualname":"::dataflow::operators::input::Input::input_from","value":"fn <D> (&mut self, handle: &mut Handle<<Self as ScopeParent>::Timestamp, D>) -> Stream<Self, D>","parent":{"krate":0,"index":705},"children":[],"decl_id":null,"docs":" Create a new stream from a supplied interactive handle.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":736},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","byte_start":145752,"byte_end":145758,"line_start":173,"line_end":173,"column_start":12,"column_end":18},"name":"Handle","qualname":"::dataflow::operators::input::Handle","value":"Handle {  }","parent":null,"children":[{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":744}],"decl_id":null,"docs":" A handle to an input `Stream`, used to introduce data to a timely dataflow computation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","byte_start":146907,"byte_end":146910,"line_start":210,"line_end":210,"column_start":12,"column_end":15},"name":"new","qualname":"<Handle<T, D>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new input handle, from which one can create timely streams.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","byte_start":148133,"byte_end":148142,"line_start":247,"line_end":247,"column_start":12,"column_end":21},"name":"to_stream","qualname":"<Handle<T, D>>::to_stream","value":"fn <G> (&mut self, scope: &mut G) -> Stream<G, D>","parent":null,"children":[],"decl_id":null,"docs":" Creates an input stream from the handle in the supplied scope.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","byte_start":150347,"byte_end":150351,"line_start":306,"line_end":306,"column_start":12,"column_end":16},"name":"send","qualname":"<Handle<T, D>>::send","value":"fn (&mut self, data: D) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sends one record into the corresponding timely dataflow `Stream`, at the current epoch.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","byte_start":150230,"byte_end":150239,"line_start":304,"line_end":304,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","byte_start":150816,"byte_end":150826,"line_start":317,"line_end":317,"column_start":12,"column_end":22},"name":"send_batch","qualname":"<Handle<T, D>>::send_batch","value":"fn (&mut self, buffer: &mut Vec<D>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sends a batch of records into the corresponding timely dataflow `Stream`, at the current epoch.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","byte_start":151906,"byte_end":151916,"line_start":343,"line_end":343,"column_start":12,"column_end":22},"name":"advance_to","qualname":"<Handle<T, D>>::advance_to","value":"fn (&mut self, next: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Advances the current epoch to `next`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":757},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","byte_start":152573,"byte_end":152578,"line_start":360,"line_end":360,"column_start":12,"column_end":17},"name":"close","qualname":"<Handle<T, D>>::close","value":"fn (self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Closes the input.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","byte_start":152636,"byte_end":152641,"line_start":363,"line_end":363,"column_start":12,"column_end":17},"name":"epoch","qualname":"<Handle<T, D>>::epoch","value":"fn (&self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Reports the current epoch.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":759},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","byte_start":152735,"byte_end":152739,"line_start":368,"line_end":368,"column_start":12,"column_end":16},"name":"time","qualname":"<Handle<T, D>>::time","value":"fn (&self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Reports the current timestamp.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":764},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\flow_controlled.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"flow_controlled","qualname":"::dataflow::operators::flow_controlled","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\flow_controlled.rs","parent":null,"children":[{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":774},{"krate":0,"index":782}],"decl_id":null,"docs":" Methods to construct flow-controlled sources.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":774},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\flow_controlled.rs","byte_start":153230,"byte_end":153249,"line_start":10,"line_end":10,"column_start":12,"column_end":31},"name":"IteratorSourceInput","qualname":"::dataflow::operators::flow_controlled::IteratorSourceInput","value":"IteratorSourceInput { lower_bound, data, target }","parent":null,"children":[{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":781}],"decl_id":null,"docs":" Output of the input reading function for iterator_source.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":779},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\flow_controlled.rs","byte_start":153419,"byte_end":153430,"line_start":12,"line_end":12,"column_start":9,"column_end":20},"name":"lower_bound","qualname":"::dataflow::operators::flow_controlled::IteratorSourceInput::lower_bound","value":"T","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":" Lower bound on timestamps that can be emitted by this input in the future.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":780},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\flow_controlled.rs","byte_start":153564,"byte_end":153568,"line_start":15,"line_end":15,"column_start":9,"column_end":13},"name":"data","qualname":"::dataflow::operators::flow_controlled::IteratorSourceInput::data","value":"I","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":" Any `T: IntoIterator` of new input data in the form (time, data): time must be\n monotonically increasing.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":781},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\flow_controlled.rs","byte_start":153738,"byte_end":153744,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"name":"target","qualname":"::dataflow::operators::flow_controlled::IteratorSourceInput::target","value":"T","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":" A timestamp that represents the frontier that the probe should have\n reached before the function is invoked again to ingest additional input.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":782},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\flow_controlled.rs","byte_start":156220,"byte_end":156235,"line_start":74,"line_end":74,"column_start":8,"column_end":23},"name":"iterator_source","qualname":"::dataflow::operators::flow_controlled::iterator_source","value":"fn <G, D, DI, I, F> (scope: &G, name: &str, mut input_f: F, probe: Handle<G::Timestamp>) -> Stream<G, D>","parent":null,"children":[],"decl_id":null,"docs":" Construct a source that repeatedly calls the provided function to ingest input.\n - The function can return None to signal the end of the input;\n - otherwise, it should return a `IteratorSourceInput`, where:\n   * `lower_bound` is a lower bound on timestamps that can be emitted by this input in the future,\n   `Default::default()` can be used if this isn't needed (the source will assume that\n   the timestamps in `data` are monotonically increasing and will release capabilities\n   accordingly);\n   * `data` is any `T: IntoIterator` of new input data in the form (time, data): time must be\n   monotonically increasing;\n   * `target` is a timestamp that represents the frontier that the probe should have\n   reached before the function is invoked again to ingest additional input.\n The function will receive the current lower bound of timestamps that can be inserted,\n `lower_bound`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":791},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\unordered_input.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"unordered_input","qualname":"::dataflow::operators::unordered_input","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\unordered_input.rs","parent":null,"children":[{"krate":0,"index":792},{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":810},{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":815},{"krate":0,"index":818},{"krate":0,"index":822},{"krate":0,"index":826},{"krate":0,"index":834},{"krate":0,"index":839},{"krate":0,"index":845},{"krate":0,"index":849},{"krate":0,"index":3456},{"krate":0,"index":3461},{"krate":0,"index":855},{"krate":0,"index":861}],"decl_id":null,"docs":" Create new `Streams` connected to external inputs.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":818},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\unordered_input.rs","byte_start":158974,"byte_end":158988,"line_start":24,"line_end":24,"column_start":11,"column_end":25},"name":"UnorderedInput","qualname":"::dataflow::operators::unordered_input::UnorderedInput","value":"UnorderedInput<G: Scope>","parent":null,"children":[{"krate":0,"index":820}],"decl_id":null,"docs":" Create a new `Stream` and `Handle` through which to supply input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\unordered_input.rs","byte_start":161219,"byte_end":161238,"line_start":78,"line_end":78,"column_start":8,"column_end":27},"name":"new_unordered_input","qualname":"::dataflow::operators::unordered_input::UnorderedInput::new_unordered_input","value":"fn <D> (&mut self) -> ((UnorderedHandle<G::Timestamp, D>, ActivateCapability<G::Timestamp>),\n Stream<G, D>)","parent":{"krate":0,"index":818},"children":[],"decl_id":null,"docs":" Create a new capability-based `Stream` and `Handle` through which to supply input. This\n input supports multiple open epochs (timestamps) at the same time.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":845},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\unordered_input.rs","byte_start":163959,"byte_end":163974,"line_start":150,"line_end":150,"column_start":12,"column_end":27},"name":"UnorderedHandle","qualname":"::dataflow::operators::unordered_input::UnorderedHandle","value":"UnorderedHandle {  }","parent":null,"children":[{"krate":0,"index":848}],"decl_id":null,"docs":" A handle to an input `Stream`, used to introduce data to a timely dataflow computation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":853},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\unordered_input.rs","byte_start":164379,"byte_end":164386,"line_start":162,"line_end":162,"column_start":12,"column_end":19},"name":"session","qualname":"<UnorderedHandle<T, D>>::session","value":"fn <'b> (&'b mut self, cap: ActivateCapability<T>) -> ActivateOnDrop<AutoflushSession<'b, T, D, PushCounter<T, D, Tee<T, D>>>>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new automatically flushing session based on the supplied capability.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3456},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\unordered_input.rs","byte_start":164716,"byte_end":164734,"line_start":169,"line_end":169,"column_start":12,"column_end":30},"name":"ActivateCapability","qualname":"::dataflow::operators::unordered_input::ActivateCapability","value":"ActivateCapability {  }","parent":null,"children":[{"krate":0,"index":3458},{"krate":0,"index":3459},{"krate":0,"index":3460}],"decl_id":null,"docs":" Capability that activates on drop.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\unordered_input.rs","byte_start":164956,"byte_end":164959,"line_start":177,"line_end":177,"column_start":12,"column_end":15},"name":"new","qualname":"<ActivateCapability<T>>::new","value":"fn (capability: Capability<T>, address: &[usize], activations: Rc<RefCell<Activations>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new activating capability.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\unordered_input.rs","byte_start":165249,"byte_end":165253,"line_start":185,"line_end":185,"column_start":12,"column_end":16},"name":"time","qualname":"<ActivateCapability<T>>::time","value":"fn (&self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" The timestamp associated with this capability.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\unordered_input.rs","byte_start":165359,"byte_end":165366,"line_start":189,"line_end":189,"column_start":12,"column_end":19},"name":"delayed","qualname":"<ActivateCapability<T>>::delayed","value":"fn (&self, time: &T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new delayed capability.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\unordered_input.rs","byte_start":165635,"byte_end":165644,"line_start":197,"line_end":197,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<ActivateCapability<T>>::downgrade","value":"fn (&mut self, time: &T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Downgrades this capability.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":864},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\feedback.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"feedback","qualname":"::dataflow::operators::feedback","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\feedback.rs","parent":null,"children":[{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":883},{"krate":0,"index":889},{"krate":0,"index":893},{"krate":0,"index":899},{"krate":0,"index":903},{"krate":0,"index":910}],"decl_id":null,"docs":" Create cycles in a timely dataflow graph.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":879},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\feedback.rs","byte_start":166515,"byte_end":166523,"line_start":17,"line_end":17,"column_start":11,"column_end":19},"name":"Feedback","qualname":"::dataflow::operators::feedback::Feedback","value":"Feedback<G: Scope>","parent":null,"children":[{"krate":0,"index":881}],"decl_id":null,"docs":" Creates a `Stream` and a `Handle` to later bind the source of that `Stream`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":881},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\feedback.rs","byte_start":167490,"byte_end":167498,"line_start":39,"line_end":39,"column_start":8,"column_end":16},"name":"feedback","qualname":"::dataflow::operators::feedback::Feedback::feedback","value":"fn <D> (&mut self, summary: <G::Timestamp as Timestamp>::Summary) -> (Handle<G, D>, Stream<G, D>)","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Creates a `Stream` and a `Handle` to later bind the source of that `Stream`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":883},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\feedback.rs","byte_start":167693,"byte_end":167705,"line_start":43,"line_end":43,"column_start":11,"column_end":23},"name":"LoopVariable","qualname":"::dataflow::operators::feedback::LoopVariable","value":"LoopVariable<'a, G: Scope, T: Timestamp>","parent":null,"children":[{"krate":0,"index":887}],"decl_id":null,"docs":" Creates a `Stream` and a `Handle` to later bind the source of that `Stream`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\feedback.rs","byte_start":168795,"byte_end":168808,"line_start":67,"line_end":67,"column_start":8,"column_end":21},"name":"loop_variable","qualname":"::dataflow::operators::feedback::LoopVariable::loop_variable","value":"fn <D> (&mut self, summary: T::Summary) -> (Handle<Iterative<'a, G, T>, D>, Stream<Iterative<'a, G, T>, D>)","parent":{"krate":0,"index":883},"children":[],"decl_id":null,"docs":" Creates a `Stream` and a `Handle` to later bind the source of that `Stream`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":899},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\feedback.rs","byte_start":169631,"byte_end":169642,"line_start":87,"line_end":87,"column_start":11,"column_end":22},"name":"ConnectLoop","qualname":"::dataflow::operators::feedback::ConnectLoop","value":"ConnectLoop<G: Scope, D: Data>","parent":null,"children":[{"krate":0,"index":902}],"decl_id":null,"docs":" Connect a `Stream` to the input of a loop variable.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\feedback.rs","byte_start":170306,"byte_end":170318,"line_start":105,"line_end":105,"column_start":8,"column_end":20},"name":"connect_loop","qualname":"::dataflow::operators::feedback::ConnectLoop::connect_loop","value":"fn (&self, _: Handle<G, D>) -> ()","parent":{"krate":0,"index":899},"children":[],"decl_id":null,"docs":" Connect a `Stream` to be the input of a loop variable.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":910},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\feedback.rs","byte_start":171295,"byte_end":171301,"line_start":134,"line_end":134,"column_start":12,"column_end":18},"name":"Handle","qualname":"::dataflow::operators::feedback::Handle","value":"Handle {  }","parent":null,"children":[{"krate":0,"index":913},{"krate":0,"index":914},{"krate":0,"index":915}],"decl_id":null,"docs":" A handle used to bind the source of a loop variable.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":916},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\concat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"concat","qualname":"::dataflow::operators::concat","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\concat.rs","parent":null,"children":[{"krate":0,"index":917},{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":922},{"krate":0,"index":926},{"krate":0,"index":930},{"krate":0,"index":935},{"krate":0,"index":940}],"decl_id":null,"docs":" Merges the contents of multiple streams.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":922},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\concat.rs","byte_start":171675,"byte_end":171681,"line_start":9,"line_end":9,"column_start":11,"column_end":17},"name":"Concat","qualname":"::dataflow::operators::concat::Concat","value":"Concat<G: Scope, D: Data>","parent":null,"children":[{"krate":0,"index":925}],"decl_id":null,"docs":" Merge the contents of two streams.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":925},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\concat.rs","byte_start":172081,"byte_end":172087,"line_start":23,"line_end":23,"column_start":8,"column_end":14},"name":"concat","qualname":"::dataflow::operators::concat::Concat::concat","value":"fn (&self, _: &Stream<G, D>) -> Stream<G, D>","parent":{"krate":0,"index":922},"children":[],"decl_id":null,"docs":" Merge the contents of two streams.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":930},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\concat.rs","byte_start":172381,"byte_end":172392,"line_start":33,"line_end":33,"column_start":11,"column_end":22},"name":"Concatenate","qualname":"::dataflow::operators::concat::Concatenate","value":"Concatenate<G: Scope, D: Data>","parent":null,"children":[{"krate":0,"index":933}],"decl_id":null,"docs":" Merge the contents of multiple streams.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":933},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\concat.rs","byte_start":172934,"byte_end":172945,"line_start":50,"line_end":50,"column_start":8,"column_end":19},"name":"concatenate","qualname":"::dataflow::operators::concat::Concatenate::concatenate","value":"fn <I> (&self, sources: I) -> Stream<G, D>","parent":{"krate":0,"index":930},"children":[],"decl_id":null,"docs":" Merge the contents of multiple streams.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":950},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\partition.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"partition","qualname":"::dataflow::operators::partition","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\partition.rs","parent":null,"children":[{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":963}],"decl_id":null,"docs":" Partition a stream of records into multiple streams.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":957},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\partition.rs","byte_start":174837,"byte_end":174846,"line_start":9,"line_end":9,"column_start":11,"column_end":20},"name":"Partition","qualname":"::dataflow::operators::partition::Partition","value":"Partition<G: Scope, D: Data, D2: Data, F: Fn(D) -> (u64, D2)>","parent":null,"children":[{"krate":0,"index":962}],"decl_id":null,"docs":" Partition a stream of records into multiple streams.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":962},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\partition.rs","byte_start":175496,"byte_end":175505,"line_start":25,"line_end":25,"column_start":8,"column_end":17},"name":"partition","qualname":"::dataflow::operators::partition::Partition::partition","value":"fn (&self, parts: u64, route: F) -> Vec<Stream<G, D2>>","parent":{"krate":0,"index":957},"children":[],"decl_id":null,"docs":" Produces `parts` output streams, containing records produced and assigned by `route`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":974},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::dataflow::operators::map","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\map.rs","parent":null,"children":[{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":992}],"decl_id":null,"docs":" Extension methods for `Stream` based on record-by-record transformation.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":981},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\map.rs","byte_start":177075,"byte_end":177078,"line_start":9,"line_end":9,"column_start":11,"column_end":14},"name":"Map","qualname":"::dataflow::operators::map::Map","value":"Map<S: Scope, D: Data>","parent":null,"children":[{"krate":0,"index":984},{"krate":0,"index":987},{"krate":0,"index":989}],"decl_id":null,"docs":" Extension trait for `Stream`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\map.rs","byte_start":177481,"byte_end":177484,"line_start":22,"line_end":22,"column_start":8,"column_end":11},"name":"map","qualname":"::dataflow::operators::map::Map::map","value":"fn <D2, L> (&self, logic: L) -> Stream<S, D2>","parent":{"krate":0,"index":981},"children":[],"decl_id":null,"docs":" Consumes each element of the stream and yields a new element.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":987},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\map.rs","byte_start":177976,"byte_end":177988,"line_start":35,"line_end":35,"column_start":8,"column_end":20},"name":"map_in_place","qualname":"::dataflow::operators::map::Map::map_in_place","value":"fn <L> (&self, logic: L) -> Stream<S, D>","parent":{"krate":0,"index":981},"children":[],"decl_id":null,"docs":" Updates each element of the stream and yields the element, re-using memory where possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":989},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\map.rs","byte_start":178450,"byte_end":178458,"line_start":48,"line_end":48,"column_start":8,"column_end":16},"name":"flat_map","qualname":"::dataflow::operators::map::Map::flat_map","value":"fn <I, L> (&self, logic: L) -> Stream<S, I::Item>","parent":{"krate":0,"index":981},"children":[],"decl_id":null,"docs":" Consumes each element of the stream and yields some number of new elements.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1014},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\inspect.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"inspect","qualname":"::dataflow::operators::inspect","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\inspect.rs","parent":null,"children":[{"krate":0,"index":1015},{"krate":0,"index":1016},{"krate":0,"index":1017},{"krate":0,"index":1020},{"krate":0,"index":1021},{"krate":0,"index":1032}],"decl_id":null,"docs":" Extension trait and implementation for observing and action on streamed data.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1021},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\inspect.rs","byte_start":180501,"byte_end":180508,"line_start":9,"line_end":9,"column_start":11,"column_end":18},"name":"Inspect","qualname":"::dataflow::operators::inspect::Inspect","value":"Inspect<G: Scope, D: Data>","parent":null,"children":[{"krate":0,"index":1024},{"krate":0,"index":1027},{"krate":0,"index":1030}],"decl_id":null,"docs":" Methods to inspect records and batches of records on a stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1024},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\inspect.rs","byte_start":180869,"byte_end":180876,"line_start":21,"line_end":21,"column_start":8,"column_end":15},"name":"inspect","qualname":"::dataflow::operators::inspect::Inspect::inspect","value":"fn (&self, mut func: impl FnMut(&D) + 'static) -> Stream<G, D>","parent":{"krate":0,"index":1021},"children":[],"decl_id":null,"docs":" Runs a supplied closure on each observed data element.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1027},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\inspect.rs","byte_start":181431,"byte_end":181443,"line_start":38,"line_end":38,"column_start":8,"column_end":20},"name":"inspect_time","qualname":"::dataflow::operators::inspect::Inspect::inspect_time","value":"fn (&self, mut func: impl FnMut(&G::Timestamp, &D) + 'static) -> Stream<G, D>","parent":{"krate":0,"index":1021},"children":[],"decl_id":null,"docs":" Runs a supplied closure on each observed data element and associated time.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1030},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\inspect.rs","byte_start":182068,"byte_end":182081,"line_start":57,"line_end":57,"column_start":8,"column_end":21},"name":"inspect_batch","qualname":"::dataflow::operators::inspect::Inspect::inspect_batch","value":"fn (&self, func: impl FnMut(&G::Timestamp, &[D]) + 'static) -> Stream<G, D>","parent":{"krate":0,"index":1021},"children":[],"decl_id":null,"docs":" Runs a supplied closure on each observed data batch (time and data slice).","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1040},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\filter.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"filter","qualname":"::dataflow::operators::filter","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\filter.rs","parent":null,"children":[{"krate":0,"index":1041},{"krate":0,"index":1042},{"krate":0,"index":1043},{"krate":0,"index":1046},{"krate":0,"index":1047},{"krate":0,"index":1051}],"decl_id":null,"docs":" Filters a stream by a predicate.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1047},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\filter.rs","byte_start":182895,"byte_end":182901,"line_start":9,"line_end":9,"column_start":11,"column_end":17},"name":"Filter","qualname":"::dataflow::operators::filter::Filter","value":"Filter<D: Data>","parent":null,"children":[{"krate":0,"index":1049}],"decl_id":null,"docs":" Extension trait for filtering.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1049},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\filter.rs","byte_start":183325,"byte_end":183331,"line_start":22,"line_end":22,"column_start":8,"column_end":14},"name":"filter","qualname":"::dataflow::operators::filter::Filter::filter","value":"fn <P> (&self, predicate: P) -> Self","parent":{"krate":0,"index":1047},"children":[],"decl_id":null,"docs":" Returns a new instance of `self` containing only records satisfying `predicate`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1060},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\delay.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"delay","qualname":"::dataflow::operators::delay","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\delay.rs","parent":null,"children":[{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1066},{"krate":0,"index":1067},{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1080}],"decl_id":null,"docs":" Operators acting on timestamps to logically delay records\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1071},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\delay.rs","byte_start":184316,"byte_end":184321,"line_start":12,"line_end":12,"column_start":11,"column_end":16},"name":"Delay","qualname":"::dataflow::operators::delay::Delay","value":"Delay<G: Scope, D: Data>","parent":null,"children":[{"krate":0,"index":1074},{"krate":0,"index":1076},{"krate":0,"index":1078}],"decl_id":null,"docs":" Methods to advance the timestamps of records or batches of records.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\delay.rs","byte_start":185285,"byte_end":185290,"line_start":39,"line_end":39,"column_start":8,"column_end":13},"name":"delay","qualname":"::dataflow::operators::delay::Delay::delay","value":"fn <L> (&self, func: L) -> Self","parent":{"krate":0,"index":1071},"children":[],"decl_id":null,"docs":" Advances the timestamp of records using a supplied function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\delay.rs","byte_start":186353,"byte_end":186364,"line_start":66,"line_end":66,"column_start":8,"column_end":19},"name":"delay_total","qualname":"::dataflow::operators::delay::Delay::delay_total","value":"fn <L> (&self, func: L) -> Self","parent":{"krate":0,"index":1071},"children":[],"decl_id":null,"docs":" Advances the timestamp of records using a supplied function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\delay.rs","byte_start":187488,"byte_end":187499,"line_start":94,"line_end":94,"column_start":8,"column_end":19},"name":"delay_batch","qualname":"::dataflow::operators::delay::Delay::delay_batch","value":"fn <L> (&self, func: L) -> Self","parent":{"krate":0,"index":1071},"children":[],"decl_id":null,"docs":" Advances the timestamp of batches of records using a supplied function.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1097},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\exchange.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"exchange","qualname":"::dataflow::operators::exchange","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\exchange.rs","parent":null,"children":[{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1100},{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":1109}],"decl_id":null,"docs":" Exchange records between workers.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1104},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\exchange.rs","byte_start":190117,"byte_end":190125,"line_start":9,"line_end":9,"column_start":11,"column_end":19},"name":"Exchange","qualname":"::dataflow::operators::exchange::Exchange","value":"Exchange<T, D: ExchangeData>","parent":null,"children":[{"krate":0,"index":1107}],"decl_id":null,"docs":" Exchange records between workers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1107},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\exchange.rs","byte_start":190666,"byte_end":190674,"line_start":25,"line_end":25,"column_start":8,"column_end":16},"name":"exchange","qualname":"::dataflow::operators::exchange::Exchange::exchange","value":"fn (&self, route: impl Fn(&D) -> u64 + 'static) -> Self","parent":{"krate":0,"index":1104},"children":[],"decl_id":null,"docs":" Exchange records between workers.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1117},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\broadcast.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"broadcast","qualname":"::dataflow::operators::broadcast","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\broadcast.rs","parent":null,"children":[{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1122},{"krate":0,"index":1125},{"krate":0,"index":1128}],"decl_id":null,"docs":" Broadcast records to all workers.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1125},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\broadcast.rs","byte_start":192011,"byte_end":192020,"line_start":22,"line_end":22,"column_start":11,"column_end":20},"name":"Broadcast","qualname":"::dataflow::operators::broadcast::Broadcast","value":"Broadcast<D: ExchangeData>","parent":null,"children":[{"krate":0,"index":1127}],"decl_id":null,"docs":" Broadcast records to all workers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1127},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\broadcast.rs","byte_start":192396,"byte_end":192405,"line_start":35,"line_end":35,"column_start":8,"column_end":17},"name":"broadcast","qualname":"::dataflow::operators::broadcast::Broadcast::broadcast","value":"fn (&self) -> Self","parent":{"krate":0,"index":1125},"children":[],"decl_id":null,"docs":" Broadcast records to all workers.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1136},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\probe.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"probe","qualname":"::dataflow::operators::probe","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\probe.rs","parent":null,"children":[{"krate":0,"index":1137},{"krate":0,"index":1138},{"krate":0,"index":1139},{"krate":0,"index":1140},{"krate":0,"index":1143},{"krate":0,"index":1144},{"krate":0,"index":1145},{"krate":0,"index":1146},{"krate":0,"index":1147},{"krate":0,"index":1148},{"krate":0,"index":1149},{"krate":0,"index":1152},{"krate":0,"index":1157},{"krate":0,"index":1164},{"krate":0,"index":1167},{"krate":0,"index":1176}],"decl_id":null,"docs":" Monitor progress at a `Stream`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1152},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\probe.rs","byte_start":196922,"byte_end":196927,"line_start":19,"line_end":19,"column_start":11,"column_end":16},"name":"Probe","qualname":"::dataflow::operators::probe::Probe","value":"Probe<G: Scope, D: Data>","parent":null,"children":[{"krate":0,"index":1155},{"krate":0,"index":1156}],"decl_id":null,"docs":" Monitors progress at a `Stream`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1155},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\probe.rs","byte_start":197978,"byte_end":197983,"line_start":47,"line_end":47,"column_start":8,"column_end":13},"name":"probe","qualname":"::dataflow::operators::probe::Probe::probe","value":"fn (&self) -> Handle<G::Timestamp>","parent":{"krate":0,"index":1152},"children":[],"decl_id":null,"docs":" Constructs a progress probe which indicates which timestamps have elapsed at the operator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1156},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\probe.rs","byte_start":199073,"byte_end":199083,"line_start":79,"line_end":79,"column_start":8,"column_end":18},"name":"probe_with","qualname":"::dataflow::operators::probe::Probe::probe_with","value":"fn (&self, handle: &mut Handle<G::Timestamp>) -> Stream<G, D>","parent":{"krate":0,"index":1152},"children":[],"decl_id":null,"docs":" Inserts a progress probe in a stream.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1164},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\probe.rs","byte_start":201373,"byte_end":201379,"line_start":140,"line_end":140,"column_start":12,"column_end":18},"name":"Handle","qualname":"::dataflow::operators::probe::Handle","value":"Handle {  }","parent":null,"children":[{"krate":0,"index":1166}],"decl_id":null,"docs":" Reports information about progress at the probe.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1169},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\probe.rs","byte_start":201565,"byte_end":201574,"line_start":146,"line_end":146,"column_start":22,"column_end":31},"name":"less_than","qualname":"<Handle<T>>::less_than","value":"fn (&self, time: &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" returns true iff the frontier is strictly less than `time`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\probe.rs","byte_start":201548,"byte_end":201557,"line_start":146,"line_end":146,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1170},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\probe.rs","byte_start":201735,"byte_end":201745,"line_start":148,"line_end":148,"column_start":22,"column_end":32},"name":"less_equal","qualname":"<Handle<T>>::less_equal","value":"fn (&self, time: &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" returns true iff the frontier is less than or equal to `time`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\probe.rs","byte_start":201718,"byte_end":201727,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1171},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\probe.rs","byte_start":201884,"byte_end":201888,"line_start":150,"line_end":150,"column_start":22,"column_end":26},"name":"done","qualname":"<Handle<T>>::done","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" returns true iff the frontier is empty.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\probe.rs","byte_start":201867,"byte_end":201876,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1172},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\probe.rs","byte_start":201995,"byte_end":201998,"line_start":152,"line_end":152,"column_start":22,"column_end":25},"name":"new","qualname":"<Handle<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new handle.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\probe.rs","byte_start":201978,"byte_end":201987,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1173},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\probe.rs","byte_start":202566,"byte_end":202579,"line_start":168,"line_end":168,"column_start":12,"column_end":25},"name":"with_frontier","qualname":"<Handle<T>>::with_frontier","value":"fn <R, F> (&self, mut function: F) -> R","parent":null,"children":[],"decl_id":null,"docs":" Invokes a method on the frontier, returning its result.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\probe.rs","byte_start":202545,"byte_end":202554,"line_start":167,"line_end":167,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":1179},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\to_stream.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"to_stream","qualname":"::dataflow::operators::to_stream","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\to_stream.rs","parent":null,"children":[{"krate":0,"index":1180},{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1183},{"krate":0,"index":1184},{"krate":0,"index":1187},{"krate":0,"index":1192}],"decl_id":null,"docs":" Conversion to the `Stream` type from iterators.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1187},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\to_stream.rs","byte_start":204255,"byte_end":204263,"line_start":11,"line_end":11,"column_start":11,"column_end":19},"name":"ToStream","qualname":"::dataflow::operators::to_stream::ToStream","value":"ToStream<T: Timestamp, D: Data>","parent":null,"children":[{"krate":0,"index":1190}],"decl_id":null,"docs":" Converts to a timely `Stream`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\to_stream.rs","byte_start":204802,"byte_end":204811,"line_start":28,"line_end":28,"column_start":8,"column_end":17},"name":"to_stream","qualname":"::dataflow::operators::to_stream::ToStream::to_stream","value":"fn <S> (self, scope: &mut S) -> Stream<S, D>","parent":{"krate":0,"index":1187},"children":[],"decl_id":null,"docs":" Converts to a timely `Stream`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1199},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"capture","qualname":"::dataflow::operators::capture","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\mod.rs","parent":null,"children":[{"krate":0,"index":1200},{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1203},{"krate":0,"index":1206},{"krate":0,"index":1207},{"krate":0,"index":1208},{"krate":0,"index":1209},{"krate":0,"index":1235},{"krate":0,"index":1260},{"krate":0,"index":1272}],"decl_id":null,"docs":" Operators to capture and replay timely dataflow streams.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1209},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\capture.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"capture","qualname":"::dataflow::operators::capture::capture","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\capture.rs","parent":null,"children":[{"krate":0,"index":1210},{"krate":0,"index":1211},{"krate":0,"index":1214},{"krate":0,"index":1215},{"krate":0,"index":1216},{"krate":0,"index":1217},{"krate":0,"index":1218},{"krate":0,"index":1219},{"krate":0,"index":1222},{"krate":0,"index":1228}],"decl_id":null,"docs":" Traits and types for capturing timely dataflow streams.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1222},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\capture.rs","byte_start":209981,"byte_end":209988,"line_start":20,"line_end":20,"column_start":11,"column_end":18},"name":"Capture","qualname":"::dataflow::operators::capture::capture::Capture","value":"Capture<T: Timestamp, D: Data>","parent":null,"children":[{"krate":0,"index":1225},{"krate":0,"index":1227}],"decl_id":null,"docs":" Capture a stream of timestamped data for later replay.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1225},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\capture.rs","byte_start":213275,"byte_end":213287,"line_start":106,"line_end":106,"column_start":8,"column_end":20},"name":"capture_into","qualname":"::dataflow::operators::capture::capture::Capture::capture_into","value":"fn <P> (&self, pusher: P) -> ()","parent":{"krate":0,"index":1222},"children":[],"decl_id":null,"docs":" Captures a stream of timestamped data for later replay.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1227},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\capture.rs","byte_start":213399,"byte_end":213406,"line_start":109,"line_end":109,"column_start":8,"column_end":15},"name":"capture","qualname":"::dataflow::operators::capture::capture::Capture::capture","value":"fn (&self) -> ::std::sync::mpsc::Receiver<Event<T, D>>","parent":{"krate":0,"index":1222},"children":[],"decl_id":null,"docs":" Captures a stream using Rust's MPSC channels.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1235},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\replay.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"replay","qualname":"::dataflow::operators::capture::replay","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\replay.rs","parent":null,"children":[{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1240},{"krate":0,"index":1241},{"krate":0,"index":1242},{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1245},{"krate":0,"index":1246},{"krate":0,"index":1253}],"decl_id":null,"docs":" Traits and types for replaying captured timely dataflow streams.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1246},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\replay.rs","byte_start":217862,"byte_end":217868,"line_start":52,"line_end":52,"column_start":11,"column_end":17},"name":"Replay","qualname":"::dataflow::operators::capture::replay::Replay","value":"Replay<T: Timestamp, D: Data>: Sized","parent":null,"children":[{"krate":0,"index":1249},{"krate":0,"index":1251}],"decl_id":null,"docs":" Replay a capture stream into a scope with the same timestamp.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1249},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\replay.rs","byte_start":217978,"byte_end":217989,"line_start":54,"line_end":54,"column_start":8,"column_end":19},"name":"replay_into","qualname":"::dataflow::operators::capture::replay::Replay::replay_into","value":"fn <S> (self, scope: &mut S) -> Stream<S, D>","parent":{"krate":0,"index":1246},"children":[],"decl_id":null,"docs":" Replays `self` into the provided scope, as a `Stream<S, D>`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1251},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\replay.rs","byte_start":218441,"byte_end":218452,"line_start":62,"line_end":62,"column_start":8,"column_end":19},"name":"replay_core","qualname":"::dataflow::operators::capture::replay::Replay::replay_core","value":"fn <S> (self, scope: &mut S, period: Option<std::time::Duration>) -> Stream<S, D>","parent":{"krate":0,"index":1246},"children":[],"decl_id":null,"docs":" Replays `self` into the provided scope, as a `Stream<S, D>'.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1260},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\extract.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"extract","qualname":"::dataflow::operators::capture::extract","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\extract.rs","parent":null,"children":[{"krate":0,"index":1261},{"krate":0,"index":1262},{"krate":0,"index":1266}],"decl_id":null,"docs":" Traits and types for extracting captured timely dataflow streams.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1262},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\extract.rs","byte_start":220904,"byte_end":220911,"line_start":6,"line_end":6,"column_start":11,"column_end":18},"name":"Extract","qualname":"::dataflow::operators::capture::extract::Extract","value":"Extract<T: Ord, D: Ord>","parent":null,"children":[{"krate":0,"index":1265}],"decl_id":null,"docs":" Supports extracting a sequence of timestamp and data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1265},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\extract.rs","byte_start":222432,"byte_end":222439,"line_start":47,"line_end":47,"column_start":8,"column_end":15},"name":"extract","qualname":"::dataflow::operators::capture::extract::Extract::extract","value":"fn (self) -> Vec<(T, Vec<D>)>","parent":{"krate":0,"index":1262},"children":[],"decl_id":null,"docs":" Converts `self` into a sequence of timestamped data.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1272},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"event","qualname":"::dataflow::operators::capture::event","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","parent":null,"children":[{"krate":0,"index":3464},{"krate":0,"index":3519},{"krate":0,"index":3515},{"krate":0,"index":3504},{"krate":0,"index":3499},{"krate":0,"index":3495},{"krate":0,"index":3483},{"krate":0,"index":3479},{"krate":0,"index":3474},{"krate":0,"index":1273},{"krate":0,"index":1277},{"krate":0,"index":1281},{"krate":0,"index":1285},{"krate":0,"index":1313}],"decl_id":null,"docs":" Traits and types describing timely dataflow events.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3467},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":223797,"byte_end":223805,"line_start":11,"line_end":11,"column_start":5,"column_end":13},"name":"Progress","qualname":"::dataflow::operators::capture::event::Event::Progress","value":"Event::Progress(Vec<(T, i64)>)","parent":{"krate":0,"index":3464},"children":[],"decl_id":null,"docs":" Progress received via `push_external_progress`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3470},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":223873,"byte_end":223881,"line_start":13,"line_end":13,"column_start":5,"column_end":13},"name":"Messages","qualname":"::dataflow::operators::capture::event::Event::Messages","value":"Event::Messages(T, Vec<D>)","parent":{"krate":0,"index":3464},"children":[],"decl_id":null,"docs":" Messages received via the data stream.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3464},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":223723,"byte_end":223728,"line_start":9,"line_end":9,"column_start":10,"column_end":15},"name":"Event","qualname":"::dataflow::operators::capture::event::Event","value":"Event::{Progress, Messages}","parent":null,"children":[{"krate":0,"index":3467},{"krate":0,"index":3470}],"decl_id":null,"docs":" Data and progress events of the captured stream.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1273},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":224214,"byte_end":224227,"line_start":22,"line_end":22,"column_start":11,"column_end":24},"name":"EventIterator","qualname":"::dataflow::operators::capture::event::EventIterator","value":"EventIterator<T, D>","parent":null,"children":[{"krate":0,"index":1276}],"decl_id":null,"docs":" Iterates over contained `Event<T, D>`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1276},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":224303,"byte_end":224307,"line_start":24,"line_end":24,"column_start":8,"column_end":12},"name":"next","qualname":"::dataflow::operators::capture::event::EventIterator::next","value":"fn (&mut self) -> Option<&Event<T, D>>","parent":{"krate":0,"index":1273},"children":[],"decl_id":null,"docs":" Iterates over references to `Event<T, D>` elements.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1277},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":224393,"byte_end":224404,"line_start":29,"line_end":29,"column_start":11,"column_end":22},"name":"EventPusher","qualname":"::dataflow::operators::capture::event::EventPusher","value":"EventPusher<T, D>","parent":null,"children":[{"krate":0,"index":1280}],"decl_id":null,"docs":" Receives `Event<T, D>` events.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1280},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":224472,"byte_end":224476,"line_start":31,"line_end":31,"column_start":8,"column_end":12},"name":"push","qualname":"::dataflow::operators::capture::event::EventPusher::push","value":"fn (&mut self, event: Event<T, D>) -> ()","parent":{"krate":0,"index":1277},"children":[],"decl_id":null,"docs":" Provides a new `Event<T, D>` to the pusher.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1285},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":224927,"byte_end":224931,"line_start":45,"line_end":45,"column_start":9,"column_end":13},"name":"link","qualname":"::dataflow::operators::capture::event::link","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","parent":null,"children":[{"krate":0,"index":1286},{"krate":0,"index":1287},{"krate":0,"index":1288},{"krate":0,"index":1292},{"krate":0,"index":1297},{"krate":0,"index":1301},{"krate":0,"index":1305},{"krate":0,"index":1309}],"decl_id":null,"docs":" A linked-list event pusher and iterator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1292},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":225091,"byte_end":225100,"line_start":53,"line_end":53,"column_start":16,"column_end":25},"name":"EventLink","qualname":"::dataflow::operators::capture::event::link::EventLink","value":"EventLink { event, next }","parent":null,"children":[{"krate":0,"index":1295},{"krate":0,"index":1296}],"decl_id":null,"docs":" A linked list of Event<T, D>.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1295},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":225384,"byte_end":225389,"line_start":58,"line_end":58,"column_start":13,"column_end":18},"name":"event","qualname":"::dataflow::operators::capture::event::link::EventLink::event","value":"std::option::Option<dataflow::operators::capture::event::Event<T, D>>","parent":{"krate":0,"index":1292},"children":[],"decl_id":null,"docs":" An event, if one exists.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1296},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":225466,"byte_end":225470,"line_start":60,"line_end":60,"column_start":13,"column_end":17},"name":"next","qualname":"::dataflow::operators::capture::event::link::EventLink::next","value":"std::cell::RefCell<std::option::Option<std::rc::Rc<dataflow::operators::capture::event::link::EventLink<T, D>>>>","parent":{"krate":0,"index":1292},"children":[],"decl_id":null,"docs":" The next event, if it exists.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1300},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":225606,"byte_end":225609,"line_start":65,"line_end":65,"column_start":16,"column_end":19},"name":"new","qualname":"<EventLink<T, D>>::new","value":"fn () -> EventLink<T, D>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new `EventLink`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1313},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":227179,"byte_end":227185,"line_start":115,"line_end":115,"column_start":9,"column_end":15},"name":"binary","qualname":"::dataflow::operators::capture::event::binary","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","parent":null,"children":[{"krate":0,"index":1314},{"krate":0,"index":1315},{"krate":0,"index":1316},{"krate":0,"index":1320},{"krate":0,"index":1326},{"krate":0,"index":1331},{"krate":0,"index":1336},{"krate":0,"index":1347},{"krate":0,"index":1352}],"decl_id":null,"docs":" A binary event pusher and iterator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1320},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":227382,"byte_end":227393,"line_start":122,"line_end":122,"column_start":16,"column_end":27},"name":"EventWriter","qualname":"::dataflow::operators::capture::event::binary::EventWriter","value":"EventWriter {  }","parent":null,"children":[{"krate":0,"index":1324},{"krate":0,"index":1325}],"decl_id":null,"docs":" A wrapper for `W: Write` implementing `EventPusher<T, D>`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1330},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":227643,"byte_end":227646,"line_start":129,"line_end":129,"column_start":16,"column_end":19},"name":"new","qualname":"<EventWriter<T, D, W>>::new","value":"fn (w: W) -> EventWriter<T, D, W>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new `EventWriter` wrapping a supplied writer.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1336},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":228262,"byte_end":228273,"line_start":145,"line_end":145,"column_start":16,"column_end":27},"name":"EventReader","qualname":"::dataflow::operators::capture::event::binary::EventReader","value":"EventReader {  }","parent":null,"children":[{"krate":0,"index":1340},{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1345},{"krate":0,"index":1346}],"decl_id":null,"docs":" A Wrapper for `R: Read` implementing `EventIterator<T, D>`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1351},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":228640,"byte_end":228643,"line_start":157,"line_end":157,"column_start":16,"column_end":19},"name":"new","qualname":"<EventReader<T, D, R>>::new","value":"fn (r: R) -> EventReader<T, D, R>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new `EventReader` wrapping a supplied reader.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1357},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\branch.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"branch","qualname":"::dataflow::operators::branch","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\branch.rs","parent":null,"children":[{"krate":0,"index":1358},{"krate":0,"index":1359},{"krate":0,"index":1360},{"krate":0,"index":1363},{"krate":0,"index":1364},{"krate":0,"index":1369},{"krate":0,"index":1377},{"krate":0,"index":1382}],"decl_id":null,"docs":" Operators that separate one stream into two streams based on some condition\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1364},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\branch.rs","byte_start":230469,"byte_end":230475,"line_start":9,"line_end":9,"column_start":11,"column_end":17},"name":"Branch","qualname":"::dataflow::operators::branch::Branch","value":"Branch<S: Scope, D: Data>","parent":null,"children":[{"krate":0,"index":1367}],"decl_id":null,"docs":" Extension trait for `Stream`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1367},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\branch.rs","byte_start":231367,"byte_end":231373,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"branch","qualname":"::dataflow::operators::branch::Branch::branch","value":"fn (&self, condition: impl Fn(&S::Timestamp, &D) -> bool + 'static) -> (Stream<S, D>, Stream<S, D>)","parent":{"krate":0,"index":1364},"children":[],"decl_id":null,"docs":" Takes one input stream and splits it into two output streams.\n For each record, the supplied closure is called with a reference to\n the data and its time. If it returns true, the record will be sent\n to the second returned stream, otherwise it will be sent to the first.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1377},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\branch.rs","byte_start":232814,"byte_end":232824,"line_start":74,"line_end":74,"column_start":11,"column_end":21},"name":"BranchWhen","qualname":"::dataflow::operators::branch::BranchWhen","value":"BranchWhen<S: Scope, D: Data>","parent":null,"children":[{"krate":0,"index":1380}],"decl_id":null,"docs":" Extension trait for `Stream`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1380},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\branch.rs","byte_start":233656,"byte_end":233667,"line_start":94,"line_end":94,"column_start":8,"column_end":19},"name":"branch_when","qualname":"::dataflow::operators::branch::BranchWhen::branch_when","value":"fn (&self, condition: impl Fn(&S::Timestamp) -> bool + 'static) -> (Stream<S, D>, Stream<S, D>)","parent":{"krate":0,"index":1377},"children":[],"decl_id":null,"docs":" Takes one input stream and splits it into two output streams.\n For each time, the supplied closure is called. If it returns true,\n the records for that will be sent to the second returned stream, otherwise\n they will be sent to the first.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1390},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\aggregation\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"aggregation","qualname":"::dataflow::operators::aggregation","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\aggregation\\mod.rs","parent":null,"children":[{"krate":0,"index":1391},{"krate":0,"index":1392},{"krate":0,"index":1393},{"krate":0,"index":1428}],"decl_id":null,"docs":" Aggregation operators of various flavors","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1393},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\aggregation\\state_machine.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"state_machine","qualname":"::dataflow::operators::aggregation::state_machine","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\aggregation\\state_machine.rs","parent":null,"children":[{"krate":0,"index":1394},{"krate":0,"index":1395},{"krate":0,"index":1396},{"krate":0,"index":1399},{"krate":0,"index":1402},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1414}],"decl_id":null,"docs":" General purpose state transition operator.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1404},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\aggregation\\state_machine.rs","byte_start":236679,"byte_end":236691,"line_start":20,"line_end":20,"column_start":11,"column_end":23},"name":"StateMachine","qualname":"::dataflow::operators::aggregation::state_machine::StateMachine","value":"StateMachine<S: Scope, K: ExchangeData + Hash + Eq, V: ExchangeData>","parent":null,"children":[{"krate":0,"index":1408}],"decl_id":null,"docs":" Generic state-transition machinery: each key has a state, and receives a sequence of events.\n Events are applied in time-order, but no other promises are made. Each state transition can\n produce output, which is sent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1408},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\aggregation\\state_machine.rs","byte_start":237970,"byte_end":237983,"line_start":48,"line_end":48,"column_start":8,"column_end":21},"name":"state_machine","qualname":"::dataflow::operators::aggregation::state_machine::StateMachine::state_machine","value":"fn <R, D, I, F, H> (&self, fold: F, hash: H) -> Stream<S, R>","parent":{"krate":0,"index":1404},"children":[],"decl_id":null,"docs":" Tracks a state for each presented key, using user-supplied state transition logic.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1428},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\aggregation\\aggregate.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"aggregate","qualname":"::dataflow::operators::aggregation::aggregate","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\aggregation\\aggregate.rs","parent":null,"children":[{"krate":0,"index":1429},{"krate":0,"index":1430},{"krate":0,"index":1431},{"krate":0,"index":1434},{"krate":0,"index":1437},{"krate":0,"index":1438},{"krate":0,"index":1439},{"krate":0,"index":1449}],"decl_id":null,"docs":" General purpose intra-timestamp aggregation\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1439},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\aggregation\\aggregate.rs","byte_start":241621,"byte_end":241630,"line_start":14,"line_end":14,"column_start":11,"column_end":20},"name":"Aggregate","qualname":"::dataflow::operators::aggregation::aggregate::Aggregate","value":"Aggregate<S: Scope, K: ExchangeData + Hash, V: ExchangeData>","parent":null,"children":[{"krate":0,"index":1443}],"decl_id":null,"docs":" Generic intra-timestamp aggregation","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1443},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\aggregation\\aggregate.rs","byte_start":243593,"byte_end":243602,"line_start":63,"line_end":63,"column_start":8,"column_end":17},"name":"aggregate","qualname":"::dataflow::operators::aggregation::aggregate::Aggregate::aggregate","value":"fn <R, D, F, E, H> (&self, fold: F, emit: E, hash: H) -> Stream<S, R>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Aggregates data of the form `(key, val)`, using user-supplied logic.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1463},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"generic","qualname":"::dataflow::operators::generic","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\mod.rs","parent":null,"children":[{"krate":0,"index":1464},{"krate":0,"index":1591},{"krate":0,"index":1649},{"krate":0,"index":1733},{"krate":0,"index":1831},{"krate":0,"index":1900},{"krate":0,"index":1903},{"krate":0,"index":1908},{"krate":0,"index":1911},{"krate":0,"index":1914}],"decl_id":null,"docs":" Generic operators defined by user-provided closures.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1464},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\operator.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"operator","qualname":"::dataflow::operators::generic::operator","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\operator.rs","parent":null,"children":[{"krate":0,"index":1465},{"krate":0,"index":1466},{"krate":0,"index":1467},{"krate":0,"index":1471},{"krate":0,"index":1472},{"krate":0,"index":1473},{"krate":0,"index":1476},{"krate":0,"index":1477},{"krate":0,"index":1478},{"krate":0,"index":1481},{"krate":0,"index":1523},{"krate":0,"index":1579},{"krate":0,"index":1586}],"decl_id":null,"docs":" Methods to construct generic streaming and blocking unary operators.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1481},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\operator.rs","byte_start":246482,"byte_end":246490,"line_start":19,"line_end":19,"column_start":11,"column_end":19},"name":"Operator","qualname":"::dataflow::operators::generic::operator::Operator","value":"Operator<G: Scope, D1: Data>","parent":null,"children":[{"krate":0,"index":1484},{"krate":0,"index":1489},{"krate":0,"index":1494},{"krate":0,"index":1499},{"krate":0,"index":1506},{"krate":0,"index":1513},{"krate":0,"index":1520}],"decl_id":null,"docs":" Methods to construct generic streaming and blocking operators.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1484},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\operator.rs","byte_start":248519,"byte_end":248533,"line_start":59,"line_end":59,"column_start":8,"column_end":22},"name":"unary_frontier","qualname":"::dataflow::operators::generic::operator::Operator::unary_frontier","value":"fn <D2, B, L, P> (&self, pact: P, name: &str, constructor: B) -> Stream<G, D2>","parent":{"krate":0,"index":1481},"children":[],"decl_id":null,"docs":" Creates a new dataflow operator that partitions its input stream by a parallelization\n strategy `pact`, and repeatedly invokes `logic`, the function returned by the function passed as `constructor`.\n `logic` can read from the input stream, write to the output stream, and inspect the frontier at the input.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1489},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\operator.rs","byte_start":250285,"byte_end":250297,"line_start":96,"line_end":96,"column_start":8,"column_end":20},"name":"unary_notify","qualname":"::dataflow::operators::generic::operator::Operator::unary_notify","value":"fn <D2, L, P> (&self, pact: P, name: &str, init: impl IntoIterator<Item = G::Timestamp>, logic: L) -> Stream<G, D2>","parent":{"krate":0,"index":1481},"children":[],"decl_id":null,"docs":" Creates a new dataflow operator that partitions its input stream by a parallelization\n strategy `pact`, and repeatedly invokes `logic`, the function returned by the function passed as `constructor`.\n `logic` can read from the input stream, write to the output stream, and inspect the frontier at the input.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1494},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\operator.rs","byte_start":252006,"byte_end":252011,"line_start":131,"line_end":131,"column_start":8,"column_end":13},"name":"unary","qualname":"::dataflow::operators::generic::operator::Operator::unary","value":"fn <D2, B, L, P> (&self, pact: P, name: &str, constructor: B) -> Stream<G, D2>","parent":{"krate":0,"index":1481},"children":[],"decl_id":null,"docs":" Creates a new dataflow operator that partitions its input stream by a parallelization\n strategy `pact`, and repeatedly invokes `logic`, the function returned by the function passed as `constructor`.\n `logic` can read from the input stream, and write to the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1499},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\operator.rs","byte_start":254969,"byte_end":254984,"line_start":189,"line_end":189,"column_start":8,"column_end":23},"name":"binary_frontier","qualname":"::dataflow::operators::generic::operator::Operator::binary_frontier","value":"fn <D2, D3, B, L, P1, P2> (&self, other: &Stream<G, D2>, pact1: P1, pact2: P2, name: &str, constructor: B) -> Stream<G, D3>","parent":{"krate":0,"index":1481},"children":[],"decl_id":null,"docs":" Creates a new dataflow operator that partitions its input streams by a parallelization\n strategy `pact`, and repeatedly invokes `logic`, the function returned by the function passed as `constructor`.\n `logic` can read from the input streams, write to the output stream, and inspect the frontier at the inputs.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1506},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\operator.rs","byte_start":257609,"byte_end":257622,"line_start":245,"line_end":245,"column_start":8,"column_end":21},"name":"binary_notify","qualname":"::dataflow::operators::generic::operator::Operator::binary_notify","value":"fn <D2, D3, L, P1, P2> (&self, other: &Stream<G, D2>, pact1: P1, pact2: P2, name: &str, init: impl IntoIterator<Item = G::Timestamp>, logic: L) -> Stream<G, D3>","parent":{"krate":0,"index":1481},"children":[],"decl_id":null,"docs":" Creates a new dataflow operator that partitions its input streams by a parallelization\n strategy `pact`, and repeatedly invokes `logic`, the function returned by the function passed as `constructor`.\n `logic` can read from the input streams, write to the output stream, and inspect the frontier at the inputs.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1513},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\operator.rs","byte_start":259974,"byte_end":259980,"line_start":289,"line_end":289,"column_start":8,"column_end":14},"name":"binary","qualname":"::dataflow::operators::generic::operator::Operator::binary","value":"fn <D2, D3, B, L, P1, P2> (&self, other: &Stream<G, D2>, pact1: P1, pact2: P2, name: &str, constructor: B) -> Stream<G, D3>","parent":{"krate":0,"index":1481},"children":[],"decl_id":null,"docs":" Creates a new dataflow operator that partitions its input streams by a parallelization\n strategy `pact`, and repeatedly invokes `logic`, the function returned by the function passed as `constructor`.\n `logic` can read from the input streams, write to the output stream, and inspect the frontier at the inputs.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1520},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\operator.rs","byte_start":261494,"byte_end":261498,"line_start":323,"line_end":323,"column_start":8,"column_end":12},"name":"sink","qualname":"::dataflow::operators::generic::operator::Operator::sink","value":"fn <L, P> (&self, pact: P, name: &str, logic: L) -> ()","parent":{"krate":0,"index":1481},"children":[],"decl_id":null,"docs":" Creates a new dataflow operator that partitions its input stream by a parallelization\n strategy `pact`, and repeatedly invokes the function `logic` which can read from the input stream\n and inspect the frontier at the input.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1579},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\operator.rs","byte_start":271191,"byte_end":271197,"line_start":559,"line_end":559,"column_start":8,"column_end":14},"name":"source","qualname":"::dataflow::operators::generic::operator::source","value":"fn <G, D, B, L> (scope: &G, name: &str, constructor: B) -> Stream<G, D>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new data stream source for a scope.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1586},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\operator.rs","byte_start":272553,"byte_end":272558,"line_start":603,"line_end":603,"column_start":8,"column_end":13},"name":"empty","qualname":"::dataflow::operators::generic::operator::empty","value":"fn <G, D> (scope: &G) -> Stream<G, D>","parent":null,"children":[],"decl_id":null,"docs":" Constructs an empty stream.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1591},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_rc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"builder_rc","qualname":"::dataflow::operators::generic::builder_rc","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_rc.rs","parent":null,"children":[{"krate":0,"index":1592},{"krate":0,"index":1593},{"krate":0,"index":1594},{"krate":0,"index":1595},{"krate":0,"index":1596},{"krate":0,"index":1599},{"krate":0,"index":1600},{"krate":0,"index":1603},{"krate":0,"index":1606},{"krate":0,"index":1607},{"krate":0,"index":1608},{"krate":0,"index":1609},{"krate":0,"index":1610},{"krate":0,"index":1611},{"krate":0,"index":1612},{"krate":0,"index":1613},{"krate":0,"index":1617},{"krate":0,"index":1618},{"krate":0,"index":1619},{"krate":0,"index":1620},{"krate":0,"index":1628}],"decl_id":null,"docs":" Types to build operators with general shapes.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1620},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_rc.rs","byte_start":273808,"byte_end":273823,"line_start":29,"line_end":29,"column_start":12,"column_end":27},"name":"OperatorBuilder","qualname":"::dataflow::operators::generic::builder_rc::OperatorBuilder","value":"OperatorBuilder {  }","parent":null,"children":[{"krate":0,"index":1622},{"krate":0,"index":1623},{"krate":0,"index":1624},{"krate":0,"index":1625},{"krate":0,"index":1626},{"krate":0,"index":1627}],"decl_id":null,"docs":" Builds operators with generic shape.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1630},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_rc.rs","byte_start":274269,"byte_end":274272,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"new","qualname":"<OperatorBuilder<G>>::new","value":"fn (name: String, scope: G) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new generic operator builder from its containing scope.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1631},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_rc.rs","byte_start":274709,"byte_end":274719,"line_start":54,"line_end":54,"column_start":12,"column_end":22},"name":"set_notify","qualname":"<OperatorBuilder<G>>::set_notify","value":"fn (&mut self, notify: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether the operator requires frontier information.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1632},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_rc.rs","byte_start":274903,"byte_end":274912,"line_start":59,"line_end":59,"column_start":12,"column_end":21},"name":"new_input","qualname":"<OperatorBuilder<G>>::new_input","value":"fn <D, P> (&mut self, stream: &Stream<G, D>, pact: P) -> InputHandle<G::Timestamp, D, P::Puller>","parent":null,"children":[],"decl_id":null,"docs":" Adds a new input to a generic operator builder, returning the `Pull` implementor to use.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1635},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_rc.rs","byte_start":275384,"byte_end":275404,"line_start":68,"line_end":68,"column_start":12,"column_end":32},"name":"new_input_connection","qualname":"<OperatorBuilder<G>>::new_input_connection","value":"fn <D, P> (&mut self, stream: &Stream<G, D>, pact: P, connection: Vec<Antichain<<G::Timestamp as Timestamp>::Summary>>) -> InputHandle<G::Timestamp, D, P::Puller>","parent":null,"children":[],"decl_id":null,"docs":" Adds a new input with connection information to a generic operator builder, returning the `Pull` implementor to use.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1638},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_rc.rs","byte_start":276072,"byte_end":276082,"line_start":82,"line_end":82,"column_start":12,"column_end":22},"name":"new_output","qualname":"<OperatorBuilder<G>>::new_output","value":"fn <D> (&mut self) -> (OutputWrapper<G::Timestamp, D, Tee<G::Timestamp, D>>, Stream<G, D>)","parent":null,"children":[],"decl_id":null,"docs":" Adds a new output to a generic operator builder, returning the `Pull` implementor to use.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1640},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_rc.rs","byte_start":276472,"byte_end":276493,"line_start":88,"line_end":88,"column_start":12,"column_end":33},"name":"new_output_connection","qualname":"<OperatorBuilder<G>>::new_output_connection","value":"fn <D> (&mut self, connection: Vec<Antichain<<G::Timestamp as Timestamp>::Summary>>) -> (OutputWrapper<G::Timestamp, D, Tee<G::Timestamp, D>>, Stream<G, D>)","parent":null,"children":[],"decl_id":null,"docs":" Adds a new output with connection information to a generic operator builder, returning the `Pull` implementor to use.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1642},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_rc.rs","byte_start":277136,"byte_end":277141,"line_start":102,"line_end":102,"column_start":12,"column_end":17},"name":"build","qualname":"<OperatorBuilder<G>>::build","value":"fn <B, L> (self, constructor: B) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Creates an operator implementation from supplied logic constructor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1646},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_rc.rs","byte_start":279267,"byte_end":279272,"line_start":158,"line_end":158,"column_start":12,"column_end":17},"name":"index","qualname":"<OperatorBuilder<G>>::index","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the identifier assigned to the operator being constructed\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1647},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_rc.rs","byte_start":279387,"byte_end":279393,"line_start":163,"line_end":163,"column_start":12,"column_end":18},"name":"global","qualname":"<OperatorBuilder<G>>::global","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The operator's worker-unique identifier.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1648},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_rc.rs","byte_start":279508,"byte_end":279521,"line_start":168,"line_end":168,"column_start":12,"column_end":25},"name":"operator_info","qualname":"<OperatorBuilder<G>>::operator_info","value":"fn (&self) -> OperatorInfo","parent":null,"children":[],"decl_id":null,"docs":" Creates operator info for the operator.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1649},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_raw.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"builder_raw","qualname":"::dataflow::operators::generic::builder_raw","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_raw.rs","parent":null,"children":[{"krate":0,"index":1650},{"krate":0,"index":1651},{"krate":0,"index":1652},{"krate":0,"index":1653},{"krate":0,"index":1654},{"krate":0,"index":1657},{"krate":0,"index":1660},{"krate":0,"index":1665},{"krate":0,"index":1668},{"krate":0,"index":1669},{"krate":0,"index":1670},{"krate":0,"index":1671},{"krate":0,"index":1677},{"krate":0,"index":1681},{"krate":0,"index":1689},{"krate":0,"index":1709},{"krate":0,"index":1718},{"krate":0,"index":1724}],"decl_id":null,"docs":" Types to build operators with general shapes.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1671},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_raw.rs","byte_start":282808,"byte_end":282821,"line_start":24,"line_end":24,"column_start":12,"column_end":25},"name":"OperatorShape","qualname":"::dataflow::operators::generic::builder_raw::OperatorShape","value":"OperatorShape {  }","parent":null,"children":[{"krate":0,"index":1672},{"krate":0,"index":1673},{"krate":0,"index":1674},{"krate":0,"index":1675},{"krate":0,"index":1676}],"decl_id":null,"docs":" Contains type-free information about the operator properties.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1679},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_raw.rs","byte_start":283480,"byte_end":283486,"line_start":45,"line_end":45,"column_start":12,"column_end":18},"name":"inputs","qualname":"<OperatorShape>::inputs","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of inputs of this operator\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1680},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_raw.rs","byte_start":283590,"byte_end":283597,"line_start":50,"line_end":50,"column_start":12,"column_end":19},"name":"outputs","qualname":"<OperatorShape>::outputs","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of outputs of this operator\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1681},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_raw.rs","byte_start":283698,"byte_end":283713,"line_start":56,"line_end":56,"column_start":12,"column_end":27},"name":"OperatorBuilder","qualname":"::dataflow::operators::generic::builder_raw::OperatorBuilder","value":"OperatorBuilder {  }","parent":null,"children":[{"krate":0,"index":1683},{"krate":0,"index":1684},{"krate":0,"index":1685},{"krate":0,"index":1686},{"krate":0,"index":1687},{"krate":0,"index":1688}],"decl_id":null,"docs":" Builds operators with generic shape.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1691},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_raw.rs","byte_start":284075,"byte_end":284078,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"new","qualname":"<OperatorBuilder<G>>::new","value":"fn (name: String, mut scope: G) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new generic operator builder from its containing scope.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1692},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_raw.rs","byte_start":284577,"byte_end":284582,"line_start":87,"line_end":87,"column_start":12,"column_end":17},"name":"index","qualname":"<OperatorBuilder<G>>::index","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The operator's scope-local index.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1693},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_raw.rs","byte_start":284687,"byte_end":284693,"line_start":92,"line_end":92,"column_start":12,"column_end":18},"name":"global","qualname":"<OperatorBuilder<G>>::global","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The operator's worker-unique identifier.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1694},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_raw.rs","byte_start":284801,"byte_end":284806,"line_start":97,"line_end":97,"column_start":12,"column_end":17},"name":"shape","qualname":"<OperatorBuilder<G>>::shape","value":"fn (&self) -> &OperatorShape","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the operator's shape\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1695},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_raw.rs","byte_start":284942,"byte_end":284952,"line_start":102,"line_end":102,"column_start":12,"column_end":22},"name":"set_notify","qualname":"<OperatorBuilder<G>>::set_notify","value":"fn (&mut self, notify: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether the operator requires frontier information.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1696},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_raw.rs","byte_start":285131,"byte_end":285140,"line_start":107,"line_end":107,"column_start":12,"column_end":21},"name":"new_input","qualname":"<OperatorBuilder<G>>::new_input","value":"fn <D, P> (&mut self, stream: &Stream<G, D>, pact: P) -> P::Puller","parent":null,"children":[],"decl_id":null,"docs":" Adds a new input to a generic operator builder, returning the `Pull` implementor to use.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1699},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_raw.rs","byte_start":285549,"byte_end":285569,"line_start":115,"line_end":115,"column_start":12,"column_end":32},"name":"new_input_connection","qualname":"<OperatorBuilder<G>>::new_input_connection","value":"fn <D, P> (&mut self, stream: &Stream<G, D>, pact: P, connection: Vec<Antichain<<G::Timestamp as Timestamp>::Summary>>) -> P::Puller","parent":null,"children":[],"decl_id":null,"docs":" Adds a new input to a generic operator builder, returning the `Pull` implementor to use.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1702},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_raw.rs","byte_start":286354,"byte_end":286364,"line_start":133,"line_end":133,"column_start":12,"column_end":22},"name":"new_output","qualname":"<OperatorBuilder<G>>::new_output","value":"fn <D> (&mut self) -> (Tee<G::Timestamp, D>, Stream<G, D>)","parent":null,"children":[],"decl_id":null,"docs":" Adds a new input to a generic operator builder, returning the `Push` implementor to use.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1704},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_raw.rs","byte_start":286682,"byte_end":286703,"line_start":140,"line_end":140,"column_start":12,"column_end":33},"name":"new_output_connection","qualname":"<OperatorBuilder<G>>::new_output_connection","value":"fn <D> (&mut self, connection: Vec<Antichain<<G::Timestamp as Timestamp>::Summary>>) -> (Tee<G::Timestamp, D>, Stream<G, D>)","parent":null,"children":[],"decl_id":null,"docs":" Adds a new input to a generic operator builder, returning the `Push` implementor to use.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1706},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_raw.rs","byte_start":287378,"byte_end":287383,"line_start":156,"line_end":156,"column_start":12,"column_end":17},"name":"build","qualname":"<OperatorBuilder<G>>::build","value":"fn <L> (mut self, logic: L) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Creates an operator implementation from supplied logic constructor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1708},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_raw.rs","byte_start":288045,"byte_end":288058,"line_start":176,"line_end":176,"column_start":12,"column_end":25},"name":"operator_info","qualname":"<OperatorBuilder<G>>::operator_info","value":"fn (&self) -> OperatorInfo","parent":null,"children":[],"decl_id":null,"docs":" Information describing the operator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1754},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":291029,"byte_end":291040,"line_start":25,"line_end":25,"column_start":12,"column_end":23},"name":"InputHandle","qualname":"::dataflow::operators::generic::handles::InputHandle","value":"InputHandle {  }","parent":null,"children":[{"krate":0,"index":1758},{"krate":0,"index":1759},{"krate":0,"index":1760}],"decl_id":null,"docs":" Handle to an operator's input stream.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1761},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":291282,"byte_end":291303,"line_start":32,"line_end":32,"column_start":12,"column_end":33},"name":"FrontieredInputHandle","qualname":"::dataflow::operators::generic::handles::FrontieredInputHandle","value":"FrontieredInputHandle { handle, frontier }","parent":null,"children":[{"krate":0,"index":1766},{"krate":0,"index":1767}],"decl_id":null,"docs":" Handle to an operator's input stream and frontier.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1766},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":291402,"byte_end":291408,"line_start":34,"line_end":34,"column_start":9,"column_end":15},"name":"handle","qualname":"::dataflow::operators::generic::handles::FrontieredInputHandle::handle","value":"&'a mut dataflow::operators::generic::handles::InputHandle<T, D, P>","parent":{"krate":0,"index":1761},"children":[],"decl_id":null,"docs":" The underlying input handle.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1767},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":291510,"byte_end":291518,"line_start":36,"line_end":36,"column_start":9,"column_end":17},"name":"frontier","qualname":"::dataflow::operators::generic::handles::FrontieredInputHandle::frontier","value":"&'a progress::frontier::MutableAntichain<T>","parent":{"krate":0,"index":1761},"children":[],"decl_id":null,"docs":" The frontier as reported by timely progress tracking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1773},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":291916,"byte_end":291920,"line_start":45,"line_end":45,"column_start":12,"column_end":16},"name":"next","qualname":"<InputHandle<T, D, P>>::next","value":"fn (&mut self) -> Option<(CapabilityRef<T>, RefOrMut<Vec<D>>)>","parent":null,"children":[],"decl_id":null,"docs":" Reads the next input buffer (at some timestamp `t`) and a corresponding capability for `t`.\n The timestamp `t` of the input buffer can be retrieved by invoking `.time()` on the capability.\n Returns `None` when there's no more data available.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":291895,"byte_end":291904,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1775},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":293219,"byte_end":293227,"line_start":78,"line_end":78,"column_start":12,"column_end":20},"name":"for_each","qualname":"<InputHandle<T, D, P>>::for_each","value":"fn <F> (&mut self, mut logic: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Repeatedly calls `logic` till exhaustion of the available input data.\n `logic` receives a capability and an input buffer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":293198,"byte_end":293207,"line_start":77,"line_end":77,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1785},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":294346,"byte_end":294349,"line_start":101,"line_end":101,"column_start":12,"column_end":15},"name":"new","qualname":"<FrontieredInputHandle>::new","value":"fn (handle: &'a mut InputHandle<T, D, P>, frontier: &'a MutableAntichain<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new frontiered input handle.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1786},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":294813,"byte_end":294817,"line_start":112,"line_end":112,"column_start":12,"column_end":16},"name":"next","qualname":"<FrontieredInputHandle>::next","value":"fn (&mut self) -> Option<(CapabilityRef<T>, RefOrMut<Vec<D>>)>","parent":null,"children":[],"decl_id":null,"docs":" Reads the next input buffer (at some timestamp `t`) and a corresponding capability for `t`.\n The timestamp `t` of the input buffer can be retrieved by invoking `.time()` on the capability.\n Returns `None` when there's no more data available.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":294792,"byte_end":294801,"line_start":111,"line_end":111,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1787},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":295653,"byte_end":295661,"line_start":135,"line_end":135,"column_start":12,"column_end":20},"name":"for_each","qualname":"<FrontieredInputHandle>::for_each","value":"fn <F> (&mut self, logic: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Repeatedly calls `logic` till exhaustion of the available input data.\n `logic` receives a capability and an input buffer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":295632,"byte_end":295641,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1789},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":295856,"byte_end":295864,"line_start":141,"line_end":141,"column_start":12,"column_end":20},"name":"frontier","qualname":"<FrontieredInputHandle>::frontier","value":"fn (&self) -> &'a MutableAntichain<T>","parent":null,"children":[],"decl_id":null,"docs":" Inspect the frontier associated with this input.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":295835,"byte_end":295844,"line_start":140,"line_end":140,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1798},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":296861,"byte_end":296874,"line_start":165,"line_end":165,"column_start":12,"column_end":25},"name":"OutputWrapper","qualname":"::dataflow::operators::generic::handles::OutputWrapper","value":"OutputWrapper {  }","parent":null,"children":[{"krate":0,"index":1802},{"krate":0,"index":1803}],"decl_id":null,"docs":" An owned instance of an output buffer which ensures certain API use.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1808},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":297161,"byte_end":297164,"line_start":172,"line_end":172,"column_start":12,"column_end":15},"name":"new","qualname":"<OutputWrapper<T, D, P>>::new","value":"fn (push_buffer: Buffer<T, D, PushCounter<T, D, P>>, internal_buffer: Rc<RefCell<ChangeBatch<T>>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new output wrapper from a push buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1809},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":297659,"byte_end":297667,"line_start":182,"line_end":182,"column_start":12,"column_end":20},"name":"activate","qualname":"<OutputWrapper<T, D, P>>::activate","value":"fn (&mut self) -> OutputHandle<T, D, P>","parent":null,"children":[],"decl_id":null,"docs":" Borrows the push buffer into a handle, which can be used to send records.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1810},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":297903,"byte_end":297915,"line_start":192,"line_end":192,"column_start":12,"column_end":24},"name":"OutputHandle","qualname":"::dataflow::operators::generic::handles::OutputHandle","value":"OutputHandle {  }","parent":null,"children":[{"krate":0,"index":1815},{"krate":0,"index":1816}],"decl_id":null,"docs":" Handle to an operator's output stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1822},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":299103,"byte_end":299110,"line_start":220,"line_end":220,"column_start":12,"column_end":19},"name":"session","qualname":"<OutputHandle>::session","value":"fn <'b, C> (&'b mut self, cap: &'b C) -> Session<'b, T, D, PushCounter<T, D, P>>","parent":null,"children":[],"decl_id":null,"docs":" Obtains a session that can send data at the timestamp associated with capability `cap`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1838},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":300621,"byte_end":300632,"line_start":17,"line_end":17,"column_start":12,"column_end":23},"name":"Notificator","qualname":"::dataflow::operators::generic::notificator::Notificator","value":"Notificator {  }","parent":null,"children":[{"krate":0,"index":1841},{"krate":0,"index":1842},{"krate":0,"index":1843}],"decl_id":null,"docs":" Tracks requests for notification and delivers available notifications.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1847},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":300959,"byte_end":300962,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<Notificator>::new","value":"fn (frontiers: &'a [&'a MutableAntichain<T>], inner: &'a mut FrontierNotificator<T>, logging: &'a Option<Logger>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new `Notificator`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1848},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":301333,"byte_end":301341,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"frontier","qualname":"<Notificator>::frontier","value":"fn (&self, input: usize) -> AntichainRef<T>","parent":null,"children":[],"decl_id":null,"docs":" Reveals the elements in the frontier of the indicated input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1849},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":302573,"byte_end":302582,"line_start":72,"line_end":72,"column_start":12,"column_end":21},"name":"notify_at","qualname":"<Notificator>::notify_at","value":"fn (&mut self, cap: Capability<T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Requests a notification at the time associated with capability `cap`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":302552,"byte_end":302561,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1850},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":302977,"byte_end":302985,"line_start":81,"line_end":81,"column_start":12,"column_end":20},"name":"for_each","qualname":"<Notificator>::for_each","value":"fn <F> (&mut self, mut logic: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Repeatedly calls `logic` until exhaustion of the available notifications.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":302956,"byte_end":302965,"line_start":80,"line_end":80,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1860},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":309863,"byte_end":309882,"line_start":233,"line_end":233,"column_start":12,"column_end":31},"name":"FrontierNotificator","qualname":"::dataflow::operators::generic::notificator::FrontierNotificator","value":"FrontierNotificator {  }","parent":null,"children":[{"krate":0,"index":1862},{"krate":0,"index":1863}],"decl_id":null,"docs":" Tracks requests for notification and delivers available notifications.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1866},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":310109,"byte_end":310112,"line_start":240,"line_end":240,"column_start":12,"column_end":15},"name":"new","qualname":"<FrontierNotificator<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new `FrontierNotificator`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1867},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":310351,"byte_end":310355,"line_start":248,"line_end":248,"column_start":12,"column_end":16},"name":"from","qualname":"<FrontierNotificator<T>>::from","value":"fn <I> (iter: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new `FrontierNotificator` with initial capabilities.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1870},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":311967,"byte_end":311976,"line_start":285,"line_end":285,"column_start":12,"column_end":21},"name":"notify_at","qualname":"<FrontierNotificator<T>>::notify_at","value":"fn <'a> (&mut self, cap: Capability<T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Requests a notification at the time associated with capability `cap`. Takes ownership of\n the capability.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":311946,"byte_end":311955,"line_start":284,"line_end":284,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1872},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":312578,"byte_end":312598,"line_start":296,"line_end":296,"column_start":12,"column_end":32},"name":"notify_at_frontiered","qualname":"<FrontierNotificator<T>>::notify_at_frontiered","value":"fn <'a> (&mut self, cap: Capability<T>, frontiers: &'a [&'a MutableAntichain<T>]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Requests a notification at the time associated with capability `cap`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":312557,"byte_end":312566,"line_start":295,"line_end":295,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1875},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":312978,"byte_end":312992,"line_start":306,"line_end":306,"column_start":12,"column_end":26},"name":"make_available","qualname":"<FrontierNotificator<T>>::make_available","value":"fn <'a> (&mut self, frontiers: &'a [&'a MutableAntichain<T>]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Enables pending notifications not in advance of any element of `frontiers`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1881},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":314566,"byte_end":314570,"line_start":340,"line_end":340,"column_start":12,"column_end":16},"name":"next","qualname":"<FrontierNotificator<T>>::next","value":"fn <'a> (&mut self, frontiers: &'a [&'a MutableAntichain<T>]) -> Option<Capability<T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the next available capability with respect to the supplied frontiers, if one exists.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":314545,"byte_end":314554,"line_start":339,"line_end":339,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1884},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":315149,"byte_end":315157,"line_start":355,"line_end":355,"column_start":12,"column_end":20},"name":"for_each","qualname":"<FrontierNotificator<T>>::for_each","value":"fn <'a, F> (&mut self, frontiers: &'a [&'a MutableAntichain<T>], mut logic: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Repeatedly calls `logic` till exhaustion of the notifications made available by inspecting\n the frontiers.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":315128,"byte_end":315137,"line_start":354,"line_end":354,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1887},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":315742,"byte_end":315751,"line_start":367,"line_end":367,"column_start":12,"column_end":21},"name":"monotonic","qualname":"<FrontierNotificator<T>>::monotonic","value":"fn <'a> (&'a mut self, frontiers: &'a [&'a MutableAntichain<T>], logging: &'a Option<Logger>) -> Notificator<'a, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a notificator session in which delivered notification will be non-decreasing.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":315721,"byte_end":315730,"line_start":366,"line_end":366,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1889},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":317415,"byte_end":317422,"line_start":401,"line_end":401,"column_start":12,"column_end":19},"name":"pending","qualname":"<FrontierNotificator<T>>::pending","value":"fn <'a> (&'a self) -> ::std::slice::Iter<'a, (Capability<T>, u64)>","parent":null,"children":[],"decl_id":null,"docs":" Iterates over pending capabilities and their count. The count represents how often a\n capability has been requested.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3533},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\operator_info.rs","byte_start":318177,"byte_end":318189,"line_start":4,"line_end":4,"column_start":12,"column_end":24},"name":"OperatorInfo","qualname":"::dataflow::operators::generic::operator_info::OperatorInfo","value":"OperatorInfo { local_id, global_id, address }","parent":null,"children":[{"krate":0,"index":3534},{"krate":0,"index":3535},{"krate":0,"index":3536}],"decl_id":null,"docs":" Information about the operator being constructed\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3534},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\operator_info.rs","byte_start":318270,"byte_end":318278,"line_start":6,"line_end":6,"column_start":9,"column_end":17},"name":"local_id","qualname":"::dataflow::operators::generic::operator_info::OperatorInfo::local_id","value":"usize","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":" Scope-local index assigned to the operator being constructed.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3535},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\operator_info.rs","byte_start":318329,"byte_end":318338,"line_start":8,"line_end":8,"column_start":9,"column_end":18},"name":"global_id","qualname":"::dataflow::operators::generic::operator_info::OperatorInfo::global_id","value":"usize","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":" Worker-unique identifier.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3536},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\operator_info.rs","byte_start":318381,"byte_end":318388,"line_start":10,"line_end":10,"column_start":9,"column_end":16},"name":"address","qualname":"::dataflow::operators::generic::operator_info::OperatorInfo::address","value":"std::vec::Vec<usize>","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":" Operator address.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1902},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\operator_info.rs","byte_start":318476,"byte_end":318479,"line_start":15,"line_end":15,"column_start":12,"column_end":15},"name":"new","qualname":"<OperatorInfo>::new","value":"fn (local_id: usize, global_id: usize, address: &[usize]) -> OperatorInfo","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `OperatorInfo`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1915},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\reclock.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"reclock","qualname":"::dataflow::operators::reclock","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\reclock.rs","parent":null,"children":[{"krate":0,"index":1916},{"krate":0,"index":1917},{"krate":0,"index":1918},{"krate":0,"index":1921},{"krate":0,"index":1922},{"krate":0,"index":1923},{"krate":0,"index":1927}],"decl_id":null,"docs":" Extension methods for `Stream` based on record-by-record transformation.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1923},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\reclock.rs","byte_start":319007,"byte_end":319014,"line_start":10,"line_end":10,"column_start":11,"column_end":18},"name":"Reclock","qualname":"::dataflow::operators::reclock::Reclock","value":"Reclock<S: Scope, D: Data>","parent":null,"children":[{"krate":0,"index":1926}],"decl_id":null,"docs":" Extension trait for reclocking a stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1926},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\reclock.rs","byte_start":320507,"byte_end":320514,"line_start":48,"line_end":48,"column_start":8,"column_end":15},"name":"reclock","qualname":"::dataflow::operators::reclock::Reclock::reclock","value":"fn (&self, clock: &Stream<S, ()>) -> Stream<S, D>","parent":{"krate":0,"index":1923},"children":[],"decl_id":null,"docs":" Delays records until an input is observed on the `clock` input.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1936},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\count.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"count","qualname":"::dataflow::operators::count","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\count.rs","parent":null,"children":[{"krate":0,"index":1937},{"krate":0,"index":1938},{"krate":0,"index":1939},{"krate":0,"index":1940},{"krate":0,"index":1941},{"krate":0,"index":1944},{"krate":0,"index":1945},{"krate":0,"index":1953}],"decl_id":null,"docs":" Counts the number of records at each time.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1945},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\count.rs","byte_start":322011,"byte_end":322021,"line_start":12,"line_end":12,"column_start":11,"column_end":21},"name":"Accumulate","qualname":"::dataflow::operators::count::Accumulate","value":"Accumulate<G: Scope, D: Data>","parent":null,"children":[{"krate":0,"index":1948},{"krate":0,"index":1951}],"decl_id":null,"docs":" Accumulates records within a timestamp.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1948},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\count.rs","byte_start":322618,"byte_end":322628,"line_start":30,"line_end":30,"column_start":8,"column_end":18},"name":"accumulate","qualname":"::dataflow::operators::count::Accumulate::accumulate","value":"fn <A> (&self, default: A, logic: impl Fn(&mut A, RefOrMut<Vec<D>>) + 'static) -> Stream<G, A>","parent":{"krate":0,"index":1945},"children":[],"decl_id":null,"docs":" Accumulates records within a timestamp.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1951},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\count.rs","byte_start":323251,"byte_end":323256,"line_start":48,"line_end":48,"column_start":8,"column_end":13},"name":"count","qualname":"::dataflow::operators::count::Accumulate::count","value":"fn (&self) -> Stream<G, usize>","parent":{"krate":0,"index":1945},"children":[],"decl_id":null,"docs":" Counts the number of records observed at each time.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1973},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":325840,"byte_end":325855,"line_start":34,"line_end":34,"column_start":11,"column_end":26},"name":"CapabilityTrait","qualname":"::dataflow::operators::capability::CapabilityTrait","value":"CapabilityTrait<T: Timestamp>","parent":null,"children":[{"krate":0,"index":1975},{"krate":0,"index":1976}],"decl_id":null,"docs":" An internal trait expressing the capability to send messages with a given timestamp.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1975},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":325933,"byte_end":325937,"line_start":36,"line_end":36,"column_start":8,"column_end":12},"name":"time","qualname":"::dataflow::operators::capability::CapabilityTrait::time","value":"fn (&self) -> &T","parent":{"krate":0,"index":1973},"children":[],"decl_id":null,"docs":" The timestamp associated with the capability.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1976},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":325959,"byte_end":325975,"line_start":37,"line_end":37,"column_start":8,"column_end":24},"name":"valid_for_output","qualname":"::dataflow::operators::capability::CapabilityTrait::valid_for_output","value":"fn (&self, query_buffer: &Rc<RefCell<ChangeBatch<T>>>) -> bool","parent":{"krate":0,"index":1973},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1989},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":327044,"byte_end":327054,"line_start":59,"line_end":59,"column_start":12,"column_end":22},"name":"Capability","qualname":"::dataflow::operators::capability::Capability","value":"Capability {  }","parent":null,"children":[{"krate":0,"index":1991},{"krate":0,"index":1992}],"decl_id":null,"docs":" The capability to send data with a certain timestamp on a dataflow edge.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1999},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":327486,"byte_end":327490,"line_start":74,"line_end":74,"column_start":12,"column_end":16},"name":"time","qualname":"<Capability<T>>::time","value":"fn (&self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" The timestamp associated with this capability.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":327465,"byte_end":327474,"line_start":73,"line_end":73,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2000},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":327778,"byte_end":327785,"line_start":83,"line_end":83,"column_start":12,"column_end":19},"name":"delayed","qualname":"<Capability<T>>::delayed","value":"fn (&self, new_time: &T) -> Capability<T>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new capability for a timestamp `new_time` greater or equal to the timestamp of\n the source capability (`self`).","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":327757,"byte_end":327766,"line_start":82,"line_end":82,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2001},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":328244,"byte_end":328253,"line_start":94,"line_end":94,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<Capability<T>>::downgrade","value":"fn (&mut self, new_time: &T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Downgrades the capability to one corresponding to `new_time`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":328223,"byte_end":328232,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2029},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":330529,"byte_end":330542,"line_start":169,"line_end":169,"column_start":12,"column_end":25},"name":"CapabilityRef","qualname":"::dataflow::operators::capability::CapabilityRef","value":"CapabilityRef {  }","parent":null,"children":[{"krate":0,"index":2032},{"krate":0,"index":2033}],"decl_id":null,"docs":" An unowned capability, which can be used but not retained.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2043},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":331102,"byte_end":331106,"line_start":185,"line_end":185,"column_start":12,"column_end":16},"name":"time","qualname":"<CapabilityRef>::time","value":"fn (&self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" The timestamp associated with this capability.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":331081,"byte_end":331090,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2044},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":331393,"byte_end":331400,"line_start":194,"line_end":194,"column_start":12,"column_end":19},"name":"delayed","qualname":"<CapabilityRef>::delayed","value":"fn (&self, new_time: &T) -> Capability<T>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new capability for a timestamp `new_time` greater or equal to the timestamp of\n the source capability (`self`).","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":331372,"byte_end":331381,"line_start":193,"line_end":193,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2045},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":331558,"byte_end":331576,"line_start":199,"line_end":199,"column_start":12,"column_end":30},"name":"delayed_for_output","qualname":"<CapabilityRef>::delayed_for_output","value":"fn (&self, new_time: &T, output_port: usize) -> Capability<T>","parent":null,"children":[],"decl_id":null,"docs":" Delays capability for a specific output port.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2046},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":332455,"byte_end":332461,"line_start":218,"line_end":218,"column_start":12,"column_end":18},"name":"retain","qualname":"<CapabilityRef>::retain","value":"fn (self) -> Capability<T>","parent":null,"children":[],"decl_id":null,"docs":" Transform to an owned capability.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":332434,"byte_end":332443,"line_start":217,"line_end":217,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2047},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":332659,"byte_end":332676,"line_start":224,"line_end":224,"column_start":12,"column_end":29},"name":"retain_for_output","qualname":"<CapabilityRef>::retain_for_output","value":"fn (self, output_port: usize) -> Capability<T>","parent":null,"children":[],"decl_id":null,"docs":" Transforms to an owned capability for a specific output port.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2060},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":333832,"byte_end":333845,"line_start":261,"line_end":261,"column_start":12,"column_end":25},"name":"CapabilitySet","qualname":"::dataflow::operators::capability::CapabilitySet","value":"CapabilitySet {  }","parent":null,"children":[{"krate":0,"index":2062}],"decl_id":null,"docs":" A set of capabilities, for possibly incomparable times.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2065},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":333992,"byte_end":333995,"line_start":268,"line_end":268,"column_start":12,"column_end":15},"name":"new","qualname":"<CapabilitySet<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates an empty capability set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2066},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":334151,"byte_end":334157,"line_start":273,"line_end":273,"column_start":12,"column_end":18},"name":"insert","qualname":"<CapabilitySet<T>>::insert","value":"fn (&mut self, capability: Capability<T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts `capability` into the set, discarding redundant capabilities.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2069},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":334578,"byte_end":334585,"line_start":283,"line_end":283,"column_start":12,"column_end":19},"name":"delayed","qualname":"<CapabilitySet<T>>::delayed","value":"fn (&self, time: &T) -> Capability<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new capability to send data at `time`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2071},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":334939,"byte_end":334948,"line_start":290,"line_end":290,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<CapabilitySet<T>>::downgrade","value":"fn (&mut self, frontier: &[T]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Downgrades the set of capabilities to correspond with the times in `frontier`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2076},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"channels","qualname":"::dataflow::channels","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\mod.rs","parent":null,"children":[{"krate":0,"index":2077},{"krate":0,"index":2078},{"krate":0,"index":2240},{"krate":0,"index":2266},{"krate":0,"index":2358},{"krate":0,"index":3539},{"krate":0,"index":3618},{"krate":0,"index":3607},{"krate":0,"index":3599},{"krate":0,"index":3546},{"krate":0,"index":2361}],"decl_id":null,"docs":" Structured communication between timely dataflow operators.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2078},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pushers","qualname":"::dataflow::channels::pushers","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\mod.rs","parent":null,"children":[{"krate":0,"index":2079},{"krate":0,"index":2082},{"krate":0,"index":2083},{"krate":0,"index":2084},{"krate":0,"index":2122},{"krate":0,"index":2151},{"krate":0,"index":2175}],"decl_id":null,"docs":" A collection of types that may be pushed at.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2084},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\tee.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tee","qualname":"::dataflow::channels::pushers::tee","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\tee.rs","parent":null,"children":[{"krate":0,"index":2085},{"krate":0,"index":2086},{"krate":0,"index":2087},{"krate":0,"index":2088},{"krate":0,"index":2091},{"krate":0,"index":2092},{"krate":0,"index":2097},{"krate":0,"index":2101},{"krate":0,"index":2105},{"krate":0,"index":2109},{"krate":0,"index":2113},{"krate":0,"index":2118}],"decl_id":null,"docs":" A `Push` implementor with a list of `Box<Push>` to forward pushes to.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2092},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\tee.rs","byte_start":337604,"byte_end":337607,"line_start":12,"line_end":12,"column_start":12,"column_end":15},"name":"Tee","qualname":"::dataflow::channels::pushers::tee::Tee","value":"Tee {  }","parent":null,"children":[{"krate":0,"index":2095},{"krate":0,"index":2096}],"decl_id":null,"docs":" Wraps a shared list of `Box<Push>` to forward pushes to. Owned by `Stream`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2104},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\tee.rs","byte_start":338524,"byte_end":338527,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"new","qualname":"<Tee<T, D>>::new","value":"fn () -> (Tee<T, D>, TeeHelper<T, D>)","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new pair of `Tee` and `TeeHelper`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2109},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\tee.rs","byte_start":339097,"byte_end":339106,"line_start":62,"line_end":62,"column_start":12,"column_end":21},"name":"TeeHelper","qualname":"::dataflow::channels::pushers::tee::TeeHelper","value":"TeeHelper {  }","parent":null,"children":[{"krate":0,"index":2112}],"decl_id":null,"docs":" A shared list of `Box<Push>` used to add `Push` implementors.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2116},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\tee.rs","byte_start":339304,"byte_end":339314,"line_start":68,"line_end":68,"column_start":12,"column_end":22},"name":"add_pusher","qualname":"<TeeHelper<T, D>>::add_pusher","value":"fn <P> (&self, pusher: P) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds a new `Push` implementor to the list of recipients shared with a `Stream`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2122},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\exchange.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"exchange","qualname":"::dataflow::channels::pushers::exchange","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\exchange.rs","parent":null,"children":[{"krate":0,"index":2123},{"krate":0,"index":2124},{"krate":0,"index":2125},{"krate":0,"index":2128},{"krate":0,"index":2137},{"krate":0,"index":2144}],"decl_id":null,"docs":" The exchange pattern distributes pushed data between many target pushees.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2128},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\exchange.rs","byte_start":339888,"byte_end":339896,"line_start":9,"line_end":9,"column_start":12,"column_end":20},"name":"Exchange","qualname":"::dataflow::channels::pushers::exchange::Exchange","value":"Exchange {  }","parent":null,"children":[{"krate":0,"index":2133},{"krate":0,"index":2134},{"krate":0,"index":2135},{"krate":0,"index":2136}],"decl_id":null,"docs":" Distributes records among target pushees according to a distribution function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2142},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\exchange.rs","byte_start":340239,"byte_end":340242,"line_start":18,"line_end":18,"column_start":12,"column_end":15},"name":"new","qualname":"<Exchange<T, D, P, H>>::new","value":"fn (pushers: Vec<P>, key: H) -> Exchange<T, D, P, H>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new `Exchange` from a supplied set of pushers and a distribution function.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2151},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\counter.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"counter","qualname":"::dataflow::channels::pushers::counter","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\counter.rs","parent":null,"children":[{"krate":0,"index":2152},{"krate":0,"index":2153},{"krate":0,"index":2154},{"krate":0,"index":2155},{"krate":0,"index":2156},{"krate":0,"index":2157},{"krate":0,"index":2164},{"krate":0,"index":2169}],"decl_id":null,"docs":" A wrapper which counts the number of records pushed past and updates a shared count map.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2157},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\counter.rs","byte_start":343580,"byte_end":343587,"line_start":11,"line_end":11,"column_start":12,"column_end":19},"name":"Counter","qualname":"::dataflow::channels::pushers::counter::Counter","value":"Counter {  }","parent":null,"children":[{"krate":0,"index":2161},{"krate":0,"index":2162},{"krate":0,"index":2163}],"decl_id":null,"docs":" A wrapper which updates shared `produced` based on the number of records pushed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2173},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\counter.rs","byte_start":344409,"byte_end":344412,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"new","qualname":"<Counter<T, D, P>>::new","value":"fn (pushee: P) -> Counter<T, D, P>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new `Counter` from a pushee and shared counts.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2174},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\counter.rs","byte_start":344714,"byte_end":344722,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"produced","qualname":"<Counter<T, D, P>>::produced","value":"fn (&self) -> &Rc<RefCell<ChangeBatch<T>>>","parent":null,"children":[],"decl_id":null,"docs":" A references to shared changes in counts, for cloning or draining.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\counter.rs","byte_start":344693,"byte_end":344702,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":2175},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"buffer","qualname":"::dataflow::channels::pushers::buffer","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","parent":null,"children":[{"krate":0,"index":2176},{"krate":0,"index":2179},{"krate":0,"index":2180},{"krate":0,"index":2181},{"krate":0,"index":2182},{"krate":0,"index":2189},{"krate":0,"index":2203},{"krate":0,"index":2209},{"krate":0,"index":2218},{"krate":0,"index":2225},{"krate":0,"index":2234}],"decl_id":null,"docs":" Buffering and session mechanisms to provide the appearance of record-at-a-time sending,\n with the performance of batched sends.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2182},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":345363,"byte_end":345369,"line_start":13,"line_end":13,"column_start":12,"column_end":18},"name":"Buffer","qualname":"::dataflow::channels::pushers::buffer::Buffer","value":"Buffer {  }","parent":null,"children":[{"krate":0,"index":2186},{"krate":0,"index":2187},{"krate":0,"index":2188}],"decl_id":null,"docs":" Buffers data sent at the same time, for efficient communication.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2193},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":345665,"byte_end":345668,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"new","qualname":"<Buffer<T, D, P>>::new","value":"fn (pusher: P) -> Buffer<T, D, P>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Buffer`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2194},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":345944,"byte_end":345951,"line_start":31,"line_end":31,"column_start":12,"column_end":19},"name":"session","qualname":"<Buffer<T, D, P>>::session","value":"fn (&mut self, time: &T) -> Session<T, D, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Session`, which accepts data to send at the associated time\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2196},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":346242,"byte_end":346259,"line_start":37,"line_end":37,"column_start":12,"column_end":29},"name":"autoflush_session","qualname":"<Buffer<T, D, P>>::autoflush_session","value":"fn (&mut self, cap: Capability<T>) -> AutoflushSession<T, D, P>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new `AutoflushSession` which flushes itself on drop.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2198},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":346738,"byte_end":346743,"line_start":49,"line_end":49,"column_start":12,"column_end":17},"name":"inner","qualname":"<Buffer<T, D, P>>::inner","value":"fn (&mut self) -> &mut P","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the inner `P: Push` type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2199},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":346881,"byte_end":346886,"line_start":52,"line_end":52,"column_start":12,"column_end":17},"name":"cease","qualname":"<Buffer<T, D, P>>::cease","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Flushes all data and pushes a `None` to `self.pusher`, indicating a flush.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2203},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":348211,"byte_end":348218,"line_start":92,"line_end":92,"column_start":12,"column_end":19},"name":"Session","qualname":"::dataflow::channels::pushers::buffer::Session","value":"Session {  }","parent":null,"children":[{"krate":0,"index":2208}],"decl_id":null,"docs":" An output session for sending records at a specified time.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2214},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":348511,"byte_end":348515,"line_start":99,"line_end":99,"column_start":12,"column_end":16},"name":"give","qualname":"<Session>::give","value":"fn (&mut self, data: D) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Provides one record at the time specified by the `Session`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":348490,"byte_end":348499,"line_start":98,"line_end":98,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2215},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":348681,"byte_end":348694,"line_start":104,"line_end":104,"column_start":12,"column_end":25},"name":"give_iterator","qualname":"<Session>::give_iterator","value":"fn <I> (&mut self, iter: I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Provides an iterator of records at the time specified by the `Session`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":348660,"byte_end":348669,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2217},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":349137,"byte_end":349145,"line_start":115,"line_end":115,"column_start":12,"column_end":20},"name":"give_vec","qualname":"<Session>::give_vec","value":"fn (&mut self, message: &mut Vec<D>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Provides a fully formed `Content<D>` message for senders which can use this type.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":349116,"byte_end":349125,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2218},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":349337,"byte_end":349353,"line_start":123,"line_end":123,"column_start":12,"column_end":28},"name":"AutoflushSession","qualname":"::dataflow::channels::pushers::buffer::AutoflushSession","value":"AutoflushSession {  }","parent":null,"children":[{"krate":0,"index":2223},{"krate":0,"index":2224}],"decl_id":null,"docs":" A session which will flush itself when dropped.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2230},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":349777,"byte_end":349781,"line_start":134,"line_end":134,"column_start":12,"column_end":16},"name":"give","qualname":"<AutoflushSession>::give","value":"fn (&mut self, data: D) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Transmits a single record.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":349756,"byte_end":349765,"line_start":133,"line_end":133,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2231},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":349918,"byte_end":349931,"line_start":139,"line_end":139,"column_start":12,"column_end":25},"name":"give_iterator","qualname":"<AutoflushSession>::give_iterator","value":"fn <I> (&mut self, iter: I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Transmits records produced by an iterator.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":349897,"byte_end":349906,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2233},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":350118,"byte_end":350130,"line_start":146,"line_end":146,"column_start":12,"column_end":24},"name":"give_content","qualname":"<AutoflushSession>::give_content","value":"fn (&mut self, message: &mut Vec<D>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Transmits a pre-packed batch of data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":350097,"byte_end":350106,"line_start":145,"line_end":145,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":2240},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pullers\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pullers","qualname":"::dataflow::channels::pullers","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pullers\\mod.rs","parent":null,"children":[{"krate":0,"index":2241},{"krate":0,"index":2242}],"decl_id":null,"docs":" A collection of types that may be pulled from.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2242},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pullers\\counter.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"counter","qualname":"::dataflow::channels::pullers::counter","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pullers\\counter.rs","parent":null,"children":[{"krate":0,"index":2243},{"krate":0,"index":2244},{"krate":0,"index":2245},{"krate":0,"index":2246},{"krate":0,"index":2247},{"krate":0,"index":2248},{"krate":0,"index":2255},{"krate":0,"index":2260}],"decl_id":null,"docs":" A wrapper which accounts records pulled past in a shared count map.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2248},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pullers\\counter.rs","byte_start":351051,"byte_end":351058,"line_start":11,"line_end":11,"column_start":12,"column_end":19},"name":"Counter","qualname":"::dataflow::channels::pullers::counter::Counter","value":"Counter {  }","parent":null,"children":[{"krate":0,"index":2252},{"krate":0,"index":2253},{"krate":0,"index":2254}],"decl_id":null,"docs":" A wrapper which accounts records pulled past in a shared count map.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2259},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pullers\\counter.rs","byte_start":351368,"byte_end":351372,"line_start":20,"line_end":20,"column_start":12,"column_end":16},"name":"next","qualname":"<Counter<T, D, P>>::next","value":"fn (&mut self) -> Option<&mut Bundle<T, D>>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the next timestamp and batch of data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pullers\\counter.rs","byte_start":351347,"byte_end":351356,"line_start":19,"line_end":19,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2264},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pullers\\counter.rs","byte_start":351857,"byte_end":351860,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<Counter<T, D, P>>::new","value":"fn (pullable: P) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new `Counter` from a boxed puller.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2265},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pullers\\counter.rs","byte_start":352140,"byte_end":352148,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"consumed","qualname":"<Counter<T, D, P>>::consumed","value":"fn (&self) -> &Rc<RefCell<ChangeBatch<T>>>","parent":null,"children":[],"decl_id":null,"docs":" A references to shared changes in counts, for cloning or draining.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2266},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pact","qualname":"::dataflow::channels::pact","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","parent":null,"children":[{"krate":0,"index":2267},{"krate":0,"index":2268},{"krate":0,"index":2272},{"krate":0,"index":2275},{"krate":0,"index":2276},{"krate":0,"index":2277},{"krate":0,"index":2280},{"krate":0,"index":2281},{"krate":0,"index":2288},{"krate":0,"index":2290},{"krate":0,"index":2297},{"krate":0,"index":2302},{"krate":0,"index":2306},{"krate":0,"index":2316},{"krate":0,"index":2327},{"krate":0,"index":2332},{"krate":0,"index":2338},{"krate":0,"index":2347},{"krate":0,"index":2352}],"decl_id":null,"docs":" Parallelization contracts, describing how data must be exchanged between operators.\n Parallelization contracts, describing requirements for data movement along dataflow edges.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2281},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":353205,"byte_end":353228,"line_start":22,"line_end":22,"column_start":11,"column_end":34},"name":"ParallelizationContract","qualname":"::dataflow::channels::pact::ParallelizationContract","value":"ParallelizationContract<T: 'static, D: 'static>","parent":null,"children":[{"krate":0,"index":2284},{"krate":0,"index":2285},{"krate":0,"index":2286}],"decl_id":null,"docs":" A `ParallelizationContract` allocates paired `Push` and `Pull` implementors.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2284},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":353320,"byte_end":353326,"line_start":24,"line_end":24,"column_start":10,"column_end":16},"name":"Pusher","qualname":"::dataflow::channels::pact::ParallelizationContract::Pusher","value":"type Pusher: Push<Bundle<T, D>>+'static;","parent":{"krate":0,"index":2281},"children":[],"decl_id":null,"docs":" Type implementing `Push` produced by this pact.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2285},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":353421,"byte_end":353427,"line_start":26,"line_end":26,"column_start":10,"column_end":16},"name":"Puller","qualname":"::dataflow::channels::pact::ParallelizationContract::Puller","value":"type Puller: Pull<Bundle<T, D>>+'static;","parent":{"krate":0,"index":2281},"children":[],"decl_id":null,"docs":" Type implementing `Pull` produced by this pact.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2286},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":353547,"byte_end":353554,"line_start":28,"line_end":28,"column_start":8,"column_end":15},"name":"connect","qualname":"::dataflow::channels::pact::ParallelizationContract::connect","value":"fn <A> (self, allocator: &mut A, identifier: usize, address: &[usize], logging: Option<Logger>) -> (Self::Pusher, Self::Puller)","parent":{"krate":0,"index":2281},"children":[],"decl_id":null,"docs":" Allocates a matched pair of push and pull endpoints implementing the pact.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2288},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":353727,"byte_end":353735,"line_start":32,"line_end":32,"column_start":12,"column_end":20},"name":"Pipeline","qualname":"::dataflow::channels::pact::Pipeline","value":"","parent":null,"children":[],"decl_id":null,"docs":" A direct connection\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2297},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":354548,"byte_end":354556,"line_start":46,"line_end":46,"column_start":12,"column_end":20},"name":"Exchange","qualname":"::dataflow::channels::pact::Exchange","value":"Exchange {  }","parent":null,"children":[{"krate":0,"index":2300},{"krate":0,"index":2301}],"decl_id":null,"docs":" An exchange between multiple observers by data\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2305},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":354755,"byte_end":354758,"line_start":49,"line_end":49,"column_start":12,"column_end":15},"name":"new","qualname":"<Exchange<D, F>>::new","value":"fn (func: F) -> Exchange<D, F>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new `Exchange` pact from a distribution function.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2316},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":356012,"byte_end":356021,"line_start":71,"line_end":71,"column_start":12,"column_end":21},"name":"LogPusher","qualname":"::dataflow::channels::pact::LogPusher","value":"LogPusher {  }","parent":null,"children":[{"krate":0,"index":2320},{"krate":0,"index":2321},{"krate":0,"index":2322},{"krate":0,"index":2323},{"krate":0,"index":2324},{"krate":0,"index":2325},{"krate":0,"index":2326}],"decl_id":null,"docs":" Wraps a `Message<T,D>` pusher to provide a `Push<(T, Content<D>)>`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2331},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":356324,"byte_end":356327,"line_start":82,"line_end":82,"column_start":12,"column_end":15},"name":"new","qualname":"<LogPusher<T, D, P>>::new","value":"fn (pusher: P, source: usize, target: usize, channel: usize, logging: Option<Logger>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new pusher.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2338},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":357565,"byte_end":357574,"line_start":121,"line_end":121,"column_start":12,"column_end":21},"name":"LogPuller","qualname":"::dataflow::channels::pact::LogPuller","value":"LogPuller {  }","parent":null,"children":[{"krate":0,"index":2342},{"krate":0,"index":2343},{"krate":0,"index":2344},{"krate":0,"index":2345},{"krate":0,"index":2346}],"decl_id":null,"docs":" Wraps a `Message<T,D>` puller to provide a `Pull<(T, Content<D>)>`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2351},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":357839,"byte_end":357842,"line_start":130,"line_end":130,"column_start":12,"column_end":15},"name":"new","qualname":"<LogPuller<T, D, P>>::new","value":"fn (puller: P, index: usize, channel: usize, logging: Option<Logger>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new `Puller`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2358},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\mod.rs","byte_start":335624,"byte_end":335630,"line_start":13,"line_end":13,"column_start":10,"column_end":16},"name":"Bundle","qualname":"::dataflow::channels::Bundle","value":"crate::communication::Message<Message<T, D>>","parent":null,"children":[],"decl_id":null,"docs":" The input to and output from timely dataflow communication channels.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3539},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\mod.rs","byte_start":335806,"byte_end":335813,"line_start":17,"line_end":17,"column_start":12,"column_end":19},"name":"Message","qualname":"::dataflow::channels::Message","value":"Message { time, data, from, seq }","parent":null,"children":[{"krate":0,"index":3542},{"krate":0,"index":3543},{"krate":0,"index":3544},{"krate":0,"index":3545}],"decl_id":null,"docs":" A serializable representation of timestamped data.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3542},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\mod.rs","byte_start":335881,"byte_end":335885,"line_start":19,"line_end":19,"column_start":9,"column_end":13},"name":"time","qualname":"::dataflow::channels::Message::time","value":"T","parent":{"krate":0,"index":3539},"children":[],"decl_id":null,"docs":" The timestamp associated with the message.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3543},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\mod.rs","byte_start":335931,"byte_end":335935,"line_start":21,"line_end":21,"column_start":9,"column_end":13},"name":"data","qualname":"::dataflow::channels::Message::data","value":"std::vec::Vec<D>","parent":{"krate":0,"index":3539},"children":[],"decl_id":null,"docs":" The data in the message.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3544},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\mod.rs","byte_start":335980,"byte_end":335984,"line_start":23,"line_end":23,"column_start":9,"column_end":13},"name":"from","qualname":"::dataflow::channels::Message::from","value":"usize","parent":{"krate":0,"index":3539},"children":[],"decl_id":null,"docs":" The source worker.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3545},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\mod.rs","byte_start":336061,"byte_end":336064,"line_start":25,"line_end":25,"column_start":9,"column_end":12},"name":"seq","qualname":"::dataflow::channels::Message::seq","value":"usize","parent":{"krate":0,"index":3539},"children":[],"decl_id":null,"docs":" A sequence number for this worker-to-worker stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2364},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\mod.rs","byte_start":336143,"byte_end":336157,"line_start":30,"line_end":30,"column_start":12,"column_end":26},"name":"default_length","qualname":"<Message<T, D>>::default_length","value":"fn () -> usize","parent":null,"children":[],"decl_id":null,"docs":" Default buffer size.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2365},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\mod.rs","byte_start":336257,"byte_end":336260,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Message<T, D>>::new","value":"fn (time: T, data: Vec<D>, from: usize, seq: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new message instance from arguments.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2366},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\mod.rs","byte_start":336451,"byte_end":336458,"line_start":41,"line_end":41,"column_start":12,"column_end":19},"name":"push_at","qualname":"<Message<T, D>>::push_at","value":"fn <P> (buffer: &mut Vec<D>, time: T, pusher: &mut P) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forms a message, and pushes contents at `pusher`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\mod.rs","byte_start":336430,"byte_end":336439,"line_start":40,"line_end":40,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":2368},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"scopes","qualname":"::dataflow::scopes","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\mod.rs","parent":null,"children":[{"krate":0,"index":2369},{"krate":0,"index":2374},{"krate":0,"index":2375},{"krate":0,"index":2376},{"krate":0,"index":2377},{"krate":0,"index":2378},{"krate":0,"index":2462},{"krate":0,"index":2463},{"krate":0,"index":2465},{"krate":0,"index":2468}],"decl_id":null,"docs":" Hierarchical organization of timely dataflow graphs.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2378},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\child.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"child","qualname":"::dataflow::scopes::child","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\child.rs","parent":null,"children":[{"krate":0,"index":2379},{"krate":0,"index":2380},{"krate":0,"index":2381},{"krate":0,"index":2385},{"krate":0,"index":2388},{"krate":0,"index":2389},{"krate":0,"index":2390},{"krate":0,"index":2394},{"krate":0,"index":2397},{"krate":0,"index":2398},{"krate":0,"index":2399},{"krate":0,"index":2400},{"krate":0,"index":2401},{"krate":0,"index":2404},{"krate":0,"index":2408},{"krate":0,"index":2415},{"krate":0,"index":2421},{"krate":0,"index":2433},{"krate":0,"index":2438},{"krate":0,"index":2443},{"krate":0,"index":2456},{"krate":0,"index":2457}],"decl_id":null,"docs":" A child dataflow scope, used to build nested dataflow scopes.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2404},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\child.rs","byte_start":365905,"byte_end":365914,"line_start":20,"line_end":20,"column_start":10,"column_end":19},"name":"Iterative","qualname":"::dataflow::scopes::child::Iterative","value":"Child<'a, G, Product<<G as ScopeParent>::Timestamp, T>>","parent":null,"children":[],"decl_id":null,"docs":" Type alias for iterative child scope.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2408},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\child.rs","byte_start":366153,"byte_end":366158,"line_start":24,"line_end":24,"column_start":12,"column_end":17},"name":"Child","qualname":"::dataflow::scopes::child::Child","value":"Child { subgraph, parent, logging }","parent":null,"children":[{"krate":0,"index":2412},{"krate":0,"index":2413},{"krate":0,"index":2414}],"decl_id":null,"docs":" A `Child` wraps a `Subgraph` and a parent `G: Scope`. It manages the addition\n of `Operate`s to a subgraph, and the connection of edges between them.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2412},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\child.rs","byte_start":366281,"byte_end":366289,"line_start":30,"line_end":30,"column_start":9,"column_end":17},"name":"subgraph","qualname":"::dataflow::scopes::child::Child::subgraph","value":"&'a std::cell::RefCell<progress::subgraph::SubgraphBuilder<<G as dataflow::scopes::ScopeParent>::Timestamp, T>>","parent":{"krate":0,"index":2408},"children":[],"decl_id":null,"docs":" The subgraph under assembly.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2413},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\child.rs","byte_start":366390,"byte_end":366396,"line_start":32,"line_end":32,"column_start":9,"column_end":15},"name":"parent","qualname":"::dataflow::scopes::child::Child::parent","value":"G","parent":{"krate":0,"index":2408},"children":[],"decl_id":null,"docs":" A copy of the child's parent scope.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2414},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\child.rs","byte_start":366450,"byte_end":366457,"line_start":34,"line_end":34,"column_start":9,"column_end":16},"name":"logging","qualname":"::dataflow::scopes::child::Child::logging","value":"std::option::Option<timely_logging::Logger<logging::TimelyEvent, usize>>","parent":{"krate":0,"index":2408},"children":[],"decl_id":null,"docs":" The log writer for this scope.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2419},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\child.rs","byte_start":366684,"byte_end":366689,"line_start":45,"line_end":45,"column_start":12,"column_end":17},"name":"index","qualname":"<Child>::index","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" This worker's unique identifier.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2420},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\child.rs","byte_start":366797,"byte_end":366802,"line_start":47,"line_end":47,"column_start":12,"column_end":17},"name":"peers","qualname":"<Child>::peers","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The total number of workers in the computation.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2463},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\mod.rs","byte_start":359081,"byte_end":359092,"line_start":14,"line_end":14,"column_start":11,"column_end":22},"name":"ScopeParent","qualname":"::dataflow::scopes::ScopeParent","value":"ScopeParent: AsWorker + Clone","parent":null,"children":[{"krate":0,"index":2464}],"decl_id":null,"docs":" The information a child scope needs from its parent.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2464},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\mod.rs","byte_start":359178,"byte_end":359187,"line_start":16,"line_end":16,"column_start":10,"column_end":19},"name":"Timestamp","qualname":"::dataflow::scopes::ScopeParent::Timestamp","value":"type Timestamp : Timestamp;","parent":{"krate":0,"index":2463},"children":[],"decl_id":null,"docs":" The timestamp associated with data in this scope.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2468},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\mod.rs","byte_start":359703,"byte_end":359708,"line_start":29,"line_end":29,"column_start":11,"column_end":16},"name":"Scope","qualname":"::dataflow::scopes::Scope","value":"Scope: ScopeParent","parent":null,"children":[{"krate":0,"index":2469},{"krate":0,"index":2470},{"krate":0,"index":2471},{"krate":0,"index":2472},{"krate":0,"index":2473},{"krate":0,"index":2474},{"krate":0,"index":2475},{"krate":0,"index":2476},{"krate":0,"index":2480},{"krate":0,"index":2484}],"decl_id":null,"docs":" The fundamental operations required to add and connect operators in a timely dataflow graph.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2469},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\mod.rs","byte_start":359775,"byte_end":359779,"line_start":31,"line_end":31,"column_start":8,"column_end":12},"name":"name","qualname":"::dataflow::scopes::Scope::name","value":"fn (&self) -> String","parent":{"krate":0,"index":2468},"children":[],"decl_id":null,"docs":" A useful name describing the scope.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2470},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\mod.rs","byte_start":359902,"byte_end":359906,"line_start":34,"line_end":34,"column_start":8,"column_end":12},"name":"addr","qualname":"::dataflow::scopes::Scope::addr","value":"fn (&self) -> Vec<usize>","parent":{"krate":0,"index":2468},"children":[],"decl_id":null,"docs":" A sequence of scope identifiers describing the path from the worker root to this scope.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2471},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\mod.rs","byte_start":360114,"byte_end":360122,"line_start":38,"line_end":38,"column_start":8,"column_end":16},"name":"add_edge","qualname":"::dataflow::scopes::Scope::add_edge","value":"fn (&self, source: Source, target: Target) -> ()","parent":{"krate":0,"index":2468},"children":[],"decl_id":null,"docs":" Connects a source of data with a target of the data. This only links the two for\n the purposes of tracking progress, rather than effect any data movement itself.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2472},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\mod.rs","byte_start":360257,"byte_end":360269,"line_start":41,"line_end":41,"column_start":8,"column_end":20},"name":"add_operator","qualname":"::dataflow::scopes::Scope::add_operator","value":"fn (&mut self, operator: Box<dyn Operate<Self::Timestamp>>) -> usize","parent":{"krate":0,"index":2468},"children":[],"decl_id":null,"docs":" Adds a child `Operate` to the builder's scope. Returns the new child's index.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2473},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\mod.rs","byte_start":360876,"byte_end":360899,"line_start":53,"line_end":53,"column_start":8,"column_end":31},"name":"allocate_operator_index","qualname":"::dataflow::scopes::Scope::allocate_operator_index","value":"fn (&mut self) -> usize","parent":{"krate":0,"index":2468},"children":[],"decl_id":null,"docs":" Allocates a new scope-local operator index.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2474},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\mod.rs","byte_start":361166,"byte_end":361189,"line_start":59,"line_end":59,"column_start":8,"column_end":31},"name":"add_operator_with_index","qualname":"::dataflow::scopes::Scope::add_operator_with_index","value":"fn (&mut self, operator: Box<dyn Operate<Self::Timestamp>>, index: usize) -> ()","parent":{"krate":0,"index":2468},"children":[],"decl_id":null,"docs":" Adds a child `Operate` to the builder's scope using a supplied index.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2475},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\mod.rs","byte_start":361580,"byte_end":361605,"line_start":67,"line_end":67,"column_start":8,"column_end":33},"name":"add_operator_with_indices","qualname":"::dataflow::scopes::Scope::add_operator_with_indices","value":"fn (&mut self, operator: Box<dyn Operate<Self::Timestamp>>, local: usize, global: usize) -> ()","parent":{"krate":0,"index":2468},"children":[],"decl_id":null,"docs":" Adds a child `Operate` to the builder's scope using supplied indices.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2476},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\mod.rs","byte_start":362757,"byte_end":362763,"line_start":94,"line_end":94,"column_start":8,"column_end":14},"name":"scoped","qualname":"::dataflow::scopes::Scope::scoped","value":"fn <T, R, F> (&mut self, name: &str, func: F) -> R","parent":{"krate":0,"index":2468},"children":[],"decl_id":null,"docs":" Creates a dataflow subgraph.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2480},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\mod.rs","byte_start":363847,"byte_end":363856,"line_start":121,"line_end":121,"column_start":8,"column_end":17},"name":"iterative","qualname":"::dataflow::scopes::Scope::iterative","value":"fn <T, R, F> (&mut self, func: F) -> R","parent":{"krate":0,"index":2468},"children":[],"decl_id":null,"docs":" Creates a iterative dataflow subgraph.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2484},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\mod.rs","byte_start":365053,"byte_end":365059,"line_start":151,"line_end":151,"column_start":8,"column_end":14},"name":"region","qualname":"::dataflow::scopes::Scope::region","value":"fn <R, F> (&mut self, func: F) -> R","parent":{"krate":0,"index":2468},"children":[],"decl_id":null,"docs":" Creates a dataflow region with the same timestamp.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2487},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\stream.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::dataflow::stream","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\stream.rs","parent":null,"children":[{"krate":0,"index":2488},{"krate":0,"index":2491},{"krate":0,"index":2492},{"krate":0,"index":2493},{"krate":0,"index":2494},{"krate":0,"index":3622},{"krate":0,"index":3628},{"krate":0,"index":2495}],"decl_id":null,"docs":" A handle to a typed stream of timely data.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3622},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\stream.rs","byte_start":370685,"byte_end":370691,"line_start":21,"line_end":21,"column_start":12,"column_end":18},"name":"Stream","qualname":"::dataflow::stream::Stream","value":"Stream {  }","parent":null,"children":[{"krate":0,"index":3625},{"krate":0,"index":3626},{"krate":0,"index":3627}],"decl_id":null,"docs":" Abstraction of a stream of `D: Data` records timestamped with `S::Timestamp`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2498},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\stream.rs","byte_start":371300,"byte_end":371310,"line_start":35,"line_end":35,"column_start":12,"column_end":22},"name":"connect_to","qualname":"<Stream<S, D>>::connect_to","value":"fn <P> (&self, target: Target, pusher: P, identifier: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Connects the stream to a destination.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2501},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\stream.rs","byte_start":371902,"byte_end":371905,"line_start":49,"line_end":49,"column_start":12,"column_end":15},"name":"new","qualname":"<Stream<S, D>>::new","value":"fn (source: Source, output: TeeHelper<S::Timestamp, D>, scope: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a `Stream` from a supplied `Source` name and rendezvous point.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2502},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\stream.rs","byte_start":372099,"byte_end":372103,"line_start":53,"line_end":53,"column_start":12,"column_end":16},"name":"name","qualname":"<Stream<S, D>>::name","value":"fn (&self) -> &Source","parent":null,"children":[],"decl_id":null,"docs":" The name of the stream's source operator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2503},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\stream.rs","byte_start":372201,"byte_end":372206,"line_start":55,"line_end":55,"column_start":12,"column_end":17},"name":"scope","qualname":"<Stream<S, D>>::scope","value":"fn (&self) -> S","parent":null,"children":[],"decl_id":null,"docs":" The scope immediately containing the stream.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2504},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"synchronization","qualname":"::synchronization","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\mod.rs","parent":null,"children":[{"krate":0,"index":2505},{"krate":0,"index":2526},{"krate":0,"index":2576},{"krate":0,"index":2577}],"decl_id":null,"docs":" Synchronization primitives implemented in timely dataflow.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2505},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\barrier.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"barrier","qualname":"::synchronization::barrier","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\barrier.rs","parent":null,"children":[{"krate":0,"index":2506},{"krate":0,"index":2507},{"krate":0,"index":2510},{"krate":0,"index":2511},{"krate":0,"index":2516}],"decl_id":null,"docs":" Barrier synchronization.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2511},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\barrier.rs","byte_start":372617,"byte_end":372624,"line_start":8,"line_end":8,"column_start":12,"column_end":19},"name":"Barrier","qualname":"::synchronization::barrier::Barrier","value":"Barrier {  }","parent":null,"children":[{"krate":0,"index":2513},{"krate":0,"index":2514},{"krate":0,"index":2515}],"decl_id":null,"docs":" A re-usable barrier synchronization mechanism.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2518},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\barrier.rs","byte_start":372808,"byte_end":372811,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<Barrier<A>>::new","value":"fn (worker: &mut Worker<A>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new barrier.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2523},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\barrier.rs","byte_start":373356,"byte_end":373360,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"wait","qualname":"<Barrier<A>>::wait","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Blocks until all other workers have reached this barrier.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2524},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\barrier.rs","byte_start":373641,"byte_end":373648,"line_start":41,"line_end":41,"column_start":12,"column_end":19},"name":"advance","qualname":"<Barrier<A>>::advance","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Advances this worker to the next barrier stage.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\barrier.rs","byte_start":373620,"byte_end":373629,"line_start":40,"line_end":40,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2525},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\barrier.rs","byte_start":373920,"byte_end":373927,"line_start":50,"line_end":50,"column_start":12,"column_end":19},"name":"reached","qualname":"<Barrier<A>>::reached","value":"fn (&mut self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates that the barrier has been reached by all workers.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\barrier.rs","byte_start":373899,"byte_end":373908,"line_start":49,"line_end":49,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":2526},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\sequence.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sequence","qualname":"::synchronization::sequence","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\sequence.rs","parent":null,"children":[{"krate":0,"index":2527},{"krate":0,"index":2528},{"krate":0,"index":2529},{"krate":0,"index":2532},{"krate":0,"index":2533},{"krate":0,"index":2537},{"krate":0,"index":2538},{"krate":0,"index":2539},{"krate":0,"index":2540},{"krate":0,"index":2541},{"krate":0,"index":2542},{"krate":0,"index":2543},{"krate":0,"index":2546},{"krate":0,"index":2548},{"krate":0,"index":2553},{"krate":0,"index":2569},{"krate":0,"index":2573}],"decl_id":null,"docs":" A shared ordered log.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2548},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\sequence.rs","byte_start":375827,"byte_end":375836,"line_start":49,"line_end":49,"column_start":12,"column_end":21},"name":"Sequencer","qualname":"::synchronization::sequence::Sequencer","value":"Sequencer {  }","parent":null,"children":[{"krate":0,"index":2550},{"krate":0,"index":2551},{"krate":0,"index":2552}],"decl_id":null,"docs":" Orders elements inserted across all workers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2555},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\sequence.rs","byte_start":377421,"byte_end":377424,"line_start":91,"line_end":91,"column_start":12,"column_end":15},"name":"new","qualname":"<Sequencer<T>>::new","value":"fn <A> (worker: &mut Worker<A>, timer: Instant) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Sequencer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2557},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\sequence.rs","byte_start":377643,"byte_end":377652,"line_start":97,"line_end":97,"column_start":12,"column_end":21},"name":"preloaded","qualname":"<Sequencer<T>>::preloaded","value":"fn <A> (worker: &mut Worker<A>, timer: Instant, preload: VecDeque<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Sequencer preloaded with a queue of\n elements.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2568},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\sequence.rs","byte_start":382459,"byte_end":382463,"line_start":212,"line_end":212,"column_start":12,"column_end":16},"name":"push","qualname":"<Sequencer<T>>::push","value":"fn (&mut self, element: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds an element to the shared log.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2578},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\execute.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"execute","qualname":"::execute","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\execute.rs","parent":null,"children":[{"krate":0,"index":2579},{"krate":0,"index":2585},{"krate":0,"index":2586},{"krate":0,"index":2587},{"krate":0,"index":2592},{"krate":0,"index":2595},{"krate":0,"index":2610},{"krate":0,"index":2614}],"decl_id":null,"docs":" Starts a timely dataflow execution from configuration information and per-worker logic.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2587},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\execute.rs","byte_start":384942,"byte_end":384949,"line_start":50,"line_end":50,"column_start":8,"column_end":15},"name":"example","qualname":"::execute::example","value":"fn <T, F> (func: F) -> T","parent":null,"children":[],"decl_id":null,"docs":" Executes a single-threaded timely dataflow computation.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2592},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\execute.rs","byte_start":385952,"byte_end":385968,"line_start":79,"line_end":79,"column_start":8,"column_end":24},"name":"execute_directly","qualname":"::execute::execute_directly","value":"fn <T, F> (func: F) -> T","parent":null,"children":[],"decl_id":null,"docs":" Executes a single-threaded timely dataflow computation.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2595},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\execute.rs","byte_start":388560,"byte_end":388567,"line_start":144,"line_end":144,"column_start":8,"column_end":15},"name":"execute","qualname":"::execute::execute","value":"fn <T, F> (mut config: Configuration, func: F) -> Result<WorkerGuards<T>, String>","parent":null,"children":[],"decl_id":null,"docs":" Executes a timely dataflow from a configuration and per-communicator logic.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2610},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\execute.rs","byte_start":392895,"byte_end":392912,"line_start":263,"line_end":263,"column_start":8,"column_end":25},"name":"execute_from_args","qualname":"::execute::execute_from_args","value":"fn <I, T, F> (iter: I, func: F) -> Result<WorkerGuards<T>, String>","parent":null,"children":[],"decl_id":null,"docs":" Executes a timely dataflow from supplied arguments and per-communicator logic.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2614},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\execute.rs","byte_start":393797,"byte_end":393809,"line_start":287,"line_end":287,"column_start":8,"column_end":20},"name":"execute_from","qualname":"::execute::execute_from","value":"fn <A, T, F> (builders: Vec<A>, others: Box<dyn ::std::any::Any>, func: F) -> Result<WorkerGuards<T>, String>","parent":null,"children":[],"decl_id":null,"docs":" Executes a timely dataflow from supplied allocators and logging.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2619},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"order","qualname":"::order","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","parent":null,"children":[{"krate":0,"index":2620},{"krate":0,"index":2623},{"krate":0,"index":2624},{"krate":0,"index":2625},{"krate":0,"index":3632},{"krate":0,"index":3635},{"krate":0,"index":3638},{"krate":0,"index":3641},{"krate":0,"index":3644},{"krate":0,"index":3647},{"krate":0,"index":3650},{"krate":0,"index":3653},{"krate":0,"index":3656},{"krate":0,"index":3659},{"krate":0,"index":3662},{"krate":0,"index":3665},{"krate":0,"index":3668},{"krate":0,"index":3671},{"krate":0,"index":3674},{"krate":0,"index":3675},{"krate":0,"index":3676},{"krate":0,"index":3677},{"krate":0,"index":3678},{"krate":0,"index":3679},{"krate":0,"index":3680},{"krate":0,"index":3681},{"krate":0,"index":3682},{"krate":0,"index":3683},{"krate":0,"index":3684},{"krate":0,"index":3685},{"krate":0,"index":3686},{"krate":0,"index":3687},{"krate":0,"index":2626},{"krate":0,"index":2630},{"krate":0,"index":2631},{"krate":0,"index":2632},{"krate":0,"index":3688},{"krate":0,"index":3791},{"krate":0,"index":3788},{"krate":0,"index":3784},{"krate":0,"index":3779},{"krate":0,"index":3775},{"krate":0,"index":3770},{"krate":0,"index":3766},{"krate":0,"index":3762},{"krate":0,"index":3750},{"krate":0,"index":3742},{"krate":0,"index":3693},{"krate":0,"index":2638},{"krate":0,"index":2642},{"krate":0,"index":2646},{"krate":0,"index":2650},{"krate":0,"index":2654},{"krate":0,"index":2655},{"krate":0,"index":2664},{"krate":0,"index":2665},{"krate":0,"index":2666},{"krate":0,"index":2669}],"decl_id":null,"docs":" Traits and types for partially ordered sets.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2620},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":394622,"byte_end":394634,"line_start":8,"line_end":8,"column_start":11,"column_end":23},"name":"PartialOrder","qualname":"::order::PartialOrder","value":"PartialOrder: Eq","parent":null,"children":[{"krate":0,"index":2621},{"krate":0,"index":2622}],"decl_id":null,"docs":" A type that is partially ordered.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2621},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":394719,"byte_end":394728,"line_start":10,"line_end":10,"column_start":8,"column_end":17},"name":"less_than","qualname":"::order::PartialOrder::less_than","value":"fn (&self, other: &Self) -> bool","parent":{"krate":0,"index":2620},"children":[],"decl_id":null,"docs":" Returns true iff one element is strictly less than the other.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2622},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":394894,"byte_end":394904,"line_start":14,"line_end":14,"column_start":8,"column_end":18},"name":"less_equal","qualname":"::order::PartialOrder::less_equal","value":"fn (&self, other: &Self) -> bool","parent":{"krate":0,"index":2620},"children":[],"decl_id":null,"docs":" Returns true iff one element is less than or equal to the other.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2623},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":395474,"byte_end":395484,"line_start":26,"line_end":26,"column_start":11,"column_end":21},"name":"TotalOrder","qualname":"::order::TotalOrder","value":"TotalOrder: PartialOrder","parent":null,"children":[],"decl_id":null,"docs":" A type that is totally ordered.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3688},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":397034,"byte_end":397041,"line_start":73,"line_end":73,"column_start":12,"column_end":19},"name":"Product","qualname":"::order::Product","value":"Product { outer, inner }","parent":null,"children":[{"krate":0,"index":3691},{"krate":0,"index":3692}],"decl_id":null,"docs":" A nested pair of timestamps, one outer and one inner.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3691},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":397093,"byte_end":397098,"line_start":75,"line_end":75,"column_start":9,"column_end":14},"name":"outer","qualname":"::order::Product::outer","value":"TOuter","parent":{"krate":0,"index":3688},"children":[],"decl_id":null,"docs":" Outer timestamp.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3692},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":397141,"byte_end":397146,"line_start":77,"line_end":77,"column_start":9,"column_end":14},"name":"inner","qualname":"::order::Product::inner","value":"TInner","parent":{"krate":0,"index":3688},"children":[],"decl_id":null,"docs":" Inner timestamp.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2641},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":397281,"byte_end":397284,"line_start":82,"line_end":82,"column_start":12,"column_end":15},"name":"new","qualname":"<Product<TOuter, TInner>>::new","value":"fn (outer: TOuter, inner: TInner) -> Product<TOuter, TInner>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new product from outer and inner coordinates.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2664},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":399207,"byte_end":399212,"line_start":133,"line_end":133,"column_start":11,"column_end":16},"name":"Empty","qualname":"::order::Empty","value":"Empty: PartialOrder","parent":null,"children":[],"decl_id":null,"docs":" A type that does not affect total orderedness.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2672},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"logging","qualname":"::logging","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","parent":null,"children":[{"krate":0,"index":2673},{"krate":0,"index":2674},{"krate":0,"index":2676},{"krate":0,"index":2677},{"krate":0,"index":2678},{"krate":0,"index":2681},{"krate":0,"index":2688},{"krate":0,"index":2694},{"krate":0,"index":3802},{"krate":0,"index":3888},{"krate":0,"index":3843},{"krate":0,"index":3834},{"krate":0,"index":3832},{"krate":0,"index":3830},{"krate":0,"index":3827},{"krate":0,"index":3825},{"krate":0,"index":3822},{"krate":0,"index":3820},{"krate":0,"index":3806},{"krate":0,"index":3894},{"krate":0,"index":3987},{"krate":0,"index":3940},{"krate":0,"index":3931},{"krate":0,"index":3929},{"krate":0,"index":3927},{"krate":0,"index":3924},{"krate":0,"index":3922},{"krate":0,"index":3919},{"krate":0,"index":3917},{"krate":0,"index":3899},{"krate":0,"index":3993},{"krate":0,"index":4107},{"krate":0,"index":4054},{"krate":0,"index":4045},{"krate":0,"index":4043},{"krate":0,"index":4041},{"krate":0,"index":4038},{"krate":0,"index":4036},{"krate":0,"index":4033},{"krate":0,"index":4031},{"krate":0,"index":4001},{"krate":0,"index":4113},{"krate":0,"index":4185},{"krate":0,"index":4144},{"krate":0,"index":4135},{"krate":0,"index":4133},{"krate":0,"index":4131},{"krate":0,"index":4128},{"krate":0,"index":4126},{"krate":0,"index":4123},{"krate":0,"index":4121},{"krate":0,"index":4115},{"krate":0,"index":4191},{"krate":0,"index":4298},{"krate":0,"index":4247},{"krate":0,"index":4238},{"krate":0,"index":4236},{"krate":0,"index":4234},{"krate":0,"index":4231},{"krate":0,"index":4229},{"krate":0,"index":4226},{"krate":0,"index":4224},{"krate":0,"index":4198},{"krate":0,"index":4304},{"krate":0,"index":4372},{"krate":0,"index":4333},{"krate":0,"index":4324},{"krate":0,"index":4322},{"krate":0,"index":4320},{"krate":0,"index":4317},{"krate":0,"index":4315},{"krate":0,"index":4313},{"krate":0,"index":4311},{"krate":0,"index":4309},{"krate":0,"index":4378},{"krate":0,"index":4457},{"krate":0,"index":4414},{"krate":0,"index":4405},{"krate":0,"index":4403},{"krate":0,"index":4401},{"krate":0,"index":4398},{"krate":0,"index":4396},{"krate":0,"index":4393},{"krate":0,"index":4391},{"krate":0,"index":4381},{"krate":0,"index":2699},{"krate":0,"index":4463},{"krate":0,"index":4535},{"krate":0,"index":4494},{"krate":0,"index":4485},{"krate":0,"index":4483},{"krate":0,"index":4481},{"krate":0,"index":4478},{"krate":0,"index":4476},{"krate":0,"index":4473},{"krate":0,"index":4471},{"krate":0,"index":4465},{"krate":0,"index":4541},{"krate":0,"index":4620},{"krate":0,"index":4577},{"krate":0,"index":4568},{"krate":0,"index":4566},{"krate":0,"index":4564},{"krate":0,"index":4561},{"krate":0,"index":4559},{"krate":0,"index":4556},{"krate":0,"index":4554},{"krate":0,"index":4544},{"krate":0,"index":4626},{"krate":0,"index":4698},{"krate":0,"index":4657},{"krate":0,"index":4648},{"krate":0,"index":4646},{"krate":0,"index":4644},{"krate":0,"index":4641},{"krate":0,"index":4639},{"krate":0,"index":4636},{"krate":0,"index":4634},{"krate":0,"index":4628},{"krate":0,"index":4704},{"krate":0,"index":4776},{"krate":0,"index":4735},{"krate":0,"index":4726},{"krate":0,"index":4724},{"krate":0,"index":4722},{"krate":0,"index":4719},{"krate":0,"index":4717},{"krate":0,"index":4714},{"krate":0,"index":4712},{"krate":0,"index":4706},{"krate":0,"index":4782},{"krate":0,"index":4847},{"krate":0,"index":4806},{"krate":0,"index":4797},{"krate":0,"index":4795},{"krate":0,"index":4792},{"krate":0,"index":4790},{"krate":0,"index":4787},{"krate":0,"index":4785},{"krate":0,"index":4784},{"krate":0,"index":4853},{"krate":0,"index":4921},{"krate":0,"index":4882},{"krate":0,"index":4873},{"krate":0,"index":4871},{"krate":0,"index":4869},{"krate":0,"index":4866},{"krate":0,"index":4864},{"krate":0,"index":4862},{"krate":0,"index":4860},{"krate":0,"index":4858},{"krate":0,"index":4927},{"krate":0,"index":5006},{"krate":0,"index":4963},{"krate":0,"index":4954},{"krate":0,"index":4952},{"krate":0,"index":4950},{"krate":0,"index":4947},{"krate":0,"index":4945},{"krate":0,"index":4942},{"krate":0,"index":4940},{"krate":0,"index":4930},{"krate":0,"index":5012},{"krate":0,"index":5084},{"krate":0,"index":5043},{"krate":0,"index":5034},{"krate":0,"index":5032},{"krate":0,"index":5030},{"krate":0,"index":5027},{"krate":0,"index":5025},{"krate":0,"index":5022},{"krate":0,"index":5020},{"krate":0,"index":5014},{"krate":0,"index":5090},{"krate":0,"index":5164},{"krate":0,"index":5125},{"krate":0,"index":5116},{"krate":0,"index":5114},{"krate":0,"index":5112},{"krate":0,"index":5109},{"krate":0,"index":5106},{"krate":0,"index":5104},{"krate":0,"index":5102},{"krate":0,"index":5096},{"krate":0,"index":2702},{"krate":0,"index":5170},{"krate":0,"index":5305},{"krate":0,"index":5242},{"krate":0,"index":5240},{"krate":0,"index":5238},{"krate":0,"index":5229},{"krate":0,"index":5226},{"krate":0,"index":5224},{"krate":0,"index":5221},{"krate":0,"index":5219},{"krate":0,"index":5213},{"krate":0,"index":2705},{"krate":0,"index":2707},{"krate":0,"index":2709},{"krate":0,"index":2711},{"krate":0,"index":2713},{"krate":0,"index":2715},{"krate":0,"index":2717},{"krate":0,"index":2719},{"krate":0,"index":2721},{"krate":0,"index":2723},{"krate":0,"index":2725},{"krate":0,"index":2727},{"krate":0,"index":2729}],"decl_id":null,"docs":" Traits, implementations, and macros related to logging timely events.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2673},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":399520,"byte_end":399536,"line_start":4,"line_end":4,"column_start":10,"column_end":26},"name":"WorkerIdentifier","qualname":"::logging::WorkerIdentifier","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Type alias for logging timely events.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2674},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":399597,"byte_end":399603,"line_start":6,"line_end":6,"column_start":10,"column_end":16},"name":"Logger","qualname":"::logging::Logger","value":"crate::logging_core::Logger<Event, WorkerIdentifier>","parent":null,"children":[],"decl_id":null,"docs":" Logger type for worker-local logging.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2676},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":399722,"byte_end":399734,"line_start":8,"line_end":8,"column_start":10,"column_end":22},"name":"TimelyLogger","qualname":"::logging::TimelyLogger","value":"Logger<TimelyEvent>","parent":null,"children":[],"decl_id":null,"docs":" Logger for timely dataflow system events.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2681},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":399921,"byte_end":399932,"line_start":14,"line_end":14,"column_start":12,"column_end":23},"name":"BatchLogger","qualname":"::logging::BatchLogger","value":"BatchLogger {  }","parent":null,"children":[{"krate":0,"index":2685},{"krate":0,"index":2686},{"krate":0,"index":2687}],"decl_id":null,"docs":" Logs events as a timely stream, with progress statements.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2692},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":400266,"byte_end":400269,"line_start":23,"line_end":23,"column_start":12,"column_end":15},"name":"new","qualname":"<BatchLogger<T, E, P>>::new","value":"fn (event_pusher: P) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new batch logger.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2693},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":400532,"byte_end":400545,"line_start":31,"line_end":31,"column_start":12,"column_end":25},"name":"publish_batch","qualname":"<BatchLogger<T, E, P>>::publish_batch","value":"fn (&mut self, time: &Duration, data: &mut Vec<(Duration, E, T)>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Publishes a batch of logged events and advances the capability.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3802},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":401373,"byte_end":401386,"line_start":51,"line_end":51,"column_start":12,"column_end":25},"name":"OperatesEvent","qualname":"::logging::OperatesEvent","value":"OperatesEvent { id, addr, name }","parent":null,"children":[{"krate":0,"index":3803},{"krate":0,"index":3804},{"krate":0,"index":3805}],"decl_id":null,"docs":" The creation of an `Operate` implementor.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3803},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":401448,"byte_end":401450,"line_start":53,"line_end":53,"column_start":9,"column_end":11},"name":"id","qualname":"::logging::OperatesEvent::id","value":"usize","parent":{"krate":0,"index":3802},"children":[],"decl_id":null,"docs":" Worker-unique identifier for the operator.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3804},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":401564,"byte_end":401568,"line_start":55,"line_end":55,"column_start":9,"column_end":13},"name":"addr","qualname":"::logging::OperatesEvent::addr","value":"std::vec::Vec<usize>","parent":{"krate":0,"index":3802},"children":[],"decl_id":null,"docs":" Sequence of nested scope identifiers indicating the path from the root to this instance.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3805},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":401614,"byte_end":401618,"line_start":57,"line_end":57,"column_start":9,"column_end":13},"name":"name","qualname":"::logging::OperatesEvent::name","value":"std::string::String","parent":{"krate":0,"index":3802},"children":[],"decl_id":null,"docs":" A helpful name.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3894},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":401790,"byte_end":401803,"line_start":62,"line_end":62,"column_start":12,"column_end":25},"name":"ChannelsEvent","qualname":"::logging::ChannelsEvent","value":"ChannelsEvent { id, scope_addr, source, target }","parent":null,"children":[{"krate":0,"index":3895},{"krate":0,"index":3896},{"krate":0,"index":3897},{"krate":0,"index":3898}],"decl_id":null,"docs":" The creation of a channel between operators.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3895},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":401863,"byte_end":401865,"line_start":64,"line_end":64,"column_start":9,"column_end":11},"name":"id","qualname":"::logging::ChannelsEvent::id","value":"usize","parent":{"krate":0,"index":3894},"children":[],"decl_id":null,"docs":" Worker-unique identifier for the channel\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3896},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":401979,"byte_end":401989,"line_start":66,"line_end":66,"column_start":9,"column_end":19},"name":"scope_addr","qualname":"::logging::ChannelsEvent::scope_addr","value":"std::vec::Vec<usize>","parent":{"krate":0,"index":3894},"children":[],"decl_id":null,"docs":" Sequence of nested scope identifiers indicating the path from the root to this instance.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3897},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":402081,"byte_end":402087,"line_start":68,"line_end":68,"column_start":9,"column_end":15},"name":"source","qualname":"::logging::ChannelsEvent::source","value":"(usize, usize)","parent":{"krate":0,"index":3894},"children":[],"decl_id":null,"docs":" Source descriptor, indicating operator index and output port.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3898},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":402182,"byte_end":402188,"line_start":70,"line_end":70,"column_start":9,"column_end":15},"name":"target","qualname":"::logging::ChannelsEvent::target","value":"(usize, usize)","parent":{"krate":0,"index":3894},"children":[],"decl_id":null,"docs":" Target descriptor, indicating operator index and input port.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3993},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":402364,"byte_end":402377,"line_start":75,"line_end":75,"column_start":12,"column_end":25},"name":"ProgressEvent","qualname":"::logging::ProgressEvent","value":"ProgressEvent { is_send, source, channel, seq_no, addr, messages, internal }","parent":null,"children":[{"krate":0,"index":3994},{"krate":0,"index":3995},{"krate":0,"index":3996},{"krate":0,"index":3997},{"krate":0,"index":3998},{"krate":0,"index":3999},{"krate":0,"index":4000}],"decl_id":null,"docs":" Send or receive of progress information.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3994},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":402459,"byte_end":402466,"line_start":77,"line_end":77,"column_start":9,"column_end":16},"name":"is_send","qualname":"::logging::ProgressEvent::is_send","value":"bool","parent":{"krate":0,"index":3993},"children":[],"decl_id":null,"docs":" `true` if the event is a send, and `false` if it is a receive.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3995},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":402511,"byte_end":402517,"line_start":79,"line_end":79,"column_start":9,"column_end":15},"name":"source","qualname":"::logging::ProgressEvent::source","value":"usize","parent":{"krate":0,"index":3993},"children":[],"decl_id":null,"docs":" Source worker index.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3996},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":402575,"byte_end":402582,"line_start":81,"line_end":81,"column_start":9,"column_end":16},"name":"channel","qualname":"::logging::ProgressEvent::channel","value":"usize","parent":{"krate":0,"index":3993},"children":[],"decl_id":null,"docs":" Communication channel identifier\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3997},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":402632,"byte_end":402638,"line_start":83,"line_end":83,"column_start":9,"column_end":15},"name":"seq_no","qualname":"::logging::ProgressEvent::seq_no","value":"usize","parent":{"krate":0,"index":3993},"children":[],"decl_id":null,"docs":" Message sequence number.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3998},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":402752,"byte_end":402756,"line_start":85,"line_end":85,"column_start":9,"column_end":13},"name":"addr","qualname":"::logging::ProgressEvent::addr","value":"std::vec::Vec<usize>","parent":{"krate":0,"index":3993},"children":[],"decl_id":null,"docs":" Sequence of nested scope identifiers indicating the path from the root to this instance.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3999},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":402873,"byte_end":402881,"line_start":87,"line_end":87,"column_start":9,"column_end":17},"name":"messages","qualname":"::logging::ProgressEvent::messages","value":"std::vec::Vec<(usize, usize, std::string::String, i64)>","parent":{"krate":0,"index":3993},"children":[],"decl_id":null,"docs":" List of message updates, containing Target descriptor, timestamp as string, and delta.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4000},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":403023,"byte_end":403031,"line_start":89,"line_end":89,"column_start":9,"column_end":17},"name":"internal","qualname":"::logging::ProgressEvent::internal","value":"std::vec::Vec<(usize, usize, std::string::String, i64)>","parent":{"krate":0,"index":3993},"children":[],"decl_id":null,"docs":" List of capability updates, containing Source descriptor, timestamp as string, and delta.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4113},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":403226,"byte_end":403243,"line_start":94,"line_end":94,"column_start":12,"column_end":29},"name":"PushProgressEvent","qualname":"::logging::PushProgressEvent","value":"PushProgressEvent { op_id }","parent":null,"children":[{"krate":0,"index":4114}],"decl_id":null,"docs":" External progress pushed onto an operator\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4114},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":403296,"byte_end":403301,"line_start":96,"line_end":96,"column_start":9,"column_end":14},"name":"op_id","qualname":"::logging::PushProgressEvent::op_id","value":"usize","parent":{"krate":0,"index":4113},"children":[],"decl_id":null,"docs":" Worker-unique operator identifier\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4191},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":403457,"byte_end":403470,"line_start":101,"line_end":101,"column_start":12,"column_end":25},"name":"MessagesEvent","qualname":"::logging::MessagesEvent","value":"MessagesEvent { is_send, channel, source, target, seq_no, length }","parent":null,"children":[{"krate":0,"index":4192},{"krate":0,"index":4193},{"krate":0,"index":4194},{"krate":0,"index":4195},{"krate":0,"index":4196},{"krate":0,"index":4197}],"decl_id":null,"docs":" Message send or receive event\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4192},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":403537,"byte_end":403544,"line_start":103,"line_end":103,"column_start":9,"column_end":16},"name":"is_send","qualname":"::logging::MessagesEvent::is_send","value":"bool","parent":{"krate":0,"index":4191},"children":[],"decl_id":null,"docs":" `true` if send event, `false` if receive event.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4193},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":403587,"byte_end":403594,"line_start":105,"line_end":105,"column_start":9,"column_end":16},"name":"channel","qualname":"::logging::MessagesEvent::channel","value":"usize","parent":{"krate":0,"index":4191},"children":[],"decl_id":null,"docs":" Channel identifier\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4194},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":403640,"byte_end":403646,"line_start":107,"line_end":107,"column_start":9,"column_end":15},"name":"source","qualname":"::logging::MessagesEvent::source","value":"usize","parent":{"krate":0,"index":4191},"children":[],"decl_id":null,"docs":" Source worker index.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4195},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":403692,"byte_end":403698,"line_start":109,"line_end":109,"column_start":9,"column_end":15},"name":"target","qualname":"::logging::MessagesEvent::target","value":"usize","parent":{"krate":0,"index":4191},"children":[],"decl_id":null,"docs":" Target worker index.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4196},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":403748,"byte_end":403754,"line_start":111,"line_end":111,"column_start":9,"column_end":15},"name":"seq_no","qualname":"::logging::MessagesEvent::seq_no","value":"usize","parent":{"krate":0,"index":4191},"children":[],"decl_id":null,"docs":" Message sequence number.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4197},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":403819,"byte_end":403825,"line_start":113,"line_end":113,"column_start":9,"column_end":15},"name":"length","qualname":"::logging::MessagesEvent::length","value":"usize","parent":{"krate":0,"index":4191},"children":[],"decl_id":null,"docs":" Number of typed records in the message.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4305},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":404040,"byte_end":404045,"line_start":120,"line_end":120,"column_start":5,"column_end":10},"name":"Start","qualname":"::logging::StartStop::Start","value":"StartStop::Start","parent":{"krate":0,"index":4304},"children":[],"decl_id":null,"docs":" Operator starts.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4307},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":404075,"byte_end":404079,"line_start":122,"line_end":122,"column_start":5,"column_end":9},"name":"Stop","qualname":"::logging::StartStop::Stop","value":"StartStop::Stop","parent":{"krate":0,"index":4304},"children":[],"decl_id":null,"docs":" Operator stops.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4304},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":403999,"byte_end":404008,"line_start":118,"line_end":118,"column_start":10,"column_end":19},"name":"StartStop","qualname":"::logging::StartStop","value":"StartStop::{Start, Stop}","parent":null,"children":[{"krate":0,"index":4305},{"krate":0,"index":4307}],"decl_id":null,"docs":" Records the starting and stopping of an operator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4378},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":404222,"byte_end":404235,"line_start":127,"line_end":127,"column_start":12,"column_end":25},"name":"ScheduleEvent","qualname":"::logging::ScheduleEvent","value":"ScheduleEvent { id, start_stop }","parent":null,"children":[{"krate":0,"index":4379},{"krate":0,"index":4380}],"decl_id":null,"docs":" Operator start or stop.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4379},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":404345,"byte_end":404347,"line_start":129,"line_end":129,"column_start":9,"column_end":11},"name":"id","qualname":"::logging::ScheduleEvent::id","value":"usize","parent":{"krate":0,"index":4378},"children":[],"decl_id":null,"docs":" Worker-unique identifier for the operator, linkable to the identifiers in `OperatesEvent`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4380},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":404602,"byte_end":404612,"line_start":133,"line_end":133,"column_start":9,"column_end":19},"name":"start_stop","qualname":"::logging::ScheduleEvent::start_stop","value":"logging::StartStop","parent":{"krate":0,"index":4378},"children":[],"decl_id":null,"docs":" `Start` if the operator is starting, `Stop` if it is stopping.\n activity is true if it looks like some useful work was performed during this call (data was\n read or written, notifications were requested / delivered)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2700},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":404706,"byte_end":404711,"line_start":138,"line_end":138,"column_start":12,"column_end":17},"name":"start","qualname":"<ScheduleEvent>::start","value":"fn (id: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new start scheduling event.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2701},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":404876,"byte_end":404880,"line_start":140,"line_end":140,"column_start":12,"column_end":16},"name":"stop","qualname":"<ScheduleEvent>::stop","value":"fn (id: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new stop scheduling event and reports whether work occurred.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4463},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":405090,"byte_end":405103,"line_start":145,"line_end":145,"column_start":12,"column_end":25},"name":"ShutdownEvent","qualname":"::logging::ShutdownEvent","value":"ShutdownEvent { id }","parent":null,"children":[{"krate":0,"index":4464}],"decl_id":null,"docs":" Operator shutdown.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4464},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":405213,"byte_end":405215,"line_start":147,"line_end":147,"column_start":9,"column_end":11},"name":"id","qualname":"::logging::ShutdownEvent::id","value":"usize","parent":{"krate":0,"index":4463},"children":[],"decl_id":null,"docs":" Worker-unique identifier for the operator, linkable to the identifiers in `OperatesEvent`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4541},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":405380,"byte_end":405396,"line_start":152,"line_end":152,"column_start":12,"column_end":28},"name":"ApplicationEvent","qualname":"::logging::ApplicationEvent","value":"ApplicationEvent { id, is_start }","parent":null,"children":[{"krate":0,"index":4542},{"krate":0,"index":4543}],"decl_id":null,"docs":" Application-defined code start or stop\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4542},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":405444,"byte_end":405446,"line_start":154,"line_end":154,"column_start":9,"column_end":11},"name":"id","qualname":"::logging::ApplicationEvent::id","value":"usize","parent":{"krate":0,"index":4541},"children":[],"decl_id":null,"docs":" Unique event type identifier\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4543},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":405518,"byte_end":405526,"line_start":156,"line_end":156,"column_start":9,"column_end":17},"name":"is_start","qualname":"::logging::ApplicationEvent::is_start","value":"bool","parent":{"krate":0,"index":4541},"children":[],"decl_id":null,"docs":" True when activity begins, false when it stops\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4626},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":405690,"byte_end":405709,"line_start":161,"line_end":161,"column_start":12,"column_end":31},"name":"GuardedMessageEvent","qualname":"::logging::GuardedMessageEvent","value":"GuardedMessageEvent { is_start }","parent":null,"children":[{"krate":0,"index":4627}],"decl_id":null,"docs":" Application-defined code start or stop\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4627},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":405775,"byte_end":405783,"line_start":163,"line_end":163,"column_start":9,"column_end":17},"name":"is_start","qualname":"::logging::GuardedMessageEvent::is_start","value":"bool","parent":{"krate":0,"index":4626},"children":[],"decl_id":null,"docs":" True when activity begins, false when it stops\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4704},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":405947,"byte_end":405967,"line_start":168,"line_end":168,"column_start":12,"column_end":32},"name":"GuardedProgressEvent","qualname":"::logging::GuardedProgressEvent","value":"GuardedProgressEvent { is_start }","parent":null,"children":[{"krate":0,"index":4705}],"decl_id":null,"docs":" Application-defined code start or stop\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4705},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":406033,"byte_end":406041,"line_start":170,"line_end":170,"column_start":9,"column_end":17},"name":"is_start","qualname":"::logging::GuardedProgressEvent::is_start","value":"bool","parent":{"krate":0,"index":4704},"children":[],"decl_id":null,"docs":" True when activity begins, false when it stops\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4782},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":406206,"byte_end":406217,"line_start":175,"line_end":175,"column_start":12,"column_end":23},"name":"TimelySetup","qualname":"::logging::TimelySetup","value":"TimelySetup { index }","parent":null,"children":[{"krate":0,"index":4783}],"decl_id":null,"docs":" Identifier of the worker that generated a log line\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4783},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":406249,"byte_end":406254,"line_start":177,"line_end":177,"column_start":9,"column_end":14},"name":"index","qualname":"::logging::TimelySetup::index","value":"usize","parent":{"krate":0,"index":4782},"children":[],"decl_id":null,"docs":" Worker index\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4854},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":406490,"byte_end":406498,"line_start":184,"line_end":184,"column_start":5,"column_end":13},"name":"Progress","qualname":"::logging::CommChannelKind::Progress","value":"CommChannelKind::Progress","parent":{"krate":0,"index":4853},"children":[],"decl_id":null,"docs":" Communication channel carrying progress information\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4856},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":406548,"byte_end":406552,"line_start":186,"line_end":186,"column_start":5,"column_end":9},"name":"Data","qualname":"::logging::CommChannelKind::Data","value":"CommChannelKind::Data","parent":{"krate":0,"index":4853},"children":[],"decl_id":null,"docs":" Communication channel carrying data\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4853},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":406408,"byte_end":406423,"line_start":182,"line_end":182,"column_start":10,"column_end":25},"name":"CommChannelKind","qualname":"::logging::CommChannelKind","value":"CommChannelKind::{Progress, Data}","parent":null,"children":[{"krate":0,"index":4854},{"krate":0,"index":4856}],"decl_id":null,"docs":" Kind of communication channel\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4927},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":406704,"byte_end":406721,"line_start":191,"line_end":191,"column_start":12,"column_end":29},"name":"CommChannelsEvent","qualname":"::logging::CommChannelsEvent","value":"CommChannelsEvent { identifier, kind }","parent":null,"children":[{"krate":0,"index":4928},{"krate":0,"index":4929}],"decl_id":null,"docs":" Event on a communication channel\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4928},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":406773,"byte_end":406783,"line_start":193,"line_end":193,"column_start":9,"column_end":19},"name":"identifier","qualname":"::logging::CommChannelsEvent::identifier","value":"usize","parent":{"krate":0,"index":4927},"children":[],"decl_id":null,"docs":" Communication channel identifier\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4929},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":406856,"byte_end":406860,"line_start":195,"line_end":195,"column_start":9,"column_end":13},"name":"kind","qualname":"::logging::CommChannelsEvent::kind","value":"logging::CommChannelKind","parent":{"krate":0,"index":4927},"children":[],"decl_id":null,"docs":" Kind of communication channel (progress / data)\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5012},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":407019,"byte_end":407029,"line_start":200,"line_end":200,"column_start":12,"column_end":22},"name":"InputEvent","qualname":"::logging::InputEvent","value":"InputEvent { start_stop }","parent":null,"children":[{"krate":0,"index":5013}],"decl_id":null,"docs":" Input logic start/stop\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5013},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":407095,"byte_end":407105,"line_start":202,"line_end":202,"column_start":9,"column_end":19},"name":"start_stop","qualname":"::logging::InputEvent::start_stop","value":"logging::StartStop","parent":{"krate":0,"index":5012},"children":[],"decl_id":null,"docs":" True when activity begins, false when it stops\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5091},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":407321,"byte_end":407325,"line_start":209,"line_end":209,"column_start":5,"column_end":9},"name":"Park","qualname":"::logging::ParkEvent::Park","value":"ParkEvent::Park(Option<Duration>)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Worker parks.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5094},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":407373,"byte_end":407379,"line_start":211,"line_end":211,"column_start":5,"column_end":11},"name":"Unpark","qualname":"::logging::ParkEvent::Unpark","value":"ParkEvent::Unpark","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Worker unparks.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5090},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":407283,"byte_end":407292,"line_start":207,"line_end":207,"column_start":10,"column_end":19},"name":"ParkEvent","qualname":"::logging::ParkEvent","value":"ParkEvent::{Park, Unpark}","parent":null,"children":[{"krate":0,"index":5091},{"krate":0,"index":5094}],"decl_id":null,"docs":" Records the starting and stopping of an operator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2703},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":407473,"byte_end":407477,"line_start":216,"line_end":216,"column_start":12,"column_end":16},"name":"park","qualname":"<ParkEvent>::park","value":"fn (duration: Option<Duration>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new park event from the supplied duration.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2704},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":407591,"byte_end":407597,"line_start":218,"line_end":218,"column_start":12,"column_end":18},"name":"unpark","qualname":"<ParkEvent>::unpark","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new unpark event.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5171},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":407818,"byte_end":407826,"line_start":225,"line_end":225,"column_start":5,"column_end":13},"name":"Operates","qualname":"::logging::TimelyEvent::Operates","value":"TimelyEvent::Operates(OperatesEvent)","parent":{"krate":0,"index":5170},"children":[],"decl_id":null,"docs":" Operator creation.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5174},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":407873,"byte_end":407881,"line_start":227,"line_end":227,"column_start":5,"column_end":13},"name":"Channels","qualname":"::logging::TimelyEvent::Channels","value":"TimelyEvent::Channels(ChannelsEvent)","parent":{"krate":0,"index":5170},"children":[],"decl_id":null,"docs":" Channel creation.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5177},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":407944,"byte_end":407952,"line_start":229,"line_end":229,"column_start":5,"column_end":13},"name":"Progress","qualname":"::logging::TimelyEvent::Progress","value":"TimelyEvent::Progress(ProgressEvent)","parent":{"krate":0,"index":5170},"children":[],"decl_id":null,"docs":" Progress message send or receive.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5180},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":408015,"byte_end":408027,"line_start":231,"line_end":231,"column_start":5,"column_end":17},"name":"PushProgress","qualname":"::logging::TimelyEvent::PushProgress","value":"TimelyEvent::PushProgress(PushProgressEvent)","parent":{"krate":0,"index":5170},"children":[],"decl_id":null,"docs":" Progress propagation (reasoning).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5183},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":408085,"byte_end":408093,"line_start":233,"line_end":233,"column_start":5,"column_end":13},"name":"Messages","qualname":"::logging::TimelyEvent::Messages","value":"TimelyEvent::Messages(MessagesEvent)","parent":{"krate":0,"index":5170},"children":[],"decl_id":null,"docs":" Message send or receive.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5186},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":408146,"byte_end":408154,"line_start":235,"line_end":235,"column_start":5,"column_end":13},"name":"Schedule","qualname":"::logging::TimelyEvent::Schedule","value":"TimelyEvent::Schedule(ScheduleEvent)","parent":{"krate":0,"index":5170},"children":[],"decl_id":null,"docs":" Operator start or stop.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5189},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":408202,"byte_end":408210,"line_start":237,"line_end":237,"column_start":5,"column_end":13},"name":"Shutdown","qualname":"::logging::TimelyEvent::Shutdown","value":"TimelyEvent::Shutdown(ShutdownEvent)","parent":{"krate":0,"index":5170},"children":[],"decl_id":null,"docs":" Operator shutdown.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5192},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":408248,"byte_end":408259,"line_start":239,"line_end":239,"column_start":5,"column_end":16},"name":"Application","qualname":"::logging::TimelyEvent::Application","value":"TimelyEvent::Application(ApplicationEvent)","parent":{"krate":0,"index":5170},"children":[],"decl_id":null,"docs":" No clue.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5195},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":408316,"byte_end":408330,"line_start":241,"line_end":241,"column_start":5,"column_end":19},"name":"GuardedMessage","qualname":"::logging::TimelyEvent::GuardedMessage","value":"TimelyEvent::GuardedMessage(GuardedMessageEvent)","parent":{"krate":0,"index":5170},"children":[],"decl_id":null,"docs":" Per-message computation.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5198},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":408395,"byte_end":408410,"line_start":243,"line_end":243,"column_start":5,"column_end":20},"name":"GuardedProgress","qualname":"::logging::TimelyEvent::GuardedProgress","value":"TimelyEvent::GuardedProgress(GuardedProgressEvent)","parent":{"krate":0,"index":5170},"children":[],"decl_id":null,"docs":" Per-notification computation.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5201},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":408475,"byte_end":408487,"line_start":245,"line_end":245,"column_start":5,"column_end":17},"name":"CommChannels","qualname":"::logging::TimelyEvent::CommChannels","value":"TimelyEvent::CommChannels(CommChannelsEvent)","parent":{"krate":0,"index":5170},"children":[],"decl_id":null,"docs":" Communication channel event.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5204},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":408533,"byte_end":408538,"line_start":247,"line_end":247,"column_start":5,"column_end":10},"name":"Input","qualname":"::logging::TimelyEvent::Input","value":"TimelyEvent::Input(InputEvent)","parent":{"krate":0,"index":5170},"children":[],"decl_id":null,"docs":" Input event.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5207},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":408576,"byte_end":408580,"line_start":249,"line_end":249,"column_start":5,"column_end":9},"name":"Park","qualname":"::logging::TimelyEvent::Park","value":"TimelyEvent::Park(ParkEvent)","parent":{"krate":0,"index":5170},"children":[],"decl_id":null,"docs":" Park event.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5210},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":408625,"byte_end":408629,"line_start":251,"line_end":251,"column_start":5,"column_end":9},"name":"Text","qualname":"::logging::TimelyEvent::Text","value":"TimelyEvent::Text(String)","parent":{"krate":0,"index":5170},"children":[],"decl_id":null,"docs":" Unstructured event.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5170},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":407773,"byte_end":407784,"line_start":223,"line_end":223,"column_start":10,"column_end":21},"name":"TimelyEvent","qualname":"::logging::TimelyEvent","value":"TimelyEvent::{Operates, Channels, Progress, PushProgress, Messages, Schedule, Shutdown, Application, GuardedMessage, GuardedProgress, CommChannels, Input, Park, Text}","parent":null,"children":[{"krate":0,"index":5171},{"krate":0,"index":5174},{"krate":0,"index":5177},{"krate":0,"index":5180},{"krate":0,"index":5183},{"krate":0,"index":5186},{"krate":0,"index":5189},{"krate":0,"index":5192},{"krate":0,"index":5195},{"krate":0,"index":5198},{"krate":0,"index":5201},{"krate":0,"index":5204},{"krate":0,"index":5207},{"krate":0,"index":5210}],"decl_id":null,"docs":" An event in a timely worker\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2731},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"scheduling","qualname":"::scheduling","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\mod.rs","parent":null,"children":[{"krate":0,"index":2732},{"krate":0,"index":2733},{"krate":0,"index":2734},{"krate":0,"index":2820},{"krate":0,"index":2825},{"krate":0,"index":2829}],"decl_id":null,"docs":" Types and traits to activate and schedule fibers.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2734},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"activate","qualname":"::scheduling::activate","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","parent":null,"children":[{"krate":0,"index":2735},{"krate":0,"index":2736},{"krate":0,"index":2737},{"krate":0,"index":2740},{"krate":0,"index":2741},{"krate":0,"index":2742},{"krate":0,"index":2745},{"krate":0,"index":2746},{"krate":0,"index":2755},{"krate":0,"index":2774},{"krate":0,"index":2777},{"krate":0,"index":2782},{"krate":0,"index":2785},{"krate":0,"index":2789},{"krate":0,"index":2792},{"krate":0,"index":5311},{"krate":0,"index":5313},{"krate":0,"index":2795},{"krate":0,"index":2797},{"krate":0,"index":2799},{"krate":0,"index":2804},{"krate":0,"index":2807},{"krate":0,"index":2810},{"krate":0,"index":2814},{"krate":0,"index":2817}],"decl_id":null,"docs":" Parking and unparking timely fibers.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2746},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":411885,"byte_end":411896,"line_start":12,"line_end":12,"column_start":12,"column_end":23},"name":"Activations","qualname":"::scheduling::activate::Activations","value":"Activations {  }","parent":null,"children":[{"krate":0,"index":2747},{"krate":0,"index":2748},{"krate":0,"index":2749},{"krate":0,"index":2750},{"krate":0,"index":2751},{"krate":0,"index":2752},{"krate":0,"index":2753},{"krate":0,"index":2754}],"decl_id":null,"docs":" Allocation-free activation tracker.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2756},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":412298,"byte_end":412301,"line_start":31,"line_end":31,"column_start":12,"column_end":15},"name":"new","qualname":"<Activations>::new","value":"fn (timer: Instant) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new activation tracker.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2757},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":412677,"byte_end":412685,"line_start":46,"line_end":46,"column_start":12,"column_end":20},"name":"activate","qualname":"<Activations>::activate","value":"fn (&mut self, path: &[usize]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Activates the task addressed by `path`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2758},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":412898,"byte_end":412912,"line_start":52,"line_end":52,"column_start":12,"column_end":26},"name":"activate_after","qualname":"<Activations>::activate_after","value":"fn (&mut self, path: &[usize], delay: Duration) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Schedules a future activation for the task addressed by `path`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2759},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":413382,"byte_end":413389,"line_start":64,"line_end":64,"column_start":12,"column_end":19},"name":"advance","qualname":"<Activations>::advance","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Discards the current active set and presents the next active set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2763},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":414535,"byte_end":414545,"line_start":98,"line_end":98,"column_start":12,"column_end":22},"name":"map_active","qualname":"<Activations>::map_active","value":"fn (&self, logic: impl Fn(&[usize])) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Maps a function across activated paths.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2765},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":414782,"byte_end":414796,"line_start":105,"line_end":105,"column_start":12,"column_end":26},"name":"for_extensions","qualname":"<Activations>::for_extensions","value":"fn (&self, path: &[usize], mut action: impl FnMut(usize)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets as active any symbols that follow `path`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2771},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":415795,"byte_end":415799,"line_start":134,"line_end":134,"column_start":12,"column_end":16},"name":"sync","qualname":"<Activations>::sync","value":"fn (&self) -> SyncActivations","parent":null,"children":[],"decl_id":null,"docs":" Constructs a thread-safe `SyncActivations` handle to this activator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2772},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":416207,"byte_end":416216,"line_start":146,"line_end":146,"column_start":12,"column_end":21},"name":"empty_for","qualname":"<Activations>::empty_for","value":"fn (&self) -> Option<Duration>","parent":null,"children":[],"decl_id":null,"docs":" Time until next scheduled event.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2774},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":416635,"byte_end":416650,"line_start":161,"line_end":161,"column_start":12,"column_end":27},"name":"SyncActivations","qualname":"::scheduling::activate::SyncActivations","value":"SyncActivations {  }","parent":null,"children":[{"krate":0,"index":2775},{"krate":0,"index":2776}],"decl_id":null,"docs":" A thread-safe handle to an `Activations`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2778},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":416833,"byte_end":416841,"line_start":169,"line_end":169,"column_start":12,"column_end":20},"name":"activate","qualname":"<SyncActivations>::activate","value":"fn (&self, path: Vec<usize>) -> Result<(), SyncActivationError>","parent":null,"children":[],"decl_id":null,"docs":" Unparks the task addressed by `path` and unparks the associated worker\n thread.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2779},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":417239,"byte_end":417253,"line_start":178,"line_end":178,"column_start":12,"column_end":26},"name":"activate_batch","qualname":"<SyncActivations>::activate_batch","value":"fn <I> (&self, paths: I) -> Result<(), SyncActivationError>","parent":null,"children":[],"decl_id":null,"docs":" Unparks the tasks addressed by `paths` and unparks the associated worker\n thread.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2782},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":417595,"byte_end":417604,"line_start":191,"line_end":191,"column_start":12,"column_end":21},"name":"Activator","qualname":"::scheduling::activate::Activator","value":"Activator {  }","parent":null,"children":[{"krate":0,"index":2783},{"krate":0,"index":2784}],"decl_id":null,"docs":" A capability to activate a specific path.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2786},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":417737,"byte_end":417740,"line_start":198,"line_end":198,"column_start":12,"column_end":15},"name":"new","qualname":"<Activator>::new","value":"fn (path: &[usize], queue: Rc<RefCell<Activations>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new activation handle\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2787},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":417933,"byte_end":417941,"line_start":205,"line_end":205,"column_start":12,"column_end":20},"name":"activate","qualname":"<Activator>::activate","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Activates the associated path.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2788},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":418119,"byte_end":418133,"line_start":212,"line_end":212,"column_start":12,"column_end":26},"name":"activate_after","qualname":"<Activator>::activate_after","value":"fn (&self, delay: Duration) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Activates the associated path after a specified duration.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2789},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":418437,"byte_end":418450,"line_start":225,"line_end":225,"column_start":12,"column_end":25},"name":"SyncActivator","qualname":"::scheduling::activate::SyncActivator","value":"SyncActivator {  }","parent":null,"children":[{"krate":0,"index":2790},{"krate":0,"index":2791}],"decl_id":null,"docs":" A thread-safe version of `Activator`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2793},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":418591,"byte_end":418594,"line_start":232,"line_end":232,"column_start":12,"column_end":15},"name":"new","qualname":"<SyncActivator>::new","value":"fn (path: &[usize], queue: SyncActivations) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new thread-safe activation handle.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2794},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":418820,"byte_end":418828,"line_start":240,"line_end":240,"column_start":12,"column_end":20},"name":"activate","qualname":"<SyncActivator>::activate","value":"fn (&self) -> Result<(), SyncActivationError>","parent":null,"children":[],"decl_id":null,"docs":" Activates the associated path and unparks the associated worker thread.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5311},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":419070,"byte_end":419089,"line_start":248,"line_end":248,"column_start":12,"column_end":31},"name":"SyncActivationError","qualname":"::scheduling::activate::SyncActivationError","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error returned when activation fails across thread boundaries because\n the receiving end has hung up.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2799},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":419461,"byte_end":419475,"line_start":263,"line_end":263,"column_start":12,"column_end":26},"name":"ActivateOnDrop","qualname":"::scheduling::activate::ActivateOnDrop","value":"ActivateOnDrop {  }","parent":null,"children":[{"krate":0,"index":2801},{"krate":0,"index":2802},{"krate":0,"index":2803}],"decl_id":null,"docs":" A wrapper that unparks on drop.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2809},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":419701,"byte_end":419704,"line_start":273,"line_end":273,"column_start":12,"column_end":15},"name":"new","qualname":"<ActivateOnDrop<T>>::new","value":"fn (wrapped: T, address: Rc<Vec<usize>>, activator: Rc<RefCell<Activations>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps an element so that it is unparked on drop.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2825},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\mod.rs","byte_start":410495,"byte_end":410503,"line_start":11,"line_end":11,"column_start":11,"column_end":19},"name":"Schedule","qualname":"::scheduling::Schedule","value":"Schedule","parent":null,"children":[{"krate":0,"index":2826},{"krate":0,"index":2827},{"krate":0,"index":2828}],"decl_id":null,"docs":" A type that can be scheduled.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2826},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\mod.rs","byte_start":410557,"byte_end":410561,"line_start":13,"line_end":13,"column_start":8,"column_end":12},"name":"name","qualname":"::scheduling::Schedule::name","value":"fn (&self) -> &str","parent":{"krate":0,"index":2825},"children":[],"decl_id":null,"docs":" A descriptive name for the operator\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2827},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\mod.rs","byte_start":410630,"byte_end":410634,"line_start":15,"line_end":15,"column_start":8,"column_end":12},"name":"path","qualname":"::scheduling::Schedule::path","value":"fn (&self) -> &[usize]","parent":{"krate":0,"index":2825},"children":[],"decl_id":null,"docs":" An address identifying the operator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2828},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\mod.rs","byte_start":410868,"byte_end":410876,"line_start":20,"line_end":20,"column_start":8,"column_end":16},"name":"schedule","qualname":"::scheduling::Schedule::schedule","value":"fn (&mut self) -> bool","parent":{"krate":0,"index":2825},"children":[],"decl_id":null,"docs":" Schedules the operator, receives \"cannot terminate\" boolean.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2829},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\mod.rs","byte_start":410955,"byte_end":410964,"line_start":24,"line_end":24,"column_start":11,"column_end":20},"name":"Scheduler","qualname":"::scheduling::Scheduler","value":"Scheduler","parent":null,"children":[{"krate":0,"index":2830},{"krate":0,"index":2831},{"krate":0,"index":2832}],"decl_id":null,"docs":" Methods for types which schedule fibers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2830},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\mod.rs","byte_start":411036,"byte_end":411047,"line_start":26,"line_end":26,"column_start":8,"column_end":19},"name":"activations","qualname":"::scheduling::Scheduler::activations","value":"fn (&self) -> Rc<RefCell<Activations>>","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" Provides a shared handle to the activation scheduler.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2831},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\mod.rs","byte_start":411165,"byte_end":411178,"line_start":28,"line_end":28,"column_start":8,"column_end":21},"name":"activator_for","qualname":"::scheduling::Scheduler::activator_for","value":"fn (&self, path: &[usize]) -> Activator","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" Constructs an `Activator` tied to the specified operator address.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2832},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\mod.rs","byte_start":411403,"byte_end":411421,"line_start":33,"line_end":33,"column_start":8,"column_end":26},"name":"sync_activator_for","qualname":"::scheduling::Scheduler::sync_activator_for","value":"fn (&self, path: &[usize]) -> SyncActivator","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" Constructs a `SyncActivator` tied to the specified operator address.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2833},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":3880,"byte_end":3884,"line_start":105,"line_end":105,"column_start":11,"column_end":15},"name":"Data","qualname":"::Data","value":"Data: Clone + 'static","parent":null,"children":[],"decl_id":null,"docs":" A composite trait for types usable as data in timely dataflow.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2836},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":4222,"byte_end":4234,"line_start":112,"line_end":112,"column_start":11,"column_end":23},"name":"ExchangeData","qualname":"::ExchangeData","value":"ExchangeData: Data + communication::Data","parent":null,"children":[],"decl_id":null,"docs":" A composite trait for types usable on exchange channels in timely dataflow.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":7538,"byte_end":7544,"line_start":73,"line_end":73,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":91},{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":8804,"byte_end":8810,"line_start":97,"line_end":97,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":8932,"byte_end":8938,"line_start":103,"line_end":103,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":116},{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":21194,"byte_end":21200,"line_start":458,"line_end":458,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":21934,"byte_end":21941,"line_start":483,"line_end":483,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":22913,"byte_end":22920,"line_start":511,"line_end":511,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":27259,"byte_end":27270,"line_start":20,"line_end":20,"column_start":13,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":35925,"byte_end":35934,"line_start":17,"line_end":17,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":41732,"byte_end":41748,"line_start":186,"line_end":186,"column_start":33,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":210},{"krate":0,"index":214},{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":51556,"byte_end":51557,"line_start":479,"line_end":479,"column_start":94,"column_end":95},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":51933,"byte_end":51945,"line_start":492,"line_end":492,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":237},{"krate":0,"index":239},{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":54296,"byte_end":54308,"line_start":576,"line_end":576,"column_start":49,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":244},{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":59311,"byte_end":59312,"line_start":112,"line_end":112,"column_start":39,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\operate.rs","byte_start":64037,"byte_end":64051,"line_start":74,"line_end":74,"column_start":20,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\broadcast.rs","byte_start":65601,"byte_end":65611,"line_start":31,"line_end":31,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":330},{"krate":0,"index":333},{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":74732,"byte_end":74739,"line_start":145,"line_end":145,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":84683,"byte_end":84694,"line_start":388,"line_end":388,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":85425,"byte_end":85440,"line_start":409,"line_end":409,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":382},{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":86431,"byte_end":86438,"line_start":434,"line_end":434,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":393},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","byte_start":102473,"byte_end":102488,"line_start":66,"line_end":66,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","byte_start":109693,"byte_end":109701,"line_start":255,"line_end":255,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","byte_start":111903,"byte_end":111911,"line_start":317,"line_end":317,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":497}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","byte_start":119873,"byte_end":119881,"line_start":501,"line_end":501,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","byte_start":122695,"byte_end":122711,"line_start":571,"line_end":571,"column_start":20,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","byte_start":129584,"byte_end":129600,"line_start":745,"line_end":745,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":23894,"byte_end":23902,"line_start":26,"line_end":26,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":24586,"byte_end":24594,"line_start":41,"line_end":41,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":24771,"byte_end":24779,"line_start":50,"line_end":50,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":25570,"byte_end":25576,"line_start":80,"line_end":80,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":552}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":26121,"byte_end":26127,"line_start":99,"line_end":99,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\enterleave.rs","byte_start":135272,"byte_end":135273,"line_start":80,"line_end":80,"column_start":119,"column_end":120},"value":"","parent":null,"children":[{"krate":0,"index":638}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\enterleave.rs","byte_start":135614,"byte_end":135620,"line_start":87,"line_end":87,"column_start":80,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\enterleave.rs","byte_start":136867,"byte_end":136873,"line_start":121,"line_end":121,"column_start":81,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\enterleave.rs","byte_start":137685,"byte_end":137695,"line_start":145,"line_end":145,"column_start":105,"column_end":115},"value":"","parent":null,"children":[{"krate":0,"index":668}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\enterleave.rs","byte_start":138644,"byte_end":138653,"line_start":168,"line_end":168,"column_start":61,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":679}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","byte_start":143153,"byte_end":143154,"line_start":96,"line_end":96,"column_start":26,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":713},{"krate":0,"index":715}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","byte_start":144787,"byte_end":144795,"line_start":143,"line_end":143,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","byte_start":145227,"byte_end":145235,"line_start":157,"line_end":157,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","byte_start":145993,"byte_end":145999,"line_start":182,"line_end":182,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":751},{"krate":0,"index":752},{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":759}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","byte_start":152821,"byte_end":152827,"line_start":373,"line_end":373,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":763}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\unordered_input.rs","byte_start":161388,"byte_end":161389,"line_start":82,"line_end":82,"column_start":38,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\unordered_input.rs","byte_start":162874,"byte_end":162891,"line_start":123,"line_end":123,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\unordered_input.rs","byte_start":163320,"byte_end":163337,"line_start":134,"line_end":134,"column_start":34,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\unordered_input.rs","byte_start":164091,"byte_end":164106,"line_start":154,"line_end":154,"column_start":29,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":852},{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\unordered_input.rs","byte_start":164876,"byte_end":164894,"line_start":175,"line_end":175,"column_start":20,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":860}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\unordered_input.rs","byte_start":165813,"byte_end":165831,"line_start":203,"line_end":203,"column_start":29,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":863}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\feedback.rs","byte_start":168953,"byte_end":168954,"line_start":70,"line_end":70,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\feedback.rs","byte_start":169337,"byte_end":169346,"line_start":80,"line_end":80,"column_start":61,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":897}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\feedback.rs","byte_start":170393,"byte_end":170399,"line_start":108,"line_end":108,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\concat.rs","byte_start":172174,"byte_end":172180,"line_start":26,"line_end":26,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":929}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\concat.rs","byte_start":173087,"byte_end":173093,"line_start":55,"line_end":55,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":938}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\concat.rs","byte_start":173380,"byte_end":173381,"line_start":65,"line_end":65,"column_start":47,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":943}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\partition.rs","byte_start":175651,"byte_end":175657,"line_start":28,"line_end":28,"column_start":91,"column_end":97},"value":"","parent":null,"children":[{"krate":0,"index":968}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\map.rs","byte_start":178601,"byte_end":178607,"line_start":51,"line_end":51,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":995},{"krate":0,"index":1002},{"krate":0,"index":1007}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\inspect.rs","byte_start":182198,"byte_end":182204,"line_start":60,"line_end":60,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1035}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\filter.rs","byte_start":183431,"byte_end":183437,"line_start":25,"line_end":25,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1054}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\delay.rs","byte_start":187615,"byte_end":187621,"line_start":97,"line_end":97,"column_start":41,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1083},{"krate":0,"index":1089},{"krate":0,"index":1091}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\exchange.rs","byte_start":190885,"byte_end":190891,"line_start":29,"line_end":29,"column_start":63,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1112}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\broadcast.rs","byte_start":192474,"byte_end":192480,"line_start":38,"line_end":38,"column_start":50,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1131}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\probe.rs","byte_start":199186,"byte_end":199192,"line_start":82,"line_end":82,"column_start":41,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1160},{"krate":0,"index":1161}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\probe.rs","byte_start":201464,"byte_end":201470,"line_start":144,"line_end":144,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1169},{"krate":0,"index":1170},{"krate":0,"index":1171},{"krate":0,"index":1172},{"krate":0,"index":1173}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\probe.rs","byte_start":202734,"byte_end":202740,"line_start":173,"line_end":173,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1178}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\to_stream.rs","byte_start":204945,"byte_end":204946,"line_start":31,"line_end":31,"column_start":70,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":1195}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\capture.rs","byte_start":213625,"byte_end":213631,"line_start":116,"line_end":116,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1231}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\replay.rs","byte_start":218602,"byte_end":218603,"line_start":65,"line_end":65,"column_start":49,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1257}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\extract.rs","byte_start":222527,"byte_end":222535,"line_start":50,"line_end":50,"column_start":58,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1269}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":224622,"byte_end":224628,"line_start":36,"line_end":36,"column_start":53,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1284}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":225532,"byte_end":225541,"line_start":63,"line_end":63,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1300}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":225812,"byte_end":225814,"line_start":71,"line_end":71,"column_start":38,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1304}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":226147,"byte_end":226149,"line_start":79,"line_end":79,"column_start":40,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1308}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":226629,"byte_end":226638,"line_start":94,"line_end":94,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1312}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":227535,"byte_end":227546,"line_start":127,"line_end":127,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1330}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":227898,"byte_end":227909,"line_start":137,"line_end":137,"column_start":85,"column_end":96},"value":"","parent":null,"children":[{"krate":0,"index":1335}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":228532,"byte_end":228543,"line_start":155,"line_end":155,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1351}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":229056,"byte_end":229067,"line_start":170,"line_end":170,"column_start":86,"column_end":97},"value":"","parent":null,"children":[{"krate":0,"index":1356}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\branch.rs","byte_start":231538,"byte_end":231544,"line_start":37,"line_end":37,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1372}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\branch.rs","byte_start":233832,"byte_end":233838,"line_start":100,"line_end":100,"column_start":46,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1385}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\aggregation\\state_machine.rs","byte_start":238525,"byte_end":238531,"line_start":57,"line_end":57,"column_start":84,"column_end":90},"value":"","parent":null,"children":[{"krate":0,"index":1418}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\aggregation\\aggregate.rs","byte_start":243900,"byte_end":243906,"line_start":70,"line_end":70,"column_start":81,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":1453}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\operator.rs","byte_start":261738,"byte_end":261744,"line_start":329,"line_end":329,"column_start":46,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1526},{"krate":0,"index":1533},{"krate":0,"index":1540},{"krate":0,"index":1547},{"krate":0,"index":1556},{"krate":0,"index":1565},{"krate":0,"index":1574}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_rc.rs","byte_start":274160,"byte_end":274175,"line_start":38,"line_end":38,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1630},{"krate":0,"index":1631},{"krate":0,"index":1632},{"krate":0,"index":1635},{"krate":0,"index":1638},{"krate":0,"index":1640},{"krate":0,"index":1642},{"krate":0,"index":1646},{"krate":0,"index":1647},{"krate":0,"index":1648}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_raw.rs","byte_start":283207,"byte_end":283220,"line_start":33,"line_end":33,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1678},{"krate":0,"index":1679},{"krate":0,"index":1680}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_raw.rs","byte_start":283966,"byte_end":283981,"line_start":65,"line_end":65,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1691},{"krate":0,"index":1692},{"krate":0,"index":1693},{"krate":0,"index":1694},{"krate":0,"index":1695},{"krate":0,"index":1696},{"krate":0,"index":1699},{"krate":0,"index":1702},{"krate":0,"index":1704},{"krate":0,"index":1706},{"krate":0,"index":1708}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_raw.rs","byte_start":288501,"byte_end":288513,"line_start":194,"line_end":194,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1721},{"krate":0,"index":1722},{"krate":0,"index":1723}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_raw.rs","byte_start":288880,"byte_end":288892,"line_start":207,"line_end":207,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1727},{"krate":0,"index":1728},{"krate":0,"index":1729},{"krate":0,"index":1731},{"krate":0,"index":1732}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":291603,"byte_end":291614,"line_start":39,"line_end":39,"column_start":56,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1773},{"krate":0,"index":1775}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":294250,"byte_end":294271,"line_start":99,"line_end":99,"column_start":59,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":1785},{"krate":0,"index":1786},{"krate":0,"index":1787},{"krate":0,"index":1789}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":297068,"byte_end":297081,"line_start":170,"line_end":170,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1808},{"krate":0,"index":1809}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":298136,"byte_end":298148,"line_start":197,"line_end":197,"column_start":50,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1822}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":299456,"byte_end":299468,"line_start":226,"line_end":226,"column_start":59,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":1830}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":300801,"byte_end":300812,"line_start":23,"line_end":23,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1847},{"krate":0,"index":1848},{"krate":0,"index":1849},{"krate":0,"index":1850}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":303424,"byte_end":303435,"line_start":90,"line_end":90,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1857},{"krate":0,"index":1858}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":310026,"byte_end":310045,"line_start":238,"line_end":238,"column_start":20,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1866},{"krate":0,"index":1867},{"krate":0,"index":1870},{"krate":0,"index":1872},{"krate":0,"index":1875},{"krate":0,"index":1881},{"krate":0,"index":1884},{"krate":0,"index":1887},{"krate":0,"index":1889}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":317636,"byte_end":317649,"line_start":411,"line_end":411,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1893}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":317765,"byte_end":317778,"line_start":415,"line_end":415,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1896}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":317955,"byte_end":317968,"line_start":420,"line_end":420,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1899}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\operator_info.rs","byte_start":318410,"byte_end":318422,"line_start":13,"line_end":13,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1902}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\reclock.rs","byte_start":320607,"byte_end":320613,"line_start":51,"line_end":51,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1930}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\count.rs","byte_start":323399,"byte_end":323405,"line_start":53,"line_end":53,"column_start":46,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1956}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":327172,"byte_end":327182,"line_start":64,"line_end":64,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1995},{"krate":0,"index":1996}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":327390,"byte_end":327400,"line_start":71,"line_end":71,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1999},{"krate":0,"index":2000},{"krate":0,"index":2001}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":329075,"byte_end":329085,"line_start":115,"line_end":115,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2006}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":329234,"byte_end":329244,"line_start":122,"line_end":122,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2009}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":329396,"byte_end":329406,"line_start":129,"line_end":129,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2012},{"krate":0,"index":2013}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":329532,"byte_end":329542,"line_start":137,"line_end":137,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2016}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":329724,"byte_end":329734,"line_start":143,"line_end":143,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2019}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":329912,"byte_end":329922,"line_start":149,"line_end":149,"column_start":27,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":329967,"byte_end":329977,"line_start":151,"line_end":151,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2024}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":330188,"byte_end":330198,"line_start":158,"line_end":158,"column_start":42,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2027}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":330706,"byte_end":330719,"line_start":174,"line_end":174,"column_start":54,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":2037},{"krate":0,"index":2038}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":330997,"byte_end":331010,"line_start":182,"line_end":182,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2043},{"krate":0,"index":2044},{"krate":0,"index":2045},{"krate":0,"index":2046},{"krate":0,"index":2047}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":333027,"byte_end":333040,"line_start":234,"line_end":234,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2051},{"krate":0,"index":2052}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":333177,"byte_end":333190,"line_start":242,"line_end":242,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2056}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":333918,"byte_end":333931,"line_start":265,"line_end":265,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2065},{"krate":0,"index":2066},{"krate":0,"index":2069},{"krate":0,"index":2071}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\tee.rs","byte_start":337762,"byte_end":337765,"line_start":17,"line_end":17,"column_start":47,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2100}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\tee.rs","byte_start":338446,"byte_end":338449,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2104}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\tee.rs","byte_start":338835,"byte_end":338838,"line_start":52,"line_end":52,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2108}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\tee.rs","byte_start":339187,"byte_end":339196,"line_start":66,"line_end":66,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2116}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\tee.rs","byte_start":339453,"byte_end":339462,"line_start":73,"line_end":73,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2121}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\exchange.rs","byte_start":340110,"byte_end":340118,"line_start":16,"line_end":16,"column_start":66,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":2142},{"krate":0,"index":2143}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\exchange.rs","byte_start":340965,"byte_end":340973,"line_start":40,"line_end":40,"column_start":96,"column_end":104},"value":"","parent":null,"children":[{"krate":0,"index":2149}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\counter.rs","byte_start":343766,"byte_end":343773,"line_start":17,"line_end":17,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2168}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\counter.rs","byte_start":344284,"byte_end":344291,"line_start":31,"line_end":31,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2173},{"krate":0,"index":2174}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":345585,"byte_end":345591,"line_start":19,"line_end":19,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2193},{"krate":0,"index":2194},{"krate":0,"index":2196},{"krate":0,"index":2198},{"krate":0,"index":2199},{"krate":0,"index":2200},{"krate":0,"index":2201},{"krate":0,"index":2202}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":348366,"byte_end":348373,"line_start":96,"line_end":96,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2214},{"krate":0,"index":2215},{"krate":0,"index":2217}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":349657,"byte_end":349673,"line_start":131,"line_end":131,"column_start":53,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":2230},{"krate":0,"index":2231},{"krate":0,"index":2233}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":350320,"byte_end":350336,"line_start":153,"line_end":153,"column_start":62,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":2239}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pullers\\counter.rs","byte_start":351268,"byte_end":351275,"line_start":17,"line_end":17,"column_start":53,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2259}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pullers\\counter.rs","byte_start":351772,"byte_end":351779,"line_start":32,"line_end":32,"column_start":53,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2264},{"krate":0,"index":2265}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":353800,"byte_end":353808,"line_start":33,"line_end":33,"column_start":64,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":2293},{"krate":0,"index":2294},{"krate":0,"index":2295}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":354657,"byte_end":354665,"line_start":47,"line_end":47,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2305}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":355104,"byte_end":355112,"line_start":58,"line_end":58,"column_start":100,"column_end":108},"value":"","parent":null,"children":[{"krate":0,"index":2310},{"krate":0,"index":2311},{"krate":0,"index":2312}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":356260,"byte_end":356269,"line_start":80,"line_end":80,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2331}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":356691,"byte_end":356700,"line_start":95,"line_end":95,"column_start":58,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":2336}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":357773,"byte_end":357782,"line_start":128,"line_end":128,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2351}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":358145,"byte_end":358154,"line_start":141,"line_end":141,"column_start":58,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":2356}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\mod.rs","byte_start":336087,"byte_end":336094,"line_start":28,"line_end":28,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2364},{"krate":0,"index":2365},{"krate":0,"index":2366}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\child.rs","byte_start":366494,"byte_end":366499,"line_start":37,"line_end":37,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2419},{"krate":0,"index":2420}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\child.rs","byte_start":366874,"byte_end":366879,"line_start":50,"line_end":50,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2425},{"krate":0,"index":2426},{"krate":0,"index":2427},{"krate":0,"index":2429},{"krate":0,"index":2431},{"krate":0,"index":2432}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\child.rs","byte_start":367726,"byte_end":367731,"line_start":71,"line_end":71,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2437}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\child.rs","byte_start":367939,"byte_end":367944,"line_start":81,"line_end":81,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2442}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\child.rs","byte_start":368074,"byte_end":368079,"line_start":89,"line_end":89,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2447},{"krate":0,"index":2448},{"krate":0,"index":2449},{"krate":0,"index":2450},{"krate":0,"index":2451},{"krate":0,"index":2452}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\child.rs","byte_start":369590,"byte_end":369595,"line_start":136,"line_end":136,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2461}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\mod.rs","byte_start":359253,"byte_end":359259,"line_start":19,"line_end":19,"column_start":50,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2467}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\stream.rs","byte_start":370985,"byte_end":370991,"line_start":30,"line_end":30,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2498},{"krate":0,"index":2501},{"krate":0,"index":2502},{"krate":0,"index":2503}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\barrier.rs","byte_start":372750,"byte_end":372757,"line_start":14,"line_end":14,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2518},{"krate":0,"index":2523},{"krate":0,"index":2524},{"krate":0,"index":2525}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\sequence.rs","byte_start":375540,"byte_end":375556,"line_start":39,"line_end":39,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2547}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\sequence.rs","byte_start":376032,"byte_end":376041,"line_start":55,"line_end":55,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2555},{"krate":0,"index":2557},{"krate":0,"index":2568}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\sequence.rs","byte_start":382636,"byte_end":382645,"line_start":218,"line_end":218,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2571},{"krate":0,"index":2572}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\sequence.rs","byte_start":382862,"byte_end":382871,"line_start":226,"line_end":226,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2575}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":396378,"byte_end":396385,"line_start":56,"line_end":56,"column_start":64,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":2635},{"krate":0,"index":2636},{"krate":0,"index":2637}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":397180,"byte_end":397187,"line_start":80,"line_end":80,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2641}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":397533,"byte_end":397540,"line_start":91,"line_end":91,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2645}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":397764,"byte_end":397771,"line_start":97,"line_end":97,"column_start":67,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":2649}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":398002,"byte_end":398009,"line_start":104,"line_end":104,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":2653}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":398222,"byte_end":398229,"line_start":109,"line_end":109,"column_start":85,"column_end":92},"value":"","parent":null,"children":[{"krate":0,"index":2658},{"krate":0,"index":2661}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":399292,"byte_end":399299,"line_start":136,"line_end":136,"column_start":38,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":399341,"byte_end":399348,"line_start":138,"line_end":138,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":400147,"byte_end":400158,"line_start":21,"line_end":21,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2692},{"krate":0,"index":2693}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":401039,"byte_end":401050,"line_start":43,"line_end":43,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2698}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":404633,"byte_end":404646,"line_start":136,"line_end":136,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2700},{"krate":0,"index":2701}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":407389,"byte_end":407398,"line_start":214,"line_end":214,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2703},{"krate":0,"index":2704}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":408671,"byte_end":408682,"line_start":254,"line_end":254,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2706}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":408791,"byte_end":408802,"line_start":258,"line_end":258,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2708}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":408911,"byte_end":408922,"line_start":262,"line_end":262,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2710}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":409035,"byte_end":409046,"line_start":266,"line_end":266,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2712}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":409163,"byte_end":409174,"line_start":270,"line_end":270,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2714}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":409283,"byte_end":409294,"line_start":274,"line_end":274,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2716}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":409403,"byte_end":409414,"line_start":278,"line_end":278,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2718}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":409526,"byte_end":409537,"line_start":282,"line_end":282,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2720}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":409658,"byte_end":409669,"line_start":286,"line_end":286,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2722}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":409797,"byte_end":409808,"line_start":290,"line_end":290,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2724}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":409935,"byte_end":409946,"line_start":294,"line_end":294,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2726}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":410060,"byte_end":410071,"line_start":298,"line_end":298,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2728}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":410170,"byte_end":410181,"line_start":302,"line_end":302,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2730}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":412230,"byte_end":412241,"line_start":28,"line_end":28,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2756},{"krate":0,"index":2757},{"krate":0,"index":2758},{"krate":0,"index":2759},{"krate":0,"index":2763},{"krate":0,"index":2765},{"krate":0,"index":2771},{"krate":0,"index":2772}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":416709,"byte_end":416724,"line_start":166,"line_end":166,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2778},{"krate":0,"index":2779}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":417674,"byte_end":417683,"line_start":196,"line_end":196,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2786},{"krate":0,"index":2787},{"krate":0,"index":2788}],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":418511,"byte_end":418524,"line_start":230,"line_end":230,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2793},{"krate":0,"index":2794}],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":419119,"byte_end":419138,"line_start":250,"line_end":250,"column_start":28,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2796}],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":419301,"byte_end":419320,"line_start":256,"line_end":256,"column_start":28,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2798}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":419613,"byte_end":419627,"line_start":271,"line_end":271,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2809}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":419861,"byte_end":419875,"line_start":278,"line_end":278,"column_start":19,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2812},{"krate":0,"index":2813}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":419993,"byte_end":420007,"line_start":285,"line_end":285,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2816}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":420116,"byte_end":420130,"line_start":291,"line_end":291,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2819}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":3936,"byte_end":3937,"line_start":106,"line_end":106,"column_start":33,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":4320,"byte_end":4321,"line_start":113,"line_end":113,"column_start":54,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":3547,"byte_end":3553,"line_start":90,"line_end":90,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":32}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":3563,"byte_end":3571,"line_start":91,"line_end":91,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":139}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":23477,"byte_end":23489,"line_start":9,"line_end":9,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":149}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":23499,"byte_end":23507,"line_start":10,"line_end":10,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":172}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":23517,"byte_end":23526,"line_start":11,"line_end":11,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":252}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":23536,"byte_end":23543,"line_start":12,"line_end":12,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":285}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":23553,"byte_end":23562,"line_start":13,"line_end":13,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":304}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":23572,"byte_end":23584,"line_start":14,"line_end":14,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":337}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":23594,"byte_end":23602,"line_start":15,"line_end":15,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":408}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":3581,"byte_end":3589,"line_start":92,"line_end":92,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":555}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\mod.rs","byte_start":130341,"byte_end":130350,"line_start":22,"line_end":22,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":562}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131804,"byte_end":131814,"line_start":35,"line_end":35,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":595}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131824,"byte_end":131829,"line_start":36,"line_end":36,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":680}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131839,"byte_end":131854,"line_start":37,"line_end":37,"column_start":9,"column_end":24},"ref_id":{"krate":0,"index":764}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131864,"byte_end":131879,"line_start":38,"line_end":38,"column_start":9,"column_end":24},"ref_id":{"krate":0,"index":791}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131889,"byte_end":131897,"line_start":39,"line_end":39,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":864}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131907,"byte_end":131913,"line_start":40,"line_end":40,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":916}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131923,"byte_end":131932,"line_start":41,"line_end":41,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":950}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131942,"byte_end":131945,"line_start":42,"line_end":42,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":974}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131955,"byte_end":131962,"line_start":43,"line_end":43,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1014}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131972,"byte_end":131978,"line_start":44,"line_end":44,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1040}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":131988,"byte_end":131993,"line_start":45,"line_end":45,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1060}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":132003,"byte_end":132011,"line_start":46,"line_end":46,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1097}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":132021,"byte_end":132030,"line_start":47,"line_end":47,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1117}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":132040,"byte_end":132045,"line_start":48,"line_end":48,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1136}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":132055,"byte_end":132064,"line_start":49,"line_end":49,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1179}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":132074,"byte_end":132081,"line_start":50,"line_end":50,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1199}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\mod.rs","byte_start":209129,"byte_end":209136,"line_start":84,"line_end":84,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1209}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\mod.rs","byte_start":209146,"byte_end":209152,"line_start":85,"line_end":85,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1235}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\mod.rs","byte_start":209162,"byte_end":209169,"line_start":86,"line_end":86,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1260}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\mod.rs","byte_start":209179,"byte_end":209184,"line_start":87,"line_end":87,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1272}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":132091,"byte_end":132097,"line_start":51,"line_end":51,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1357}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":132108,"byte_end":132119,"line_start":53,"line_end":53,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":1390}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\aggregation\\mod.rs","byte_start":235697,"byte_end":235710,"line_start":17,"line_end":17,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":1393}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\aggregation\\mod.rs","byte_start":235720,"byte_end":235729,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1428}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":132129,"byte_end":132136,"line_start":54,"line_end":54,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1463}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\mod.rs","byte_start":245389,"byte_end":245397,"line_start":5,"line_end":5,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1464}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\mod.rs","byte_start":245407,"byte_end":245417,"line_start":6,"line_end":6,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":1591}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\mod.rs","byte_start":245427,"byte_end":245438,"line_start":7,"line_end":7,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":1649}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":132147,"byte_end":132154,"line_start":56,"line_end":56,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1915}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\mod.rs","byte_start":132164,"byte_end":132169,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1936}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\mod.rs","byte_start":130360,"byte_end":130368,"line_start":23,"line_end":23,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":2076}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\mod.rs","byte_start":335362,"byte_end":335369,"line_start":6,"line_end":6,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2078}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\mod.rs","byte_start":337238,"byte_end":337241,"line_start":5,"line_end":5,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2084}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\mod.rs","byte_start":337251,"byte_end":337259,"line_start":6,"line_end":6,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":2122}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\mod.rs","byte_start":337269,"byte_end":337276,"line_start":7,"line_end":7,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2151}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\mod.rs","byte_start":337286,"byte_end":337292,"line_start":8,"line_end":8,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2175}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\mod.rs","byte_start":335430,"byte_end":335437,"line_start":8,"line_end":8,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2240}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pullers\\mod.rs","byte_start":350483,"byte_end":350490,"line_start":2,"line_end":2,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2242}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\mod.rs","byte_start":335535,"byte_end":335539,"line_start":10,"line_end":10,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2266}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\mod.rs","byte_start":130378,"byte_end":130384,"line_start":24,"line_end":24,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2368}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\mod.rs","byte_start":358977,"byte_end":358982,"line_start":9,"line_end":9,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2378}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\mod.rs","byte_start":130394,"byte_end":130400,"line_start":25,"line_end":25,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2487}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":3599,"byte_end":3614,"line_start":93,"line_end":93,"column_start":9,"column_end":24},"ref_id":{"krate":0,"index":2504}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\mod.rs","byte_start":372317,"byte_end":372324,"line_start":3,"line_end":3,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2505}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\mod.rs","byte_start":372334,"byte_end":372342,"line_start":4,"line_end":4,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":2526}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":3624,"byte_end":3631,"line_start":94,"line_end":94,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2578}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":3641,"byte_end":3646,"line_start":95,"line_end":95,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2619}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":3657,"byte_end":3664,"line_start":97,"line_end":97,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2672}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":3698,"byte_end":3708,"line_start":100,"line_end":100,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":2731}},{"kind":"Mod","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\mod.rs","byte_start":410358,"byte_end":410366,"line_start":6,"line_end":6,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":2734}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":5081,"byte_end":5090,"line_start":22,"line_end":22,"column_start":22,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":2829},"to":{"krate":0,"index":61}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":7538,"byte_end":7544,"line_start":73,"line_end":73,"column_start":32,"column_end":38},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":71},"to":{"krate":0,"index":61}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":8804,"byte_end":8810,"line_start":97,"line_end":97,"column_start":33,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":71},"to":{"krate":0,"index":2829}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":8932,"byte_end":8938,"line_start":103,"line_end":103,"column_start":19,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":71},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":21194,"byte_end":21200,"line_start":458,"line_end":458,"column_start":29,"column_end":35},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":71},"to":{"krate":2,"index":2179}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":21934,"byte_end":21941,"line_start":483,"line_end":483,"column_start":6,"column_end":13},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":128},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\worker.rs","byte_start":22913,"byte_end":22920,"line_start":511,"line_end":511,"column_start":15,"column_end":22},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":128},"to":{"krate":2,"index":1725}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\change_batch.rs","byte_start":27259,"byte_end":27270,"line_start":20,"line_end":20,"column_start":13,"column_end":24},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":2839},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":35925,"byte_end":35934,"line_start":17,"line_end":17,"column_start":23,"column_end":32},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2919},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":41732,"byte_end":41748,"line_start":186,"line_end":186,"column_start":33,"column_end":49},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":2999},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":51556,"byte_end":51557,"line_start":479,"line_end":479,"column_start":94,"column_end":95},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":227},"to":{"krate":0,"index":222}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":51933,"byte_end":51945,"line_start":492,"line_end":492,"column_start":30,"column_end":42},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":3078},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\frontier.rs","byte_start":54296,"byte_end":54308,"line_start":576,"line_end":576,"column_start":49,"column_end":61},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":3078},"to":{"krate":2,"index":1703}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":54969,"byte_end":54974,"line_start":12,"line_end":12,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":2179},"to":{"krate":0,"index":259}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":54975,"byte_end":54977,"line_start":12,"line_end":12,"column_start":28,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2044},"to":{"krate":0,"index":259}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":54978,"byte_end":54990,"line_start":12,"line_end":12,"column_start":31,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":2620},"to":{"krate":0,"index":259}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":54991,"byte_end":54998,"line_start":12,"line_end":12,"column_start":44,"column_end":51},"kind":"SuperTrait","from":{"krate":2,"index":2204},"to":{"krate":0,"index":259}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":54999,"byte_end":55004,"line_start":12,"line_end":12,"column_start":52,"column_end":57},"kind":"SuperTrait","from":{"krate":2,"index":7486},"to":{"krate":0,"index":259}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":55005,"byte_end":55009,"line_start":12,"line_end":12,"column_start":58,"column_end":62},"kind":"SuperTrait","from":{"krate":2,"index":1534},"to":{"krate":0,"index":259}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":55010,"byte_end":55013,"line_start":12,"line_end":12,"column_start":63,"column_end":66},"kind":"SuperTrait","from":{"krate":2,"index":2309},"to":{"krate":0,"index":259}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":55014,"byte_end":55018,"line_start":12,"line_end":12,"column_start":67,"column_end":71},"kind":"SuperTrait","from":{"krate":18,"index":783},"to":{"krate":0,"index":259}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":55019,"byte_end":55023,"line_start":12,"line_end":12,"column_start":72,"column_end":76},"kind":"SuperTrait","from":{"krate":2,"index":7128},"to":{"krate":0,"index":259}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":55024,"byte_end":55027,"line_start":12,"line_end":12,"column_start":77,"column_end":80},"kind":"SuperTrait","from":{"krate":2,"index":2065},"to":{"krate":0,"index":259}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":55252,"byte_end":55257,"line_start":18,"line_end":18,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":2179},"to":{"krate":0,"index":261}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":55266,"byte_end":55268,"line_start":18,"line_end":18,"column_start":42,"column_end":44},"kind":"SuperTrait","from":{"krate":2,"index":2044},"to":{"krate":0,"index":261}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":55269,"byte_end":55281,"line_start":18,"line_end":18,"column_start":45,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":2620},"to":{"krate":0,"index":261}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":55282,"byte_end":55287,"line_start":18,"line_end":18,"column_start":58,"column_end":63},"kind":"SuperTrait","from":{"krate":2,"index":7486},"to":{"krate":0,"index":261}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":55288,"byte_end":55295,"line_start":18,"line_end":18,"column_start":64,"column_end":71},"kind":"SuperTrait","from":{"krate":2,"index":2204},"to":{"krate":0,"index":261}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":58592,"byte_end":58601,"line_start":98,"line_end":98,"column_start":39,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":259},"to":{"krate":0,"index":274}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\timestamp.rs","byte_start":59311,"byte_end":59312,"line_start":112,"line_end":112,"column_start":39,"column_end":40},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":280},"to":{"krate":0,"index":274}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\operate.rs","byte_start":60595,"byte_end":60603,"line_start":10,"line_end":10,"column_start":35,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":2825},"to":{"krate":0,"index":293}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\operate.rs","byte_start":64037,"byte_end":64051,"line_start":74,"line_end":74,"column_start":20,"column_end":34},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":3208},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\broadcast.rs","byte_start":65601,"byte_end":65611,"line_start":31,"line_end":31,"column_start":24,"column_end":34},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":318},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":74732,"byte_end":74739,"line_start":145,"line_end":145,"column_start":20,"column_end":27},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":3217},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":84683,"byte_end":84694,"line_start":388,"line_end":388,"column_start":20,"column_end":31},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":373},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":85425,"byte_end":85440,"line_start":409,"line_end":409,"column_start":20,"column_end":35},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":3228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\reachability.rs","byte_start":86431,"byte_end":86438,"line_start":434,"line_end":434,"column_start":19,"column_end":26},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":362},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","byte_start":102473,"byte_end":102488,"line_start":66,"line_end":66,"column_start":22,"column_end":37},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":433},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","byte_start":109693,"byte_end":109701,"line_start":255,"line_end":255,"column_start":35,"column_end":43},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":458},"to":{"krate":0,"index":2825}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","byte_start":111903,"byte_end":111911,"line_start":317,"line_end":317,"column_start":22,"column_end":30},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":458},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","byte_start":119873,"byte_end":119881,"line_start":501,"line_end":501,"column_start":42,"column_end":50},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":458},"to":{"krate":0,"index":293}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","byte_start":122695,"byte_end":122711,"line_start":571,"line_end":571,"column_start":20,"column_end":36},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":509},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\subgraph.rs","byte_start":129584,"byte_end":129600,"line_start":745,"line_end":745,"column_start":29,"column_end":45},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":509},"to":{"krate":2,"index":1725}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":23894,"byte_end":23902,"line_start":26,"line_end":26,"column_start":6,"column_end":14},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":3238},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":24586,"byte_end":24594,"line_start":41,"line_end":41,"column_start":23,"column_end":31},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":3238},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":24771,"byte_end":24779,"line_start":50,"line_end":50,"column_start":23,"column_end":31},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":3238},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":25570,"byte_end":25576,"line_start":80,"line_end":80,"column_start":6,"column_end":12},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":3406},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\progress\\mod.rs","byte_start":26121,"byte_end":26127,"line_start":99,"line_end":99,"column_start":6,"column_end":12},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":3431},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\enterleave.rs","byte_start":135272,"byte_end":135273,"line_start":80,"line_end":80,"column_start":119,"column_end":120},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":637},"to":{"krate":0,"index":626}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\enterleave.rs","byte_start":135614,"byte_end":135620,"line_start":87,"line_end":87,"column_start":80,"column_end":86},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":3622},"to":{"krate":0,"index":619}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\enterleave.rs","byte_start":136867,"byte_end":136873,"line_start":121,"line_end":121,"column_start":81,"column_end":87},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":3622},"to":{"krate":0,"index":648}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\enterleave.rs","byte_start":137685,"byte_end":137695,"line_start":145,"line_end":145,"column_start":105,"column_end":115},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":658},"to":{"krate":18,"index":786}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\enterleave.rs","byte_start":138644,"byte_end":138653,"line_start":168,"line_end":168,"column_start":61,"column_end":70},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":669},"to":{"krate":18,"index":786}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","byte_start":140432,"byte_end":140437,"line_start":26,"line_end":26,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":2468},"to":{"krate":0,"index":705}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","byte_start":143153,"byte_end":143154,"line_start":96,"line_end":96,"column_start":26,"column_end":27},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":712},"to":{"krate":0,"index":705}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","byte_start":144787,"byte_end":144795,"line_start":143,"line_end":143,"column_start":32,"column_end":40},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":717},"to":{"krate":0,"index":2825}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","byte_start":145227,"byte_end":145235,"line_start":157,"line_end":157,"column_start":34,"column_end":42},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":717},"to":{"krate":0,"index":293}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","byte_start":145993,"byte_end":145999,"line_start":182,"line_end":182,"column_start":28,"column_end":34},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\input.rs","byte_start":152821,"byte_end":152827,"line_start":373,"line_end":373,"column_start":37,"column_end":43},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":736},"to":{"krate":2,"index":1725}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\unordered_input.rs","byte_start":161388,"byte_end":161389,"line_start":82,"line_end":82,"column_start":38,"column_end":39},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":823},"to":{"krate":0,"index":818}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\unordered_input.rs","byte_start":162874,"byte_end":162891,"line_start":123,"line_end":123,"column_start":32,"column_end":49},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":826},"to":{"krate":0,"index":2825}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\unordered_input.rs","byte_start":163320,"byte_end":163337,"line_start":134,"line_end":134,"column_start":34,"column_end":51},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":826},"to":{"krate":0,"index":293}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\unordered_input.rs","byte_start":164091,"byte_end":164106,"line_start":154,"line_end":154,"column_start":29,"column_end":44},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":845},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\unordered_input.rs","byte_start":164876,"byte_end":164894,"line_start":175,"line_end":175,"column_start":20,"column_end":38},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":3456},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\unordered_input.rs","byte_start":165813,"byte_end":165831,"line_start":203,"line_end":203,"column_start":29,"column_end":47},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":3456},"to":{"krate":2,"index":1725}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\feedback.rs","byte_start":168953,"byte_end":168954,"line_start":70,"line_end":70,"column_start":32,"column_end":33},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":890},"to":{"krate":0,"index":879}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\feedback.rs","byte_start":169337,"byte_end":169346,"line_start":80,"line_end":80,"column_start":61,"column_end":70},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":2404},"to":{"krate":0,"index":883}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\feedback.rs","byte_start":170393,"byte_end":170399,"line_start":108,"line_end":108,"column_start":47,"column_end":53},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":3622},"to":{"krate":0,"index":899}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\concat.rs","byte_start":172174,"byte_end":172180,"line_start":26,"line_end":26,"column_start":42,"column_end":48},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":3622},"to":{"krate":0,"index":922}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\concat.rs","byte_start":173087,"byte_end":173093,"line_start":55,"line_end":55,"column_start":47,"column_end":53},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":3622},"to":{"krate":0,"index":930}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\concat.rs","byte_start":173380,"byte_end":173381,"line_start":65,"line_end":65,"column_start":47,"column_end":48},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":941},"to":{"krate":0,"index":930}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\partition.rs","byte_start":175651,"byte_end":175657,"line_start":28,"line_end":28,"column_start":91,"column_end":97},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":3622},"to":{"krate":0,"index":957}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\map.rs","byte_start":178601,"byte_end":178607,"line_start":51,"line_end":51,"column_start":39,"column_end":45},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":3622},"to":{"krate":0,"index":981}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\inspect.rs","byte_start":182198,"byte_end":182204,"line_start":60,"line_end":60,"column_start":43,"column_end":49},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":3622},"to":{"krate":0,"index":1021}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\filter.rs","byte_start":183431,"byte_end":183437,"line_start":25,"line_end":25,"column_start":39,"column_end":45},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":3622},"to":{"krate":0,"index":1047}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\delay.rs","byte_start":187615,"byte_end":187621,"line_start":97,"line_end":97,"column_start":41,"column_end":47},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":3622},"to":{"krate":0,"index":1071}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\exchange.rs","byte_start":190885,"byte_end":190891,"line_start":29,"line_end":29,"column_start":63,"column_end":69},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":3622},"to":{"krate":0,"index":1104}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\broadcast.rs","byte_start":192474,"byte_end":192480,"line_start":38,"line_end":38,"column_start":50,"column_end":56},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":3622},"to":{"krate":0,"index":1125}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\probe.rs","byte_start":199186,"byte_end":199192,"line_start":82,"line_end":82,"column_start":41,"column_end":47},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":3622},"to":{"krate":0,"index":1152}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\probe.rs","byte_start":201464,"byte_end":201470,"line_start":144,"line_end":144,"column_start":20,"column_end":26},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\probe.rs","byte_start":202734,"byte_end":202740,"line_start":173,"line_end":173,"column_start":30,"column_end":36},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1164},"to":{"krate":2,"index":2179}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\to_stream.rs","byte_start":204945,"byte_end":204946,"line_start":31,"line_end":31,"column_start":70,"column_end":71},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1194},"to":{"krate":0,"index":1187}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\capture.rs","byte_start":213625,"byte_end":213631,"line_start":116,"line_end":116,"column_start":54,"column_end":60},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":3622},"to":{"krate":0,"index":1222}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\replay.rs","byte_start":217894,"byte_end":217899,"line_start":52,"line_end":52,"column_start":43,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":1539},"to":{"krate":0,"index":1246}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\replay.rs","byte_start":218602,"byte_end":218603,"line_start":65,"line_end":65,"column_start":49,"column_end":50},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1256},"to":{"krate":0,"index":1246}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\extract.rs","byte_start":222527,"byte_end":222535,"line_start":50,"line_end":50,"column_start":58,"column_end":66},"kind":{"Impl":{"id":119}},"from":{"krate":1,"index":4722},"to":{"krate":0,"index":1262}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":224622,"byte_end":224628,"line_start":36,"line_end":36,"column_start":53,"column_end":59},"kind":{"Impl":{"id":121}},"from":{"krate":1,"index":4729},"to":{"krate":0,"index":1277}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":225532,"byte_end":225541,"line_start":63,"line_end":63,"column_start":16,"column_end":25},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1292},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":225812,"byte_end":225814,"line_start":71,"line_end":71,"column_start":38,"column_end":40},"kind":{"Impl":{"id":123}},"from":{"krate":5,"index":2702},"to":{"krate":0,"index":1277}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":226147,"byte_end":226149,"line_start":79,"line_end":79,"column_start":40,"column_end":42},"kind":{"Impl":{"id":124}},"from":{"krate":5,"index":2702},"to":{"krate":0,"index":1273}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":226629,"byte_end":226638,"line_start":94,"line_end":94,"column_start":25,"column_end":34},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1292},"to":{"krate":2,"index":1725}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":227535,"byte_end":227546,"line_start":127,"line_end":127,"column_start":37,"column_end":48},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1320},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":227898,"byte_end":227909,"line_start":137,"line_end":137,"column_start":85,"column_end":96},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1320},"to":{"krate":0,"index":1277}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":228532,"byte_end":228543,"line_start":155,"line_end":155,"column_start":36,"column_end":47},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1336},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capture\\event.rs","byte_start":229056,"byte_end":229067,"line_start":170,"line_end":170,"column_start":86,"column_end":97},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1336},"to":{"krate":0,"index":1273}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\branch.rs","byte_start":231538,"byte_end":231544,"line_start":37,"line_end":37,"column_start":42,"column_end":48},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":3622},"to":{"krate":0,"index":1364}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\branch.rs","byte_start":233832,"byte_end":233838,"line_start":100,"line_end":100,"column_start":46,"column_end":52},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":3622},"to":{"krate":0,"index":1377}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\aggregation\\state_machine.rs","byte_start":238525,"byte_end":238531,"line_start":57,"line_end":57,"column_start":84,"column_end":90},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":3622},"to":{"krate":0,"index":1404}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\aggregation\\aggregate.rs","byte_start":243900,"byte_end":243906,"line_start":70,"line_end":70,"column_start":81,"column_end":87},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":3622},"to":{"krate":0,"index":1439}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\operator.rs","byte_start":261738,"byte_end":261744,"line_start":329,"line_end":329,"column_start":46,"column_end":52},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":3622},"to":{"krate":0,"index":1481}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_rc.rs","byte_start":274160,"byte_end":274175,"line_start":38,"line_end":38,"column_start":16,"column_end":31},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1620},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_raw.rs","byte_start":283207,"byte_end":283220,"line_start":33,"line_end":33,"column_start":6,"column_end":19},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1671},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_raw.rs","byte_start":283966,"byte_end":283981,"line_start":65,"line_end":65,"column_start":16,"column_end":31},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1681},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_raw.rs","byte_start":288501,"byte_end":288513,"line_start":194,"line_end":194,"column_start":25,"column_end":37},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1709},"to":{"krate":0,"index":2825}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\builder_raw.rs","byte_start":288880,"byte_end":288892,"line_start":207,"line_end":207,"column_start":27,"column_end":39},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1709},"to":{"krate":0,"index":293}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":291603,"byte_end":291614,"line_start":39,"line_end":39,"column_start":56,"column_end":67},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1754},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":294250,"byte_end":294271,"line_start":99,"line_end":99,"column_start":59,"column_end":80},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1761},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":297068,"byte_end":297081,"line_start":170,"line_end":170,"column_start":46,"column_end":59},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1798},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":298136,"byte_end":298148,"line_start":197,"line_end":197,"column_start":50,"column_end":62},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1810},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\handles.rs","byte_start":299456,"byte_end":299468,"line_start":226,"line_end":226,"column_start":59,"column_end":71},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1810},"to":{"krate":2,"index":1725}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":300801,"byte_end":300812,"line_start":23,"line_end":23,"column_start":24,"column_end":35},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1838},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":303424,"byte_end":303435,"line_start":90,"line_end":90,"column_start":37,"column_end":48},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1838},"to":{"krate":2,"index":3510}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":310026,"byte_end":310045,"line_start":238,"line_end":238,"column_start":20,"column_end":39},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1860},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":317636,"byte_end":317649,"line_start":411,"line_end":411,"column_start":20,"column_end":33},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":3523},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":317765,"byte_end":317778,"line_start":415,"line_end":415,"column_start":35,"column_end":48},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":3523},"to":{"krate":2,"index":2076}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\notificator.rs","byte_start":317955,"byte_end":317968,"line_start":420,"line_end":420,"column_start":28,"column_end":41},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":3523},"to":{"krate":2,"index":2065}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\generic\\operator_info.rs","byte_start":318410,"byte_end":318422,"line_start":13,"line_end":13,"column_start":6,"column_end":18},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":3533},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\reclock.rs","byte_start":320607,"byte_end":320613,"line_start":51,"line_end":51,"column_start":43,"column_end":49},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":3622},"to":{"krate":0,"index":1923}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\count.rs","byte_start":323399,"byte_end":323405,"line_start":53,"line_end":53,"column_start":46,"column_end":52},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":3622},"to":{"krate":0,"index":1945}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":327172,"byte_end":327182,"line_start":64,"line_end":64,"column_start":43,"column_end":53},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1989},"to":{"krate":0,"index":1973}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":327390,"byte_end":327400,"line_start":71,"line_end":71,"column_start":20,"column_end":30},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1989},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":329075,"byte_end":329085,"line_start":115,"line_end":115,"column_start":29,"column_end":39},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1989},"to":{"krate":2,"index":1725}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":329234,"byte_end":329244,"line_start":122,"line_end":122,"column_start":30,"column_end":40},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1989},"to":{"krate":2,"index":2179}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":329396,"byte_end":329406,"line_start":129,"line_end":129,"column_start":30,"column_end":40},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1989},"to":{"krate":2,"index":1703}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":329532,"byte_end":329542,"line_start":137,"line_end":137,"column_start":30,"column_end":40},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1989},"to":{"krate":2,"index":7486}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":329724,"byte_end":329734,"line_start":143,"line_end":143,"column_start":34,"column_end":44},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1989},"to":{"krate":2,"index":2039}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":329912,"byte_end":329922,"line_start":149,"line_end":149,"column_start":27,"column_end":37},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1989},"to":{"krate":2,"index":2044}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":329967,"byte_end":329977,"line_start":151,"line_end":151,"column_start":37,"column_end":47},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1989},"to":{"krate":0,"index":2620}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":330188,"byte_end":330198,"line_start":158,"line_end":158,"column_start":42,"column_end":52},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1989},"to":{"krate":2,"index":7128}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":330706,"byte_end":330719,"line_start":174,"line_end":174,"column_start":54,"column_end":67},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":2029},"to":{"krate":0,"index":1973}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":330997,"byte_end":331010,"line_start":182,"line_end":182,"column_start":31,"column_end":44},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":2029},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":333027,"byte_end":333040,"line_start":234,"line_end":234,"column_start":36,"column_end":49},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":2029},"to":{"krate":2,"index":1703}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":333177,"byte_end":333190,"line_start":242,"line_end":242,"column_start":36,"column_end":49},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":2029},"to":{"krate":2,"index":7486}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\operators\\capability.rs","byte_start":333918,"byte_end":333931,"line_start":265,"line_end":265,"column_start":20,"column_end":33},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":2060},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\tee.rs","byte_start":337762,"byte_end":337765,"line_start":17,"line_end":17,"column_start":47,"column_end":50},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":2092},"to":{"krate":18,"index":786}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\tee.rs","byte_start":338446,"byte_end":338449,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":2092},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\tee.rs","byte_start":338835,"byte_end":338838,"line_start":52,"line_end":52,"column_start":22,"column_end":25},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":2092},"to":{"krate":2,"index":2179}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\tee.rs","byte_start":339187,"byte_end":339196,"line_start":66,"line_end":66,"column_start":12,"column_end":21},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":2109},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\tee.rs","byte_start":339453,"byte_end":339462,"line_start":73,"line_end":73,"column_start":22,"column_end":31},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":2109},"to":{"krate":2,"index":2179}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\exchange.rs","byte_start":340110,"byte_end":340118,"line_start":16,"line_end":16,"column_start":66,"column_end":74},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":2128},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\exchange.rs","byte_start":340965,"byte_end":340973,"line_start":40,"line_end":40,"column_start":96,"column_end":104},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":2128},"to":{"krate":18,"index":786}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\counter.rs","byte_start":343766,"byte_end":343773,"line_start":17,"line_end":17,"column_start":38,"column_end":45},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":2157},"to":{"krate":18,"index":786}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\counter.rs","byte_start":344284,"byte_end":344291,"line_start":31,"line_end":31,"column_start":35,"column_end":42},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":2157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":345585,"byte_end":345591,"line_start":19,"line_end":19,"column_start":35,"column_end":41},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":2182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":348366,"byte_end":348373,"line_start":96,"line_end":96,"column_start":42,"column_end":49},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":2203},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":349657,"byte_end":349673,"line_start":131,"line_end":131,"column_start":53,"column_end":69},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":2218},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pushers\\buffer.rs","byte_start":350320,"byte_end":350336,"line_start":153,"line_end":153,"column_start":62,"column_end":78},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":2218},"to":{"krate":2,"index":1725}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pullers\\counter.rs","byte_start":351268,"byte_end":351275,"line_start":17,"line_end":17,"column_start":53,"column_end":60},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":2248},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pullers\\counter.rs","byte_start":351772,"byte_end":351779,"line_start":32,"line_end":32,"column_start":53,"column_end":60},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":2248},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":353800,"byte_end":353808,"line_start":33,"line_end":33,"column_start":64,"column_end":72},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":2288},"to":{"krate":0,"index":2281}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":354657,"byte_end":354665,"line_start":47,"line_end":47,"column_start":28,"column_end":36},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":2297},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":355104,"byte_end":355112,"line_start":58,"line_end":58,"column_start":100,"column_end":108},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":2297},"to":{"krate":0,"index":2281}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":356260,"byte_end":356269,"line_start":80,"line_end":80,"column_start":35,"column_end":44},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":2316},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":356691,"byte_end":356700,"line_start":95,"line_end":95,"column_start":58,"column_end":67},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":2316},"to":{"krate":18,"index":786}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":357773,"byte_end":357782,"line_start":128,"line_end":128,"column_start":35,"column_end":44},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":2338},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\pact.rs","byte_start":358145,"byte_end":358154,"line_start":141,"line_end":141,"column_start":58,"column_end":67},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":2338},"to":{"krate":18,"index":795}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\channels\\mod.rs","byte_start":336087,"byte_end":336094,"line_start":28,"line_end":28,"column_start":12,"column_end":19},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":3539},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\child.rs","byte_start":366494,"byte_end":366499,"line_start":37,"line_end":37,"column_start":16,"column_end":21},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":2408},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\child.rs","byte_start":366874,"byte_end":366879,"line_start":50,"line_end":50,"column_start":29,"column_end":34},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":2408},"to":{"krate":0,"index":61}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\child.rs","byte_start":367726,"byte_end":367731,"line_start":71,"line_end":71,"column_start":30,"column_end":35},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":2408},"to":{"krate":0,"index":2829}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\child.rs","byte_start":367939,"byte_end":367944,"line_start":81,"line_end":81,"column_start":32,"column_end":37},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":2408},"to":{"krate":0,"index":2463}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\child.rs","byte_start":368074,"byte_end":368079,"line_start":89,"line_end":89,"column_start":26,"column_end":31},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":2408},"to":{"krate":0,"index":2468}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\child.rs","byte_start":369590,"byte_end":369595,"line_start":136,"line_end":136,"column_start":26,"column_end":31},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":2408},"to":{"krate":2,"index":2179}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\mod.rs","byte_start":359094,"byte_end":359102,"line_start":14,"line_end":14,"column_start":24,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":61},"to":{"krate":0,"index":2463}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\mod.rs","byte_start":359103,"byte_end":359108,"line_start":14,"line_end":14,"column_start":33,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":2179},"to":{"krate":0,"index":2463}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\mod.rs","byte_start":359253,"byte_end":359259,"line_start":19,"line_end":19,"column_start":50,"column_end":56},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":71},"to":{"krate":0,"index":2463}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\scopes\\mod.rs","byte_start":359710,"byte_end":359721,"line_start":29,"line_end":29,"column_start":18,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":2463},"to":{"krate":0,"index":2468}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\dataflow\\stream.rs","byte_start":370985,"byte_end":370991,"line_start":30,"line_end":30,"column_start":19,"column_end":25},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":3622},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\barrier.rs","byte_start":372750,"byte_end":372757,"line_start":14,"line_end":14,"column_start":19,"column_end":26},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":2511},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\sequence.rs","byte_start":375540,"byte_end":375556,"line_start":39,"line_end":39,"column_start":6,"column_end":22},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":2543},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\sequence.rs","byte_start":376032,"byte_end":376041,"line_start":55,"line_end":55,"column_start":23,"column_end":32},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":2548},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\sequence.rs","byte_start":382636,"byte_end":382645,"line_start":218,"line_end":218,"column_start":22,"column_end":31},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":2548},"to":{"krate":2,"index":3510}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\synchronization\\sequence.rs","byte_start":382862,"byte_end":382871,"line_start":226,"line_end":226,"column_start":18,"column_end":27},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":2548},"to":{"krate":2,"index":1725}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":394637,"byte_end":394639,"line_start":8,"line_end":8,"column_start":26,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":2044},"to":{"krate":0,"index":2620}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":395487,"byte_end":395499,"line_start":26,"line_end":26,"column_start":24,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":2620},"to":{"krate":0,"index":2623}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":396378,"byte_end":396385,"line_start":56,"line_end":56,"column_start":64,"column_end":71},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":3688},"to":{"krate":0,"index":274}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":397180,"byte_end":397187,"line_start":80,"line_end":80,"column_start":22,"column_end":29},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":3688},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":397533,"byte_end":397540,"line_start":91,"line_end":91,"column_start":46,"column_end":53},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":3688},"to":{"krate":2,"index":7486}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":397764,"byte_end":397771,"line_start":97,"line_end":97,"column_start":67,"column_end":74},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":3688},"to":{"krate":0,"index":2620}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":398002,"byte_end":398009,"line_start":104,"line_end":104,"column_start":58,"column_end":65},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":3688},"to":{"krate":0,"index":259}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":398222,"byte_end":398229,"line_start":109,"line_end":109,"column_start":85,"column_end":92},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":3688},"to":{"krate":0,"index":261}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":399215,"byte_end":399227,"line_start":133,"line_end":133,"column_start":19,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":2620},"to":{"krate":0,"index":2664}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":399292,"byte_end":399299,"line_start":136,"line_end":136,"column_start":38,"column_end":45},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":3688},"to":{"krate":0,"index":2664}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\order.rs","byte_start":399341,"byte_end":399348,"line_start":138,"line_end":138,"column_start":29,"column_end":36},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":3688},"to":{"krate":0,"index":2623}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":400147,"byte_end":400158,"line_start":21,"line_end":21,"column_start":15,"column_end":26},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":2681},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":401039,"byte_end":401050,"line_start":43,"line_end":43,"column_start":24,"column_end":35},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":2681},"to":{"krate":2,"index":1725}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":404633,"byte_end":404646,"line_start":136,"line_end":136,"column_start":6,"column_end":19},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":4378},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":407389,"byte_end":407398,"line_start":214,"line_end":214,"column_start":6,"column_end":15},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":5090},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":408671,"byte_end":408682,"line_start":254,"line_end":254,"column_start":30,"column_end":41},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":5170},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":408791,"byte_end":408802,"line_start":258,"line_end":258,"column_start":30,"column_end":41},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":5170},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":408911,"byte_end":408922,"line_start":262,"line_end":262,"column_start":30,"column_end":41},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":5170},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":409035,"byte_end":409046,"line_start":266,"line_end":266,"column_start":34,"column_end":45},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":5170},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":409163,"byte_end":409174,"line_start":270,"line_end":270,"column_start":30,"column_end":41},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":5170},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":409283,"byte_end":409294,"line_start":274,"line_end":274,"column_start":30,"column_end":41},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":5170},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":409403,"byte_end":409414,"line_start":278,"line_end":278,"column_start":30,"column_end":41},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":5170},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":409526,"byte_end":409537,"line_start":282,"line_end":282,"column_start":33,"column_end":44},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":5170},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":409658,"byte_end":409669,"line_start":286,"line_end":286,"column_start":36,"column_end":47},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":5170},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":409797,"byte_end":409808,"line_start":290,"line_end":290,"column_start":37,"column_end":48},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":5170},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":409935,"byte_end":409946,"line_start":294,"line_end":294,"column_start":34,"column_end":45},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":5170},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":410060,"byte_end":410071,"line_start":298,"line_end":298,"column_start":27,"column_end":38},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":5170},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\logging.rs","byte_start":410170,"byte_end":410181,"line_start":302,"line_end":302,"column_start":26,"column_end":37},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":5170},"to":{"krate":2,"index":2221}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":412230,"byte_end":412241,"line_start":28,"line_end":28,"column_start":6,"column_end":17},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":2746},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":416709,"byte_end":416724,"line_start":166,"line_end":166,"column_start":6,"column_end":21},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":2774},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":417674,"byte_end":417683,"line_start":196,"line_end":196,"column_start":6,"column_end":15},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":2782},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":418511,"byte_end":418524,"line_start":230,"line_end":230,"column_start":6,"column_end":19},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":2789},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":419119,"byte_end":419138,"line_start":250,"line_end":250,"column_start":28,"column_end":47},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":5311},"to":{"krate":2,"index":7491}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":419301,"byte_end":419320,"line_start":256,"line_end":256,"column_start":28,"column_end":47},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":5311},"to":{"krate":1,"index":1623}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":419613,"byte_end":419627,"line_start":271,"line_end":271,"column_start":9,"column_end":23},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":2799},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":419861,"byte_end":419875,"line_start":278,"line_end":278,"column_start":19,"column_end":33},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":2799},"to":{"krate":2,"index":1703}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":419993,"byte_end":420007,"line_start":285,"line_end":285,"column_start":22,"column_end":36},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":2799},"to":{"krate":2,"index":1714}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\scheduling\\activate.rs","byte_start":420116,"byte_end":420130,"line_start":291,"line_end":291,"column_start":18,"column_end":32},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":2799},"to":{"krate":2,"index":1725}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":3886,"byte_end":3891,"line_start":105,"line_end":105,"column_start":17,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":2179},"to":{"krate":0,"index":2833}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":3936,"byte_end":3937,"line_start":106,"line_end":106,"column_start":33,"column_end":34},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":2835},"to":{"krate":0,"index":2833}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":4236,"byte_end":4240,"line_start":112,"line_end":112,"column_start":25,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":2833},"to":{"krate":0,"index":2836}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":4258,"byte_end":4262,"line_start":112,"line_end":112,"column_start":47,"column_end":51},"kind":"SuperTrait","from":{"krate":18,"index":783},"to":{"krate":0,"index":2836}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\timely-0.11.1\\src\\lib.rs","byte_start":4320,"byte_end":4321,"line_start":113,"line_end":113,"column_start":54,"column_end":55},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":2838},"to":{"krate":0,"index":2836}}]}