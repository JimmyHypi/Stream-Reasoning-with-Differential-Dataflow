{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21","program":"C:\\Users\\xhimi\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","getopts","C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=2ad65912c268c5b7","-C","extra-filename=-2ad65912c268c5b7","--out-dir","c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps","--extern","unicode_width=c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps\\libunicode_width-ef8146cace387649.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\xhimi\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\xhimi\\Documents\\University\\THESIS\\Stream-Reasoning-with-Differential-Dataflow\\reasoning_service\\target\\rls\\debug\\deps\\libgetopts-2ad65912c268c5b7.rmeta"},"prelude":{"crate_id":{"name":"getopts","disambiguator":[15466764957536115585,7665105578343663632]},"crate_root":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src","external_crates":[{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12578048494495979596,2047601184299498072]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[9458200224090790355,13573932773036415113]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17212932621614837670,6562776948220383497]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[760535750034822653,11118367618612043106]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9863315158332858256,17125058067034963864]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[4687805557387852666,9943473115938981341]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[11895006708321731812,14562333644307237348]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[3795917533932740915,1352930594861700352]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[14246119625412523820,1488400038702589601]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[301469929213911528,4015090225475952437]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[2057170103176572375,2047842178592089941]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5373388065014169986,7291481803049279744]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[11217907578908536000,17992819105755382748]}},{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","num":14,"id":{"name":"unicode_width","disambiguator":[616746393377064855,2116196829730866866]}}],"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":509,"byte_end":34276,"line_start":13,"line_end":1046,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":509,"byte_end":34276,"line_start":13,"line_end":1046,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":31},{"krate":0,"index":33},{"krate":0,"index":61},{"krate":0,"index":103},{"krate":0,"index":113},{"krate":0,"index":112},{"krate":0,"index":110},{"krate":0,"index":108},{"krate":0,"index":115},{"krate":0,"index":129},{"krate":0,"index":127},{"krate":0,"index":124},{"krate":0,"index":122},{"krate":0,"index":131},{"krate":0,"index":145},{"krate":0,"index":143},{"krate":0,"index":142},{"krate":0,"index":140},{"krate":0,"index":138},{"krate":0,"index":147},{"krate":0,"index":161},{"krate":0,"index":159},{"krate":0,"index":158},{"krate":0,"index":156},{"krate":0,"index":154},{"krate":0,"index":163},{"krate":0,"index":175},{"krate":0,"index":173},{"krate":0,"index":170},{"krate":0,"index":168},{"krate":0,"index":177},{"krate":0,"index":189},{"krate":0,"index":186},{"krate":0,"index":184},{"krate":0,"index":191},{"krate":0,"index":204},{"krate":0,"index":202},{"krate":0,"index":199},{"krate":0,"index":197},{"krate":0,"index":206},{"krate":0,"index":217},{"krate":0,"index":215},{"krate":0,"index":212},{"krate":0,"index":210},{"krate":0,"index":219},{"krate":0,"index":242},{"krate":0,"index":240},{"krate":0,"index":237},{"krate":0,"index":235},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":101}],"decl_id":null,"docs":" Simple getopt alternative.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":3407,"byte_end":3429,"line_start":100,"line_end":100,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":27},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":3911,"byte_end":3918,"line_start":127,"line_end":127,"column_start":12,"column_end":19},"name":"Options","qualname":"::Options","value":"Options {  }","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30}],"decl_id":null,"docs":" A description of the options that a program can handle.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":4151,"byte_end":4154,"line_start":141,"line_end":141,"column_start":12,"column_end":15},"name":"new","qualname":"<Options>::new","value":"fn () -> Options","parent":null,"children":[],"decl_id":null,"docs":" Create a blank set of options.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":4363,"byte_end":4376,"line_start":150,"line_end":150,"column_start":12,"column_end":25},"name":"parsing_style","qualname":"<Options>::parsing_style","value":"fn (&mut self, style: ParsingStyle) -> &mut Options","parent":null,"children":[],"decl_id":null,"docs":" Set the parsing style.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":4939,"byte_end":4948,"line_start":163,"line_end":163,"column_start":12,"column_end":21},"name":"long_only","qualname":"<Options>::long_only","value":"fn (&mut self, long_only: bool) -> &mut Options","parent":null,"children":[],"decl_id":null,"docs":" Set or clear \"long options only\" mode.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":5136,"byte_end":5139,"line_start":169,"line_end":169,"column_start":12,"column_end":15},"name":"opt","qualname":"<Options>::opt","value":"fn (&mut self, short_name: &str, long_name: &str, desc: &str, hint: &str, hasarg: HasArg, occur: Occur) -> &mut Options","parent":null,"children":[],"decl_id":null,"docs":" Create a generic option group, stating all parameters explicitly.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":5931,"byte_end":5938,"line_start":195,"line_end":195,"column_start":12,"column_end":19},"name":"optflag","qualname":"<Options>::optflag","value":"fn (&mut self, short_name: &str, long_name: &str, desc: &str) -> &mut Options","parent":null,"children":[],"decl_id":null,"docs":" Create a long option that is optional and does not take an argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":6658,"byte_end":6670,"line_start":214,"line_end":214,"column_start":12,"column_end":24},"name":"optflagmulti","qualname":"<Options>::optflagmulti","value":"fn (&mut self, short_name: &str, long_name: &str, desc: &str) -> &mut Options","parent":null,"children":[],"decl_id":null,"docs":" Create a long option that can occur more than once and does not\n take an argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":7495,"byte_end":7505,"line_start":234,"line_end":234,"column_start":12,"column_end":22},"name":"optflagopt","qualname":"<Options>::optflagopt","value":"fn (&mut self, short_name: &str, long_name: &str, desc: &str, hint: &str) -> &mut Options","parent":null,"children":[],"decl_id":null,"docs":" Create a long option that is optional and takes an optional argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":8423,"byte_end":8431,"line_start":261,"line_end":261,"column_start":12,"column_end":20},"name":"optmulti","qualname":"<Options>::optmulti","value":"fn (&mut self, short_name: &str, long_name: &str, desc: &str, hint: &str) -> &mut Options","parent":null,"children":[],"decl_id":null,"docs":" Create a long option that is optional, takes an argument, and may occur\n multiple times.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":9309,"byte_end":9315,"line_start":287,"line_end":287,"column_start":12,"column_end":18},"name":"optopt","qualname":"<Options>::optopt","value":"fn (&mut self, short_name: &str, long_name: &str, desc: &str, hint: &str) -> &mut Options","parent":null,"children":[],"decl_id":null,"docs":" Create a long option that is optional and takes an argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":10196,"byte_end":10202,"line_start":313,"line_end":313,"column_start":12,"column_end":18},"name":"reqopt","qualname":"<Options>::reqopt","value":"fn (&mut self, short_name: &str, long_name: &str, desc: &str, hint: &str) -> &mut Options","parent":null,"children":[],"decl_id":null,"docs":" Create a long option that is required and takes an argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":11028,"byte_end":11033,"line_start":340,"line_end":340,"column_start":12,"column_end":17},"name":"parse","qualname":"<Options>::parse","value":"fn <C> (&self, args: C) -> Result","parent":null,"children":[],"decl_id":null,"docs":" Parse command line arguments according to the provided options.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":17180,"byte_end":17191,"line_start":483,"line_end":483,"column_start":12,"column_end":23},"name":"short_usage","qualname":"<Options>::short_usage","value":"fn (&self, program_name: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Derive a short one-line usage summary from a set of long options.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":17584,"byte_end":17589,"line_start":497,"line_end":497,"column_start":12,"column_end":17},"name":"usage","qualname":"<Options>::usage","value":"fn (&self, brief: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Derive a formatted message from a set of options.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":17979,"byte_end":17996,"line_start":509,"line_end":509,"column_start":12,"column_end":29},"name":"usage_with_format","qualname":"<Options>::usage_with_format","value":"fn <F> (&self, mut formatter: F) -> String","parent":null,"children":[],"decl_id":null,"docs":" Derive a custom formatted message from a set of options. The formatted options provided to\n a closure as an iterator.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":21185,"byte_end":21198,"line_start":615,"line_end":615,"column_start":5,"column_end":18},"name":"FloatingFrees","qualname":"::ParsingStyle::FloatingFrees","value":"ParsingStyle::FloatingFrees","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Flags and \"free\" arguments can be freely inter-mixed.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":106},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":21332,"byte_end":21347,"line_start":618,"line_end":618,"column_start":5,"column_end":20},"name":"StopAtFirstFree","qualname":"::ParsingStyle::StopAtFirstFree","value":"ParsingStyle::StopAtFirstFree","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" As soon as a \"free\" argument (i.e. non-flag) is encountered, stop\n considering any remaining arguments as flags.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":21104,"byte_end":21116,"line_start":613,"line_end":613,"column_start":10,"column_end":22},"name":"ParsingStyle","qualname":"::ParsingStyle","value":"ParsingStyle::{FloatingFrees, StopAtFirstFree}","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":106}],"decl_id":null,"docs":" What parsing style to use when parsing arguments.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":21823,"byte_end":21826,"line_start":636,"line_end":636,"column_start":5,"column_end":8},"name":"Yes","qualname":"::HasArg::Yes","value":"HasArg::Yes","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" The option requires an argument.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":21870,"byte_end":21872,"line_start":638,"line_end":638,"column_start":5,"column_end":7},"name":"No","qualname":"::HasArg::No","value":"HasArg::No","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" The option takes no argument.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":21919,"byte_end":21924,"line_start":640,"line_end":640,"column_start":5,"column_end":10},"name":"Maybe","qualname":"::HasArg::Maybe","value":"HasArg::Maybe","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" The option argument is optional.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":131},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":21769,"byte_end":21775,"line_start":634,"line_end":634,"column_start":10,"column_end":16},"name":"HasArg","qualname":"::HasArg","value":"HasArg::{Yes, No, Maybe}","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136}],"decl_id":null,"docs":" Describes whether an option has an argument.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":148},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":22072,"byte_end":22075,"line_start":647,"line_end":647,"column_start":5,"column_end":8},"name":"Req","qualname":"::Occur::Req","value":"Occur::Req","parent":{"krate":0,"index":147},"children":[],"decl_id":null,"docs":" The option occurs once.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":22121,"byte_end":22129,"line_start":649,"line_end":649,"column_start":5,"column_end":13},"name":"Optional","qualname":"::Occur::Optional","value":"Occur::Optional","parent":{"krate":0,"index":147},"children":[],"decl_id":null,"docs":" The option occurs at most once.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":22181,"byte_end":22186,"line_start":651,"line_end":651,"column_start":5,"column_end":10},"name":"Multi","qualname":"::Occur::Multi","value":"Occur::Multi","parent":{"krate":0,"index":147},"children":[],"decl_id":null,"docs":" The option occurs zero or more times.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":22028,"byte_end":22033,"line_start":645,"line_end":645,"column_start":10,"column_end":15},"name":"Occur","qualname":"::Occur","value":"Occur::{Req, Optional, Multi}","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152}],"decl_id":null,"docs":" Describes how often an option may occur.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":206},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":23387,"byte_end":23394,"line_start":695,"line_end":695,"column_start":12,"column_end":19},"name":"Matches","qualname":"::Matches","value":"Matches { free }","parent":null,"children":[{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209}],"decl_id":null,"docs":" The result of checking command line arguments. Contains a vector\n of matches and a vector of free strings.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":23584,"byte_end":23588,"line_start":701,"line_end":701,"column_start":9,"column_end":13},"name":"free","qualname":"::Matches::free","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":206},"children":[],"decl_id":null,"docs":" Free string fragments\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":220},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":23882,"byte_end":23897,"line_start":710,"line_end":710,"column_start":5,"column_end":20},"name":"ArgumentMissing","qualname":"::Fail::ArgumentMissing","value":"Fail::ArgumentMissing(String)","parent":{"krate":0,"index":219},"children":[],"decl_id":null,"docs":" The option requires an argument but none was passed.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":223},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":23981,"byte_end":23999,"line_start":712,"line_end":712,"column_start":5,"column_end":23},"name":"UnrecognizedOption","qualname":"::Fail::UnrecognizedOption","value":"Fail::UnrecognizedOption(String)","parent":{"krate":0,"index":219},"children":[],"decl_id":null,"docs":" The passed option is not declared among the possible options.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":24055,"byte_end":24068,"line_start":714,"line_end":714,"column_start":5,"column_end":18},"name":"OptionMissing","qualname":"::Fail::OptionMissing","value":"Fail::OptionMissing(String)","parent":{"krate":0,"index":219},"children":[],"decl_id":null,"docs":" A required option is not present.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":229},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":24147,"byte_end":24163,"line_start":716,"line_end":716,"column_start":5,"column_end":21},"name":"OptionDuplicated","qualname":"::Fail::OptionDuplicated","value":"Fail::OptionDuplicated(String)","parent":{"krate":0,"index":219},"children":[],"decl_id":null,"docs":" A single occurrence option is being used multiple times.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":24244,"byte_end":24262,"line_start":718,"line_end":718,"column_start":5,"column_end":23},"name":"UnexpectedArgument","qualname":"::Fail::UnexpectedArgument","value":"Fail::UnexpectedArgument(String)","parent":{"krate":0,"index":219},"children":[],"decl_id":null,"docs":" There's an argument being passed to a non-argument option.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":219},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":23810,"byte_end":23814,"line_start":708,"line_end":708,"column_start":10,"column_end":14},"name":"Fail","qualname":"::Fail","value":"Fail::{ArgumentMissing, UnrecognizedOption, OptionMissing, OptionDuplicated, UnexpectedArgument}","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":226},{"krate":0,"index":229},{"krate":0,"index":232}],"decl_id":null,"docs":" The type returned when the command line does not conform to the\n expected format. Use the `Debug` implementation to output detailed\n information.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":24727,"byte_end":24733,"line_start":734,"line_end":734,"column_start":10,"column_end":16},"name":"Result","qualname":"::Result","value":"result::Result<Matches, Fail>","parent":null,"children":[],"decl_id":null,"docs":" The result of parsing a command line with a set of options.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":26794,"byte_end":26805,"line_start":807,"line_end":807,"column_start":12,"column_end":23},"name":"opt_defined","qualname":"<Matches>::opt_defined","value":"fn (&self, nm: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if an option was defined\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":26958,"byte_end":26969,"line_start":812,"line_end":812,"column_start":12,"column_end":23},"name":"opt_present","qualname":"<Matches>::opt_present","value":"fn (&self, nm: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if an option was matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":27112,"byte_end":27121,"line_start":817,"line_end":817,"column_start":12,"column_end":21},"name":"opt_count","qualname":"<Matches>::opt_count","value":"fn (&self, nm: &str) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of times an option was matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":27278,"byte_end":27291,"line_start":822,"line_end":822,"column_start":12,"column_end":25},"name":"opt_positions","qualname":"<Matches>::opt_positions","value":"fn (&self, nm: &str) -> Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns a vector of all the positions in which an option was matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":27472,"byte_end":27484,"line_start":827,"line_end":827,"column_start":12,"column_end":24},"name":"opts_present","qualname":"<Matches>::opts_present","value":"fn (&self, names: &[String]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if any of several options were matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":27842,"byte_end":27850,"line_start":837,"line_end":837,"column_start":12,"column_end":20},"name":"opts_str","qualname":"<Matches>::opts_str","value":"fn (&self, names: &[String]) -> Option<String>","parent":null,"children":[],"decl_id":null,"docs":" Returns the string argument supplied to one of several matching options or `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":28262,"byte_end":28270,"line_start":851,"line_end":851,"column_start":12,"column_end":20},"name":"opt_strs","qualname":"<Matches>::opt_strs","value":"fn (&self, nm: &str) -> Vec<String>","parent":null,"children":[],"decl_id":null,"docs":" Returns a vector of the arguments provided to all matches of the given\n option.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":28704,"byte_end":28716,"line_start":865,"line_end":865,"column_start":12,"column_end":24},"name":"opt_strs_pos","qualname":"<Matches>::opt_strs_pos","value":"fn (&self, nm: &str) -> Vec<(usize, String)>","parent":null,"children":[],"decl_id":null,"docs":" Returns a vector of the arguments provided to all matches of the given\n option, together with their positions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":29054,"byte_end":29061,"line_start":876,"line_end":876,"column_start":12,"column_end":19},"name":"opt_str","qualname":"<Matches>::opt_str","value":"fn (&self, nm: &str) -> Option<String>","parent":null,"children":[],"decl_id":null,"docs":" Returns the string argument supplied to a matching option or `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":29492,"byte_end":29503,"line_start":888,"line_end":888,"column_start":12,"column_end":23},"name":"opt_default","qualname":"<Matches>::opt_default","value":"fn (&self, nm: &str, def: &str) -> Option<String>","parent":null,"children":[],"decl_id":null,"docs":" Returns the matching string, a default, or `None`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":29852,"byte_end":29859,"line_start":899,"line_end":899,"column_start":12,"column_end":19},"name":"opt_get","qualname":"<Matches>::opt_get","value":"fn <T> (&self, nm: &str) -> result::Result<Option<T>, T::Err>","parent":null,"children":[],"decl_id":null,"docs":" Returns some matching value or `None`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":30399,"byte_end":30414,"line_start":915,"line_end":915,"column_start":12,"column_end":27},"name":"opt_get_default","qualname":"<Matches>::opt_get_default","value":"fn <T> (&self, nm: &str, def: T) -> result::Result<T, T::Err>","parent":null,"children":[],"decl_id":null,"docs":" Returns a matching value or default.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":4020,"byte_end":4027,"line_start":133,"line_end":133,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":4091,"byte_end":4098,"line_start":139,"line_end":139,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":55},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":24290,"byte_end":24294,"line_start":721,"line_end":721,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":24773,"byte_end":24777,"line_start":736,"line_end":736,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":25119,"byte_end":25127,"line_start":753,"line_end":753,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":26369,"byte_end":26376,"line_start":795,"line_end":795,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":79},{"krate":0,"index":81},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":31201,"byte_end":31205,"line_start":948,"line_end":948,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":4020,"byte_end":4027,"line_start":133,"line_end":133,"column_start":18,"column_end":25},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":27},"to":{"krate":2,"index":2204}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":4091,"byte_end":4098,"line_start":139,"line_end":139,"column_start":6,"column_end":13},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":27},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":24290,"byte_end":24294,"line_start":721,"line_end":721,"column_start":16,"column_end":20},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":219},"to":{"krate":1,"index":1623}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":24773,"byte_end":24777,"line_start":736,"line_end":736,"column_start":6,"column_end":10},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":115},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":25119,"byte_end":25127,"line_start":753,"line_end":753,"column_start":6,"column_end":14},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":177},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":26369,"byte_end":26376,"line_start":795,"line_end":795,"column_start":6,"column_end":13},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\xhimi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getopts-0.2.21\\src\\lib.rs","byte_start":31201,"byte_end":31205,"line_start":948,"line_end":948,"column_start":23,"column_end":27},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":219},"to":{"krate":2,"index":7491}}]}