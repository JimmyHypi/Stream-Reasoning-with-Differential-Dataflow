use log::{debug};
use std::sync::Arc;
grammar;

NTriplesString = DsvDataset<StringTerm>;
pub ArcStringTriple = Triple<StringTerm>;

DsvDataset<T> = Dot<Triple<T>>;

Dot<T>: Vec<T> = {
	<mut v: (<T> " .")*> <e: T?> => match e {
		None => v,
		Some(e) => {
			v.push(e);
			v
		}
	}
};

Triple<T>: (T, T, T) =
<s: T> <p: T> <o: T> => (s, p, o);

StringTerm: Arc<String> = {
		    <s: r##"[a-z:?/0-9A-Z\-#\x20.,@^"]+"##> => {
			    debug!("Ter: {}", s.trim());
			    let string = format!("{}", s.trim());
			    Arc::from(string)
		    },
		    <t: r##"<([@a-z_:?/.0-9A-Z\-#~])*>"##> => {
			    debug!("Iri: {}", t.trim());
			    let string = String::from(t.trim()); Arc::from(string)
		    },
		    <t: r##"_([a-z_:?/0-9A-Z\-#])+"##> => {
			    debug!("Bn: {}", t.trim());
			    let string = String::from(t); Arc::from(string)
		    },
	    };

